{"version":3,"file":"component_resolver.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/component_resolver.ts"],"names":[],"mappings":"OAIS,EAAO,OAAO,EAAE,SAAS,EAAC,MAAM,uBAAuB;OACzD,EAAC,aAAa,EAAC,MAAM,6BAA6B;OAClD,EAAC,cAAc,EAAC,MAAM,wBAAwB;OAC9C,EAAC,SAAS,EAAC,MAAM,0BAA0B;OAC3C,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;OAC7C,EAAC,UAAU,EAAC,MAAM,kBAAkB;AAE3C;;;GAGG;AACH;AAGA,CAAC;AAED,6BAA6B,IAAS;IACpC,MAAM,CAAC,IAAI,YAAY,gBAAgB,CAAC;AAC1C,CAAC;AACD,gDAAgD,iBAAiB;IAC/D,gBAAgB,CAAC,aAAmB;QAClC,IAAI,SAAS,GAAG,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,gBAAgB,GAAG,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,aAAa,CAAC,4BAA4B,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxF,CAAC;QACD,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAClD,CAAC;IACD,UAAU,KAAI,CAAC;AAIjB,CAAC;AAHM,qCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CACA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Type, isBlank, stringify} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {PromiseWrapper} from '../../src/facade/async';\nimport {reflector} from '../reflection/reflection';\nimport {ComponentFactory} from './component_factory';\nimport {Injectable} from '../di/decorators';\n\n/**\n * Low-level service for loading {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n */\nexport abstract class ComponentResolver {\n  abstract resolveComponent(componentType: Type): Promise<ComponentFactory<any>>;\n  abstract clearCache();\n}\n\nfunction _isComponentFactory(type: any): boolean {\n  return type instanceof ComponentFactory;\n}\nexport class ReflectorComponentResolver extends ComponentResolver {\n  resolveComponent(componentType: Type): Promise<ComponentFactory<any>> {\n    var metadatas = reflector.annotations(componentType);\n    var componentFactory = metadatas.find(_isComponentFactory);\n\n    if (isBlank(componentFactory)) {\n      throw new BaseException(`No precompiled component ${stringify(componentType)} found`);\n    }\n    return PromiseWrapper.resolve(componentFactory);\n  }\n  clearCache() {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n"]}