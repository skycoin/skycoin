{"version":3,"file":"i18n_parser.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/i18n_parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Lexer as ExpressionLexer} from '../expression_parser/lexer';\nimport {Parser as ExpressionParser} from '../expression_parser/parser';\nimport * as html from '../ml_parser/ast';\nimport {getHtmlTagDefinition} from '../ml_parser/html_tags';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseSourceSpan} from '../parse_util';\nimport {digestMessage} from './digest';\n\nimport * as i18n from './i18n_ast';\nimport {PlaceholderRegistry} from './serializers/placeholder';\n\nconst _expParser = new ExpressionParser(new ExpressionLexer());\n\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\nexport function createI18nMessageFactory(interpolationConfig: InterpolationConfig): (\n    nodes: html.Node[], meaning: string, description: string) => i18n.Message {\n  const visitor = new _I18nVisitor(_expParser, interpolationConfig);\n\n  return (nodes: html.Node[], meaning: string, description: string) =>\n             visitor.toI18nMessage(nodes, meaning, description);\n}\n\nclass _I18nVisitor implements html.Visitor {\n  private _isIcu: boolean;\n  private _icuDepth: number;\n  private _placeholderRegistry: PlaceholderRegistry;\n  private _placeholderToContent: {[name: string]: string};\n  private _placeholderToIds: {[name: string]: string};\n\n  constructor(\n      private _expressionParser: ExpressionParser,\n      private _interpolationConfig: InterpolationConfig) {}\n\n  public toI18nMessage(nodes: html.Node[], meaning: string, description: string): i18n.Message {\n    this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;\n    this._icuDepth = 0;\n    this._placeholderRegistry = new PlaceholderRegistry();\n    this._placeholderToContent = {};\n    this._placeholderToIds = {};\n\n    const i18nodes: i18n.Node[] = html.visitAll(this, nodes, {});\n\n    return new i18n.Message(\n        i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);\n  }\n\n  visitElement(el: html.Element, context: any): i18n.Node {\n    const children = html.visitAll(this, el.children);\n    const attrs: {[k: string]: string} = {};\n    el.attrs.forEach(attr => {\n      // Do not visit the attributes, translatable ones are top-level ASTs\n      attrs[attr.name] = attr.value;\n    });\n\n    const isVoid: boolean = getHtmlTagDefinition(el.name).isVoid;\n    const startPhName =\n        this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n    this._placeholderToContent[startPhName] = el.sourceSpan.toString();\n\n    let closePhName = '';\n\n    if (!isVoid) {\n      closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n      this._placeholderToContent[closePhName] = `</${el.name}>`;\n    }\n\n    return new i18n.TagPlaceholder(\n        el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n  }\n\n  visitText(text: html.Text, context: any): i18n.Node {\n    return this._visitTextWithInterpolation(text.value, text.sourceSpan);\n  }\n\n  visitComment(comment: html.Comment, context: any): i18n.Node { return null; }\n\n  visitExpansion(icu: html.Expansion, context: any): i18n.Node {\n    this._icuDepth++;\n    const i18nIcuCases: {[k: string]: i18n.Node} = {};\n    const i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n    icu.cases.forEach((caze): void => {\n      i18nIcuCases[caze.value] = new i18n.Container(\n          caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);\n    });\n    this._icuDepth--;\n\n    if (this._isIcu || this._icuDepth > 0) {\n      // If the message (vs a part of the message) is an ICU message returns it\n      return i18nIcu;\n    }\n\n    // Else returns a placeholder\n    // ICU placeholders should not be replaced with their original content but with the their\n    // translations. We need to create a new visitor (they are not re-entrant) to compute the\n    // message id.\n    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n    const phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n    const visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n    this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));\n    return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): i18n.Node {\n    throw new Error('Unreachable code');\n  }\n\n  private _visitTextWithInterpolation(text: string, sourceSpan: ParseSourceSpan): i18n.Node {\n    const splitInterpolation = this._expressionParser.splitInterpolation(\n        text, sourceSpan.start.toString(), this._interpolationConfig);\n\n    if (!splitInterpolation) {\n      // No expression, return a single text\n      return new i18n.Text(text, sourceSpan);\n    }\n\n    // Return a group of text + expressions\n    const nodes: i18n.Node[] = [];\n    const container = new i18n.Container(nodes, sourceSpan);\n    const {start: sDelimiter, end: eDelimiter} = this._interpolationConfig;\n\n    for (let i = 0; i < splitInterpolation.strings.length - 1; i++) {\n      const expression = splitInterpolation.expressions[i];\n      const baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n      const phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n\n      if (splitInterpolation.strings[i].length) {\n        // No need to add empty strings\n        nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));\n      }\n\n      nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));\n      this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n    }\n\n    // The last index contains no expression\n    const lastStringIdx = splitInterpolation.strings.length - 1;\n    if (splitInterpolation.strings[lastStringIdx].length) {\n      nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));\n    }\n    return container;\n  }\n}\n\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*\"([\\s\\S]*?)\"[\\s\\S]*\\)/g;\n\nfunction _extractPlaceholderName(input: string): string {\n  return input.split(_CUSTOM_PH_EXP)[1];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}