{"version":3,"file":"ng_style.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/directives/ng_style.ts"],"names":[],"mappings":"OAKO,EAGL,eAAe,EACf,UAAU,EACV,SAAS,EACT,QAAQ,EACT,MAAM,eAAe;OACf,EAAC,SAAS,EAAE,OAAO,EAAC,MAAM,uBAAuB;AACxD;IAME,YAAoB,QAAyB,EAAU,KAAiB,EACpD,SAAmB;QADnB,aAAQ,GAAR,QAAQ,CAAiB;QAAU,UAAK,GAAL,KAAK,CAAY;QACpD,cAAS,GAAT,SAAS,CAAU;IAAG,CAAC;IAE3C,IAAI,QAAQ,CAAC,CAA0B;QACrC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAED,SAAS;QACP,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;IACH,CAAC;IAEO,aAAa,CAAC,OAAY;QAChC,OAAO,CAAC,gBAAgB,CACpB,CAAC,MAA4B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5F,OAAO,CAAC,kBAAkB,CACtB,CAAC,MAA4B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5F,OAAO,CAAC,kBAAkB,CACtB,CAAC,MAA4B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEO,SAAS,CAAC,IAAY,EAAE,GAAW;QACzC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IACtE,CAAC;AASH,CAAC;AARM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,mBAAmB,CAAC,EAAC,EAAG,EAAE;CACpF,CAAC;AACK,sBAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,eAAe,GAAG;IACzB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,CACA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {KeyValueChangeRecord} from '@angular/core';\nimport {\n  DoCheck,\n  KeyValueDiffer,\n  KeyValueDiffers,\n  ElementRef,\n  Directive,\n  Renderer\n} from '@angular/core';\nimport {isPresent, isBlank} from '../../src/facade/lang';\nexport class NgStyle implements DoCheck {\n  /** @internal */\n  _rawStyle: {[key: string]: string};\n  /** @internal */\n  _differ: KeyValueDiffer;\n\n  constructor(private _differs: KeyValueDiffers, private _ngEl: ElementRef,\n              private _renderer: Renderer) {}\n\n  set rawStyle(v: {[key: string]: string}) {\n    this._rawStyle = v;\n    if (isBlank(this._differ) && isPresent(v)) {\n      this._differ = this._differs.find(this._rawStyle).create(null);\n    }\n  }\n\n  ngDoCheck() {\n    if (isPresent(this._differ)) {\n      var changes = this._differ.diff(this._rawStyle);\n      if (isPresent(changes)) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _applyChanges(changes: any): void {\n    changes.forEachAddedItem(\n        (record: KeyValueChangeRecord) => { this._setStyle(record.key, record.currentValue); });\n    changes.forEachChangedItem(\n        (record: KeyValueChangeRecord) => { this._setStyle(record.key, record.currentValue); });\n    changes.forEachRemovedItem(\n        (record: KeyValueChangeRecord) => { this._setStyle(record.key, null); });\n  }\n\n  private _setStyle(name: string, val: string): void {\n    this._renderer.setElementStyle(this._ngEl.nativeElement, name, val);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngStyle]', inputs: ['rawStyle: ngStyle']}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\n}\n"]}