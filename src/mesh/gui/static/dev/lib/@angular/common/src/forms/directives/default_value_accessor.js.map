{"version":3,"file":"default_value_accessor.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/directives/default_value_accessor.ts"],"names":[],"mappings":";AAIE,qBAA0D,eAAe,CAAC,CAAA;AAC5E,qBAAsB,0BAA0B,CAAC,CAAA;AACjD,uCAAsD,0BAA0B,CAAC,CAAA;AAEpE,8BAAsB;AAC/B,uBAAuB,CAAC;IACtB,OAAO,EAAE,0CAAiB;IAC1B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,oBAAoB,EAApB,CAAoB,CAAC;IACnD,KAAK,EAAE,IAAI;CACZ,CAAC;AACN;IAIE,8BAAoB,SAAmB,EAAU,WAAuB;QAApD,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAY;QAHxE,aAAQ,GAAG,UAAC,CAAM,IAAM,CAAC,CAAC;QAC1B,cAAS,GAAG,cAAO,CAAC,CAAC;IAEsD,CAAC;IAE5E,yCAAU,GAAV,UAAW,KAAU;QACnB,IAAI,eAAe,GAAG,cAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;QAClD,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IAC9F,CAAC;IAED,+CAAgB,GAAhB,UAAiB,EAAoB,IAAU,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC;IACpE,gDAAiB,GAAjB,UAAkB,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;IAC3D,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EACJ,sMAAsM;oBAC1M,sEAAsE;oBACtE,gEAAgE;oBAChE,qDAAqD;oBACrD,IAAI,EAAE,EAAC,SAAS,EAAE,+BAA+B,EAAE,QAAQ,EAAE,aAAa,EAAC;oBAC3E,QAAQ,EAAE,CAAC,8BAAsB,CAAC;iBACnC,EAAG,EAAE;KACL,CAAC;IACK,mCAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,eAAQ,GAAG;QAClB,EAAC,IAAI,EAAE,iBAAU,GAAG;KACnB,CAAC;IACF,2BAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,4BAAoB,uBA4BhC,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Directive, ElementRef, Renderer, forwardRef} from '@angular/core';\nimport {isBlank} from '../../../src/facade/lang';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from './control_value_accessor';\n\nexport const DEFAULT_VALUE_ACCESSOR: any = /*@ts2dart_const*/\n    /* @ts2dart_Provider */ {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DefaultValueAccessor),\n      multi: true\n    };\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: any): void {\n    var normalizedValue = isBlank(value) ? '' : value;\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngControl],[ngModel],[ngFormControl]',\n  host: {'(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  bindings: [DEFAULT_VALUE_ACCESSOR]\n}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n"]}