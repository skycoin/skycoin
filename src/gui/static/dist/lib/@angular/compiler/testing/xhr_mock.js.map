{"version":3,"file":"xhr_mock.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing/xhr_mock.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {XHR} from '../index';\nimport {ListWrapper, Map} from '../src/facade/collection';\nimport {isBlank, normalizeBlank} from '../src/facade/lang';\nimport {BaseException} from '@angular/core';\nimport {PromiseCompleter, PromiseWrapper} from '../src/facade/async';\n\n/**\n * A mock implementation of {@link XHR} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nexport class MockXHR extends XHR {\n  private _expectations: _Expectation[] = [];\n  private _definitions = new Map<string, string>();\n  private _requests: _PendingRequest[] = [];\n\n  get(url: string): Promise<string> {\n    var request = new _PendingRequest(url);\n    this._requests.push(request);\n    return request.getPromise();\n  }\n\n  /**\n   * Add an expectation for the given URL. Incoming requests will be checked against\n   * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n   * can be used to check if any expectations have not yet been met.\n   *\n   * The response given will be returned if the expectation matches.\n   */\n  expect(url: string, response: string) {\n    var expectation = new _Expectation(url, response);\n    this._expectations.push(expectation);\n  }\n\n  /**\n   * Add a definition for the given URL to return the given response. Unlike expectations,\n   * definitions have no order and will satisfy any matching request at any time. Also\n   * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n   * to return an error.\n   */\n  when(url: string, response: string) { this._definitions.set(url, response); }\n\n  /**\n   * Process pending requests and verify there are no outstanding expectations. Also fails\n   * if no requests are pending.\n   */\n  flush() {\n    if (this._requests.length === 0) {\n      throw new BaseException('No pending requests to flush');\n    }\n\n    do {\n      this._processRequest(this._requests.shift());\n    } while (this._requests.length > 0);\n\n    this.verifyNoOutstandingExpectations();\n  }\n\n  /**\n   * Throw an exception if any expectations have not been satisfied.\n   */\n  verifyNoOutstandingExpectations() {\n    if (this._expectations.length === 0) return;\n\n    var urls = [];\n    for (var i = 0; i < this._expectations.length; i++) {\n      var expectation = this._expectations[i];\n      urls.push(expectation.url);\n    }\n\n    throw new BaseException(`Unsatisfied requests: ${urls.join(', ')}`);\n  }\n\n  private _processRequest(request: _PendingRequest) {\n    var url = request.url;\n\n    if (this._expectations.length > 0) {\n      var expectation = this._expectations[0];\n      if (expectation.url == url) {\n        ListWrapper.remove(this._expectations, expectation);\n        request.complete(expectation.response);\n        return;\n      }\n    }\n\n    if (this._definitions.has(url)) {\n      var response = this._definitions.get(url);\n      request.complete(normalizeBlank(response));\n      return;\n    }\n\n    throw new BaseException(`Unexpected request ${url}`);\n  }\n}\n\nclass _PendingRequest {\n  url: string;\n  completer: PromiseCompleter<string>;\n\n  constructor(url) {\n    this.url = url;\n    this.completer = PromiseWrapper.completer();\n  }\n\n  complete(response: string) {\n    if (isBlank(response)) {\n      this.completer.reject(`Failed to load ${this.url}`, null);\n    } else {\n      this.completer.resolve(response);\n    }\n  }\n\n  getPromise(): Promise<string> { return this.completer.promise; }\n}\n\nclass _Expectation {\n  url: string;\n  response: string;\n  constructor(url: string, response: string) {\n    this.url = url;\n    this.response = response;\n  }\n}\n"]}