{"version":3,"file":"animation_transition.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/animation_transition.ts"],"names":[],"mappings":"OAQO,EAAC,wBAAwB,EAAC,MAAM,8BAA8B;AAErE;IACE,6BACY,OAAwB,EAAU,UAAkB,EAAU,QAAgB,EAC9E,UAAkB;QADlB,YAAO,GAAP,OAAO,CAAiB;QAAU,eAAU,GAAV,UAAU,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAQ;QAC9E,eAAU,GAAV,UAAU,CAAQ;IAAG,CAAC;IAE1B,0CAAY,GAApB,UAAqB,SAAiB;QACpC,MAAM,CAAC,IAAI,wBAAwB,CAAC;YAClC,SAAS,EAAE,IAAI,CAAC,UAAU;YAC1B,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,SAAS,EAAE,IAAI,CAAC,UAAU;YAC1B,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;IACL,CAAC;IAED,qCAAO,GAAP,UAAQ,QAAkD;QACxD,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAM,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;IAC9C,CAAC;IAED,oCAAM,GAAN,UAAO,QAAkD;QACvD,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAM,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;IAC7C,CAAC;IACH,0BAAC;AAAD,CAAC,AAvBD,IAuBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationPlayer} from './animation_player';\nimport {AnimationTransitionEvent} from './animation_transition_event';\n\nexport class AnimationTransition {\n  constructor(\n      private _player: AnimationPlayer, private _fromState: string, private _toState: string,\n      private _totalTime: number) {}\n\n  private _createEvent(phaseName: string): AnimationTransitionEvent {\n    return new AnimationTransitionEvent({\n      fromState: this._fromState,\n      toState: this._toState,\n      totalTime: this._totalTime,\n      phaseName: phaseName\n    });\n  }\n\n  onStart(callback: (event: AnimationTransitionEvent) => any): void {\n    const event = this._createEvent('start');\n    this._player.onStart(() => callback(event));\n  }\n\n  onDone(callback: (event: AnimationTransitionEvent) => any): void {\n    const event = this._createEvent('done');\n    this._player.onDone(() => callback(event));\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}