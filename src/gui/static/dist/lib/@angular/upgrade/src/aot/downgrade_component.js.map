{"version":3,"file":"downgrade_component.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/aot/downgrade_component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAmB,wBAAwB,EAAiB,MAAM,eAAe;OAIjF,EAAC,SAAS,EAAE,MAAM,EAAE,YAAY,EAAC,MAAM,aAAa;OACpD,EAAC,yBAAyB,EAAC,MAAM,+BAA+B;AAEvE,IAAI,gBAAgB,CAAC,cAAc,GAAG,CAAC,CAAC;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4CG;AACH,mCAAmC,IAIlC;IACC,IAAM,gBAAgB,CAAC,QAAQ,GAAG,iBAAe,cAAc,EAAE,MAAG,CAAC;IACrE,IAAI,gBAAgB,CAAC,OAAO,GAAG,CAAC,CAAC;IAEjC,IAAM,gBAAgB,CAAC,gBAAgB,GACN,UACI,SAAmC,EACnC,MAA6B;QAEhE,MAAM,CAAC;YACL,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,IAAI,GAAG,YAAY;YAC5B,IAAI,EAAE,UAAC,KAAqB,EAAE,OAAiC,EAAE,KAA0B,EACpF,cAAwB,EAAE,UAAuC;gBAEtE,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;oBAC5B,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC/C,CAAC;gBAED,IAAM,gBAAgB,CAAC,wBAAwB,GAC3C,cAAc,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;gBACjD,IAAM,gBAAgB,CAAC,gBAAgB,GACnC,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAErE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACtB,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBACvE,CAAC;gBAED,IAAM,gBAAgB,CAAC,MAAM,GAAG,IAAI,yBAAyB,CACzD,QAAQ,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAC3E,gBAAgB,CAAC,CAAC;gBACtB,MAAM,CAAC,WAAW,EAAE,CAAC;gBACrB,MAAM,CAAC,eAAe,EAAE,CAAC;gBACzB,MAAM,CAAC,cAAc,EAAE,CAAC;gBACxB,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtB,MAAM,CAAC,eAAe,EAAE,CAAC;YAC3B,CAAC;SACF,CAAC;IACJ,CAAC,CAAC;IAEF,gBAAgB,CAAC,OAAO,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC/C,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nimport * as angular from '../angular_js';\n\nimport {$INJECTOR, $PARSE, INJECTOR_KEY} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\n\nlet /** @type {?} */ downgradeCount = 0;\n/**\n *  *\n  * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n  * library for hybrid upgrade apps that support AoT compilation*\n  * *\n  * Allows an Angular 2+ component to be used from Angular 1.\n  * *\n  * *\n  * Let's assume that you have an Angular 2+ component called `ng2Heroes` that needs\n  * to be made available in Angular 1 templates.\n  * *\n  * {@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n  * *\n  * We must create an Angular 1 [directive](https://docs.angularjs.org/guide/directive)\n  * that will make this Angular 2+ component available inside Angular 1 templates.\n  * The `downgradeComponent()` function returns a factory function that we\n  * can use to define the Angular 1 directive that wraps the \"downgraded\" component.\n  * *\n  * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n  * *\n  * In this example you can see that we must provide information about the component being\n  * \"downgraded\". This is because once the AoT compiler has run, all metadata about the\n  * component has been removed from the code, and so cannot be inferred.\n  * *\n  * We must do the following:\n  * * specify the Angular 2+ component class that is to be downgraded\n  * * specify all inputs and outputs that the Angular 1 component expects\n  * *\n  * *\n  * A helper function that returns a factory function to be used for registering an\n  * Angular 1 wrapper directive for \"downgrading\" an Angular 2+ component.\n  * *\n  * The parameter contains information about the Component that is being downgraded:\n  * *\n  * * `component: Type<any>`: The type of the Component that will be downgraded\n  * * `inputs: string[]`: A collection of strings that specify what inputs the component accepts.\n  * * `outputs: string[]`: A collection of strings that specify what outputs the component emits.\n  * *\n  * The `inputs` and `outputs` are strings that map the names of properties to camelCased\n  * attribute names. They are of the form `\"prop: attr\"`; or simply `\"propAndAttr\" where the\n  * property and attribute have the same identifier.\n  * *\n * @param {?} info\n * @return {?}\n */\nexport function downgradeComponent(info: /* ComponentInfo */ {\n  component: Type<any>;\n  inputs?: string[];\n  outputs?: string[];\n}): any /* angular.IInjectable */ {\n  const /** @type {?} */ idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let /** @type {?} */ idCount = 0;\n\n  const /** @type {?} */ directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      require: '?^' + INJECTOR_KEY,\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             parentInjector: Injector, transclude: angular.ITranscludeFunction) => {\n\n        if (parentInjector === null) {\n          parentInjector = $injector.get(INJECTOR_KEY);\n        }\n\n        const /** @type {?} */ componentFactoryResolver: ComponentFactoryResolver =\n            parentInjector.get(ComponentFactoryResolver);\n        const /** @type {?} */ componentFactory: ComponentFactory<any> =\n            componentFactoryResolver.resolveComponentFactory(info.component);\n\n        if (!componentFactory) {\n          throw new Error('Expecting ComponentFactory for: ' + info.component);\n        }\n\n        const /** @type {?} */ facade = new DowngradeComponentAdapter(\n            idPrefix + (idCount++), info, element, attrs, scope, parentInjector, $parse,\n            componentFactory);\n        facade.setupInputs();\n        facade.createComponent();\n        facade.projectContent();\n        facade.setupOutputs();\n        facade.registerCleanup();\n      }\n    };\n  };\n\n  directiveFactory.$inject = [$INJECTOR, $PARSE];\n  return directiveFactory;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}