{"version":3,"file":"di.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/metadata/di.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {stringify, isString, Type} from '../../src/facade/lang';\nimport {DependencyMetadata} from '../di/metadata';\nimport {resolveForwardRef} from '../di/forward_ref';\n\n/**\n * Specifies that a constant attribute value should be injected.\n *\n * The directive can inject constant string literals of host element attributes.\n *\n * ### Example\n *\n * Suppose we have an `<input>` element and want to know its `type`.\n *\n * ```html\n * <input type=\"text\">\n * ```\n *\n * A decorator can inject string literal `text` like so:\n *\n * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n * @ts2dart_const\n */\nexport class AttributeMetadata extends DependencyMetadata {\n  constructor(public attributeName: string) { super(); }\n\n  get token(): AttributeMetadata {\n    // Normally one would default a token to a type of an injected value but here\n    // the type of a variable is \"string\" and we can't use primitive type as a return value\n    // so we use instance of Attribute instead. This doesn't matter much in practice as arguments\n    // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into\n    // account.\n    return this;\n  }\n  toString(): string { return `@Attribute(${stringify(this.attributeName)})`; }\n}\n\n/**\n * Declares an injectable parameter to be a live list of directives or variable\n * bindings from the content children of a directive.\n *\n * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))\n *\n * Assume that `<tabs>` component would like to get a list its children `<pane>`\n * components as shown in this example:\n *\n * ```html\n * <tabs>\n *   <pane title=\"Overview\">...</pane>\n *   <pane *ngFor=\"let o of objects\" [title]=\"o.title\">{{o.text}}</pane>\n * </tabs>\n * ```\n *\n * The preferred solution is to query for `Pane` directives using this decorator.\n *\n * ```javascript\n * @Component({\n *   selector: 'pane',\n *   inputs: ['title']\n * })\n * class Pane {\n *   title:string;\n * }\n *\n * @Component({\n *  selector: 'tabs',\n *  template: `\n *    <ul>\n *      <li *ngFor=\"let pane of panes\">{{pane.title}}</li>\n *    </ul>\n *    <ng-content></ng-content>\n *  `\n * })\n * class Tabs {\n *   panes: QueryList<Pane>;\n *   constructor(@Query(Pane) panes:QueryList<Pane>) {\n  *    this.panes = panes;\n  *  }\n * }\n * ```\n *\n * A query can look for variable bindings by passing in a string with desired binding symbol.\n *\n * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))\n * ```html\n * <seeker>\n *   <div #findme>...</div>\n * </seeker>\n *\n * @Component({ selector: 'seeker' })\n * class Seeker {\n *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}\n * }\n * ```\n *\n * In this case the object that is injected depend on the type of the variable\n * binding. It can be an ElementRef, a directive or a component.\n *\n * Passing in a comma separated list of variable bindings will query for all of them.\n *\n * ```html\n * <seeker>\n *   <div #find-me>...</div>\n *   <div #find-me-too>...</div>\n * </seeker>\n *\n *  @Component({\n *   selector: 'seeker'\n * })\n * class Seeker {\n *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}\n * }\n * ```\n *\n * Configure whether query looks for direct children or all descendants\n * of the querying element, by using the `descendants` parameter.\n * It is set to `false` by default.\n *\n * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))\n * ```html\n * <container #first>\n *   <item>a</item>\n *   <item>b</item>\n *   <container #second>\n *     <item>c</item>\n *   </container>\n * </container>\n * ```\n *\n * When querying for items, the first container will see only `a` and `b` by default,\n * but with `Query(TextDirective, {descendants: true})` it will see `c` too.\n *\n * The queried directives are kept in a depth-first pre-order with respect to their\n * positions in the DOM.\n *\n * Query does not look deep into any subcomponent views.\n *\n * Query is updated as part of the change-detection cycle. Since change detection\n * happens after construction of a directive, QueryList will always be empty when observed in the\n * constructor.\n *\n * The injected object is an unmodifiable live list.\n * See {@link QueryList} for more details.\n * @ts2dart_const\n */\nexport class QueryMetadata extends DependencyMetadata {\n  /**\n   * whether we want to query only direct children (false) or all\n   * children (true).\n   */\n  descendants: boolean;\n  first: boolean;\n  /**\n   * The DI token to read from an element that matches the selector.\n   */\n  read: any;\n\n  constructor(private _selector: Type | string,\n              {descendants = false, first = false,\n               read = null}: {descendants?: boolean, first?: boolean, read?: any} = {}) {\n    super();\n    this.descendants = descendants;\n    this.first = first;\n    this.read = read;\n  }\n\n  /**\n   * always `false` to differentiate it with {@link ViewQueryMetadata}.\n   */\n  get isViewQuery(): boolean { return false; }\n\n  /**\n   * what this is querying for.\n   */\n  get selector() { return resolveForwardRef(this._selector); }\n\n  /**\n   * whether this is querying for a variable binding or a directive.\n   */\n  get isVarBindingQuery(): boolean { return isString(this.selector); }\n\n  /**\n   * returns a list of variable bindings this is querying for.\n   * Only applicable if this is a variable bindings query.\n   */\n  get varBindings(): string[] { return this.selector.split(','); }\n\n  toString(): string { return `@Query(${stringify(this.selector)})`; }\n}\n\n// TODO: add an example after ContentChildren and ViewChildren are in master\n/**\n * Configures a content query.\n *\n * Content queries are set before the `ngAfterContentInit` callback is called.\n *\n * ### Example\n *\n * ```\n * @Directive({\n *   selector: 'someDir'\n * })\n * class SomeDir {\n *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;\n *\n *   ngAfterContentInit() {\n *     // contentChildren is set\n *   }\n * }\n * ```\n * @ts2dart_const\n */\nexport class ContentChildrenMetadata extends QueryMetadata {\n  constructor(_selector: Type | string,\n              {descendants = false, read = null}: {descendants?: boolean, read?: any} = {}) {\n    super(_selector, {descendants: descendants, read: read});\n  }\n}\n\n// TODO: add an example after ContentChild and ViewChild are in master\n/**\n * Configures a content query.\n *\n * Content queries are set before the `ngAfterContentInit` callback is called.\n *\n * ### Example\n *\n * ```\n * @Directive({\n *   selector: 'someDir'\n * })\n * class SomeDir {\n *   @ContentChild(ChildDirective) contentChild;\n *\n *   ngAfterContentInit() {\n *     // contentChild is set\n *   }\n * }\n * ```\n * @ts2dart_const\n */\nexport class ContentChildMetadata extends QueryMetadata {\n  constructor(_selector: Type | string, {read = null}: {read?: any} = {}) {\n    super(_selector, {descendants: true, first: true, read: read});\n  }\n}\n\n/**\n * Similar to {@link QueryMetadata}, but querying the component view, instead of\n * the content children.\n *\n * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))\n *\n * ```javascript\n * @Component({\n *   ...,\n *   template: `\n *     <item> a </item>\n *     <item> b </item>\n *     <item> c </item>\n *   `\n * })\n * class MyComponent {\n *   shown: boolean;\n *\n *   constructor(private @ViewQuery(Item) items:QueryList<Item>) {\n *     items.changes.subscribe(() => console.log(items.length));\n *   }\n * }\n * ```\n *\n * Supports the same querying parameters as {@link QueryMetadata}, except\n * `descendants`. This always queries the whole view.\n *\n * As `shown` is flipped between true and false, items will contain zero of one\n * items.\n *\n * Specifies that a {@link QueryList} should be injected.\n *\n * The injected object is an iterable and observable live list.\n * See {@link QueryList} for more details.\n * @ts2dart_const\n */\nexport class ViewQueryMetadata extends QueryMetadata {\n  constructor(_selector: Type | string,\n              {descendants = false, first = false,\n               read = null}: {descendants?: boolean, first?: boolean, read?: any} = {}) {\n    super(_selector, {descendants: descendants, first: first, read: read});\n  }\n\n  /**\n   * always `true` to differentiate it with {@link QueryMetadata}.\n   */\n  get isViewQuery() { return true; }\n  toString(): string { return `@ViewQuery(${stringify(this.selector)})`; }\n}\n\n/**\n * Declares a list of child element references.\n *\n * Angular automatically updates the list when the DOM is updated.\n *\n * `ViewChildren` takes an argument to select elements.\n *\n * - If the argument is a type, directives or components with the type will be bound.\n *\n * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.\n * For each selector, an element containing the matching template variable (e.g. `#child`) will be\n * bound.\n *\n * View children are set before the `ngAfterViewInit` callback is called.\n *\n * ### Example\n *\n * With type selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: `\n *     <child-cmp></child-cmp>\n *     <child-cmp></child-cmp>\n *     <child-cmp></child-cmp>\n *   `,\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;\n *\n *   ngAfterViewInit() {\n *     // children are set\n *     this.children.toArray().forEach((child)=>child.doSomething());\n *   }\n * }\n * ```\n *\n * With string selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: `\n *     <child-cmp #child1></child-cmp>\n *     <child-cmp #child2></child-cmp>\n *     <child-cmp #child3></child-cmp>\n *   `,\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;\n *\n *   ngAfterViewInit() {\n *     // children are set\n *     this.children.toArray().forEach((child)=>child.doSomething());\n *   }\n * }\n * ```\n * @ts2dart_const\n */\nexport class ViewChildrenMetadata extends ViewQueryMetadata {\n  constructor(_selector: Type | string, {read = null}: {read?: any} = {}) {\n    super(_selector, {descendants: true, read: read});\n  }\n}\n\n/**\n *\n * Declares a reference of child element.\n *\n * `ViewChildren` takes an argument to select elements.\n *\n * - If the argument is a type, a directive or a component with the type will be bound.\n *\n If the argument is a string, the string is interpreted as a selector. An element containing the\n matching template variable (e.g. `#child`) will be bound.\n *\n * In either case, `@ViewChild()` assigns the first (looking from above) element if there are\n multiple matches.\n *\n * View child is set before the `ngAfterViewInit` callback is called.\n *\n * ### Example\n *\n * With type selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: '<child-cmp></child-cmp>',\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChild(ChildCmp) child:ChildCmp;\n *\n *   ngAfterViewInit() {\n *     // child is set\n *     this.child.doSomething();\n *   }\n * }\n * ```\n *\n * With string selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: '<child-cmp #child></child-cmp>',\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChild('child') child:ChildCmp;\n *\n *   ngAfterViewInit() {\n *     // child is set\n *     this.child.doSomething();\n *   }\n * }\n * ```\n * @ts2dart_const\n */\nexport class ViewChildMetadata extends ViewQueryMetadata {\n  constructor(_selector: Type | string, {read = null}: {read?: any} = {}) {\n    super(_selector, {descendants: true, first: true, read: read});\n  }\n}\n"]}