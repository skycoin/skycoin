{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../modules/@angular/http/http.ts"],"names":[],"mappings":";AAIE;;;;;EAKC;AACH,qBAAsB,eAAe,CAAC,CAAA;AACtC,qBAA0B,YAAY,CAAC,CAAA;AACvC,4BAAwC,4BAA4B,CAAC,CAAA;AACrE,8BAA2D,8BAA8B,CAAC,CAAA;AAC1F,4BAAyB,4BAA4B,CAAC,CAAA;AACtD,8BAA2B,8BAA8B,CAAC,CAAA;AAC1D,qCAAiD,4BAA4B,CAAC,CAAA;AAE9E,sCAAmD,6BAA6B,CAAC,CAAA;AACjF,+BAAsB,sBAAsB,CAAC;AAArC,2CAAqC;AAC7C,gCAAuB,uBAAuB,CAAC;AAAvC,8CAAuC;AAE/C,2BAKO,kBAAkB,CAAC;AAFxB,6CAAU;AACV,2DACwB;AAE1B,4BAAyB,4BAA4B,CAAC;AAA9C,8CAA8C;AACtD,qCAAiD,4BAA4B,CAAC;AAAtE,uEAAkB;AAAE,+DAAkD;AAC9E,sCAAmD,6BAA6B,CAAC;AAAzE,0EAAmB;AAAE,kEAAoD;AACjF,4BAAwC,4BAA4B,CAAC;AAA7D,8CAAU;AAAE,oDAAiD;AACrE,8BAA4C,8BAA8B,CAAC;AAAnE,oDAAY;AAAE,0DAAqD;AAC3E,qBAA0B,YAAY,CAAC;AAA/B,2BAAI;AAAE,6BAAyB;AAEvC,wBAAsB,eAAe,CAAC;AAA9B,oCAA8B;AAEtC,sBAAsD,aAAa,CAAC;AAA5D,4CAAY;AAAE,wCAAU;AAAE,8CAAkC;AACpE,kCAA8B,yBAAyB,CAAC;AAAhD,8DAAgD;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoHG;AACU,sBAAc,GAAU;IACnC,kEAAkE;IAClE,wDAAwD;IACxD,cAAO,CAAC,WAAI,EACJ;QACE,UAAU,EAAE,UAAC,UAAsB,EAAE,cAA8B;YACnD,OAAA,IAAI,WAAI,CAAC,UAAU,EAAE,cAAc,CAAC;QAApC,CAAoC;QACpD,IAAI,EAAE,CAAC,wBAAU,EAAE,qCAAc,CAAC;KACnC,CAAC;IACV,wBAAU;IACV,cAAO,CAAC,qCAAc,EAAE,EAAC,QAAQ,EAAE,yCAAkB,EAAC,CAAC;IACvD,cAAO,CAAC,uCAAe,EAAE,EAAC,QAAQ,EAAE,2CAAmB,EAAC,CAAC;IACzD,wBAAU;CACX,CAAC;AAEF;;;;GAIG;AACU,qBAAa,GAAG,sBAAc,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0GG;AACU,uBAAe,GAAU;IACpC,kEAAkE;IAClE,wDAAwD;IACxD,cAAO,CAAC,YAAK,EACL;QACE,UAAU,EAAE,UAAC,YAA0B,EAAE,cAA8B;YACvD,OAAA,IAAI,YAAK,CAAC,YAAY,EAAE,cAAc,CAAC;QAAvC,CAAuC;QACvD,IAAI,EAAE,CAAC,4BAAY,EAAE,qCAAc,CAAC;KACrC,CAAC;IACV,4BAAY;IACZ,cAAO,CAAC,qCAAc,EAAE,EAAC,QAAQ,EAAE,yCAAkB,EAAC,CAAC;IACvD,cAAO,CAAC,uCAAe,EAAE,EAAC,QAAQ,EAAE,2CAAmB,EAAC,CAAC;IACzD,cAAO,CAAC,4BAAY,EAAE,EAAC,QAAQ,EAAE,6BAAa,EAAC,CAAC;CACjD,CAAC;AAEF;;;;GAIG;AACU,qBAAa,GAAG,uBAAe,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  /**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\nimport {provide} from '@angular/core';\nimport {Http, Jsonp} from './src/http';\nimport {XHRBackend, XHRConnection} from './src/backends/xhr_backend';\nimport {JSONPBackend, JSONPBackend_, JSONPConnection} from './src/backends/jsonp_backend';\nimport {BrowserXhr} from './src/backends/browser_xhr';\nimport {BrowserJsonp} from './src/backends/browser_jsonp';\nimport {BaseRequestOptions, RequestOptions} from './src/base_request_options';\nimport {ConnectionBackend} from './src/interfaces';\nimport {BaseResponseOptions, ResponseOptions} from './src/base_response_options';\nexport {Request} from './src/static_request';\nexport {Response} from './src/static_response';\n\nexport {\n  RequestOptionsArgs,\n  ResponseOptionsArgs,\n  Connection,\n  ConnectionBackend\n} from './src/interfaces';\n\nexport {BrowserXhr} from './src/backends/browser_xhr';\nexport {BaseRequestOptions, RequestOptions} from './src/base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './src/base_response_options';\nexport {XHRBackend, XHRConnection} from './src/backends/xhr_backend';\nexport {JSONPBackend, JSONPConnection} from './src/backends/jsonp_backend';\nexport {Http, Jsonp} from './src/http';\n\nexport {Headers} from './src/headers';\n\nexport {ResponseType, ReadyState, RequestMethod} from './src/enums';\nexport {URLSearchParams} from './src/url_search_params';\n\n/**\n * Provides a basic set of injectables to use the {@link Http} service in any application.\n *\n * The `HTTP_PROVIDERS` should be included either in a component's injector,\n * or in the root injector when bootstrapping an application.\n *\n * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))\n *\n * ```\n * import {Component} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {NgFor} from '@angular/common';\n * import {HTTP_PROVIDERS, Http} from '@angular/http';\n *\n * @Component({\n *   selector: 'app',\n *   providers: [HTTP_PROVIDERS],\n *   template: `\n *     <div>\n *       <h1>People</h1>\n *       <ul>\n *         <li *ngFor=\"let person of people\">\n *           {{person.name}}\n *         </li>\n *       </ul>\n *     </div>\n *   `,\n *   directives: [NgFor]\n * })\n * export class App {\n *   people: Object[];\n *   constructor(http:Http) {\n *     http.get('people.json').subscribe(res => {\n *       this.people = res.json();\n *     });\n *   }\n *   active:boolean = false;\n *   toggleActiveState() {\n *     this.active = !this.active;\n *   }\n * }\n *\n * bootstrap(App)\n *   .catch(err => console.error(err));\n * ```\n *\n * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.\n * However, other providers required by `Http` are included,\n * which may be beneficial to override in certain cases.\n *\n * The providers included in `HTTP_PROVIDERS` include:\n *  * {@link Http}\n *  * {@link XHRBackend}\n *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances\n *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class\n *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class\n *\n * There may be cases where it makes sense to extend the base request options,\n * such as to add a search string to be appended to all URLs.\n * To accomplish this, a new provider for {@link RequestOptions} should\n * be added in the same injector as `HTTP_PROVIDERS`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])\n *   .catch(err => console.error(err));\n * ```\n *\n * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}\n * provider should be bound to {@link MockBackend}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, Response, XHRBackend} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n *\n * var people = [{name: 'Jeff'}, {name: 'Tobias'}];\n *\n * var injector = Injector.resolveAndCreate([\n *   HTTP_PROVIDERS,\n *   MockBackend,\n *   provide(XHRBackend, {useExisting: MockBackend})\n * ]);\n * var http = injector.get(Http);\n * var backend = injector.get(MockBackend);\n *\n * // Listen for any new requests\n * backend.connections.observer({\n *   next: connection => {\n *     var response = new Response({body: people});\n *     setTimeout(() => {\n *       // Send a response to the request\n *       connection.mockRespond(response);\n *     });\n *   }\n * });\n *\n * http.get('people.json').observer({\n *   next: res => {\n *     // Response came from mock backend\n *     console.log('first person', res.json()[0].name);\n *   }\n * });\n * ```\n */\nexport const HTTP_PROVIDERS: any[] = [\n  // TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  provide(Http,\n          {\n            useFactory: (xhrBackend: XHRBackend, requestOptions: RequestOptions) =>\n                            new Http(xhrBackend, requestOptions),\n            deps: [XHRBackend, RequestOptions]\n          }),\n  BrowserXhr,\n  provide(RequestOptions, {useClass: BaseRequestOptions}),\n  provide(ResponseOptions, {useClass: BaseResponseOptions}),\n  XHRBackend\n];\n\n/**\n * See {@link HTTP_PROVIDERS} instead.\n *\n * @deprecated\n */\nexport const HTTP_BINDINGS = HTTP_PROVIDERS;\n\n/**\n * Provides a basic set of providers to use the {@link Jsonp} service in any application.\n *\n * The `JSONP_PROVIDERS` should be included either in a component's injector,\n * or in the root injector when bootstrapping an application.\n *\n * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))\n *\n * ```\n * import {Component} from '@angular/core';\n * import {NgFor} from '@angular/common';\n * import {JSONP_PROVIDERS, Jsonp} from '@angular/http';\n *\n * @Component({\n *   selector: 'app',\n *   providers: [JSONP_PROVIDERS],\n *   template: `\n *     <div>\n *       <h1>People</h1>\n *       <ul>\n *         <li *ngFor=\"let person of people\">\n *           {{person.name}}\n *         </li>\n *       </ul>\n *     </div>\n *   `,\n *   directives: [NgFor]\n * })\n * export class App {\n *   people: Array<Object>;\n *   constructor(jsonp:Jsonp) {\n *     jsonp.request('people.json').subscribe(res => {\n *       this.people = res.json();\n *     })\n *   }\n * }\n * ```\n *\n * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.\n * However, other providers required by `Jsonp` are included,\n * which may be beneficial to override in certain cases.\n *\n * The providers included in `JSONP_PROVIDERS` include:\n *  * {@link Jsonp}\n *  * {@link JSONPBackend}\n *  * `BrowserJsonp` - Private factory\n *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class\n *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class\n *\n * There may be cases where it makes sense to extend the base request options,\n * such as to add a search string to be appended to all URLs.\n * To accomplish this, a new provider for {@link RequestOptions} should\n * be added in the same injector as `JSONP_PROVIDERS`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * bootstrap(App, [JSONP_PROVIDERS, provide(RequestOptions, {useClass: MyOptions})])\n *   .catch(err => console.error(err));\n * ```\n *\n * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}\n * provider should be bound to {@link MockBackend}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))\n *\n * ```\n * import {provide, Injector} from '@angular/core';\n * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n *\n * var people = [{name: 'Jeff'}, {name: 'Tobias'}];\n * var injector = Injector.resolveAndCreate([\n *   JSONP_PROVIDERS,\n *   MockBackend,\n *   provide(JSONPBackend, {useExisting: MockBackend})\n * ]);\n * var jsonp = injector.get(Jsonp);\n * var backend = injector.get(MockBackend);\n *\n * // Listen for any new requests\n * backend.connections.observer({\n *   next: connection => {\n *     var response = new Response({body: people});\n *     setTimeout(() => {\n *       // Send a response to the request\n *       connection.mockRespond(response);\n *     });\n *   }\n * });\n\n * jsonp.get('people.json').observer({\n *   next: res => {\n *     // Response came from mock backend\n *     console.log('first person', res.json()[0].name);\n *   }\n * });\n * ```\n */\nexport const JSONP_PROVIDERS: any[] = [\n  // TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  provide(Jsonp,\n          {\n            useFactory: (jsonpBackend: JSONPBackend, requestOptions: RequestOptions) =>\n                            new Jsonp(jsonpBackend, requestOptions),\n            deps: [JSONPBackend, RequestOptions]\n          }),\n  BrowserJsonp,\n  provide(RequestOptions, {useClass: BaseRequestOptions}),\n  provide(ResponseOptions, {useClass: BaseResponseOptions}),\n  provide(JSONPBackend, {useClass: JSONPBackend_})\n];\n\n/**\n * See {@link JSONP_PROVIDERS} instead.\n *\n * @deprecated\n */\nexport const JSON_BINDINGS = JSONP_PROVIDERS;\n"]}