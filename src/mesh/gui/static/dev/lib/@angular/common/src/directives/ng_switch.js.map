{"version":3,"file":"ng_switch.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/directives/ng_switch.ts"],"names":[],"mappings":";AAIE,qBAA6D,eAAe,CAAC,CAAA;AAC/E,qBAAiD,uBAAuB,CAAC,CAAA;AACzE,2BAA+B,6BAA6B,CAAC,CAAA;AAE7D,IAAM,aAAa,GAAsB,IAAI,MAAM,EAAE,CAAC;AAEtD;IACE,oBAAoB,iBAAmC,EACnC,YAAiC;QADjC,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,iBAAY,GAAZ,YAAY,CAAqB;IAAG,CAAC;IAEzD,2BAAM,GAAN,cAAiB,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAEhF,4BAAO,GAAP,cAAkB,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACrD,iBAAC;AAAD,CAAC,AAPD,IAOC;AAPY,kBAAU,aAOtB,CAAA;AACD;IAAA;QAEU,gBAAW,GAAY,KAAK,CAAC;QAC7B,gBAAW,GAAG,IAAI,gBAAG,EAAqB,CAAC;QAC3C,iBAAY,GAAiB,EAAE,CAAC;IAsF1C,CAAC;IApFC,sBAAI,8BAAQ;aAAZ,UAAa,KAAU;YACrB,4CAA4C;YAC5C,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE5B,yEAAyE;YACzE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACxC,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,KAAK,GAAG,qBAAc,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YAC9D,CAAC;YACD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAE3B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,CAAC;;;OAAA;IAED,gBAAgB;IAChB,sCAAmB,GAAnB,UAAoB,OAAY,EAAE,OAAY,EAAE,IAAgB;QAC9D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAElC,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,wBAAW,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACzC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC9B,CAAC;YACD,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QAED,gEAAgE;QAChE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,uCAAoB,GAApB;QACE,IAAI,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;QACzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACjD,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,gBAAgB;IAChB,iCAAc,GAAd,UAAe,KAAmB;QAChC,sDAAsD;QACtD,EAAE,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YACpB,CAAC;YACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,gCAAa,GAAb,UAAc,KAAU,EAAE,IAAgB;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,KAAK,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACrC,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;IAED,gBAAgB;IAChB,kCAAe,GAAf,UAAgB,KAAU,EAAE,IAAgB;QAC1C,4DAA4D;QAC5D,EAAE,CAAC,CAAC,KAAK,KAAK,aAAa,CAAC;YAAC,MAAM,CAAC;QACpC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,wBAAW,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IACI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,UAAU,CAAC,EAAC,EAAG,EAAE;KAC5E,CAAC;IACF,eAAC;AAAD,CAAC,AA1FD,IA0FC;AA1FY,gBAAQ,WA0FpB,CAAA;AACD;IAQE,sBAAY,aAA+B,EAAE,WAAgC,EAAE,QAAkB;QAPjG,sEAAsE;QACtE,gBAAgB;QAChB,WAAM,GAAQ,aAAa,CAAC;QAM1B,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAC1D,CAAC;IAED,sBAAI,sCAAY;aAAhB,UAAiB,KAAU;YACzB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IACI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,gBAAgB,EAAE,MAAM,EAAE,CAAC,cAAc,CAAC,EAAC,EAAG,EAAE;KACpF,CAAC;IACK,2BAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,uBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,kBAAW,GAAG;QACrB,EAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAI,EAAE,EAAG,EAAC;KAC/C,CAAC;IACF,mBAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,oBAAY,eAyBxB,CAAA;AACD;IACE,yBAAY,aAA+B,EAAE,WAAgC,EAAE,OAAiB;QAC9F,OAAO,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC;IACnF,CAAC;IACI,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,mBAAmB,EAAC,EAAG,EAAE;KAC7D,CAAC;IACK,8BAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,uBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,kBAAW,GAAG;QACrB,EAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,WAAI,EAAE,EAAG,EAAC;KAC/C,CAAC;IACF,sBAAC;AAAD,CAAC,AAZD,IAYC;AAZY,uBAAe,kBAY3B,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Directive, Host, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {isPresent, isBlank, normalizeBlank} from '../../src/facade/lang';\nimport {ListWrapper, Map} from '../../src/facade/collection';\n\nconst _WHEN_DEFAULT = /*@ts2dart_const*/ new Object();\n\nexport class SwitchView {\n  constructor(private _viewContainerRef: ViewContainerRef,\n              private _templateRef: TemplateRef<Object>) {}\n\n  create(): void { this._viewContainerRef.createEmbeddedView(this._templateRef); }\n\n  destroy(): void { this._viewContainerRef.clear(); }\n}\nexport class NgSwitch {\n  private _switchValue: any;\n  private _useDefault: boolean = false;\n  private _valueViews = new Map<any, SwitchView[]>();\n  private _activeViews: SwitchView[] = [];\n\n  set ngSwitch(value: any) {\n    // Empty the currently active ViewContainers\n    this._emptyAllActiveViews();\n\n    // Add the ViewContainers matching the value (with a fallback to default)\n    this._useDefault = false;\n    var views = this._valueViews.get(value);\n    if (isBlank(views)) {\n      this._useDefault = true;\n      views = normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));\n    }\n    this._activateViews(views);\n\n    this._switchValue = value;\n  }\n\n  /** @internal */\n  _onWhenValueChanged(oldWhen: any, newWhen: any, view: SwitchView): void {\n    this._deregisterView(oldWhen, view);\n    this._registerView(newWhen, view);\n\n    if (oldWhen === this._switchValue) {\n      view.destroy();\n      ListWrapper.remove(this._activeViews, view);\n    } else if (newWhen === this._switchValue) {\n      if (this._useDefault) {\n        this._useDefault = false;\n        this._emptyAllActiveViews();\n      }\n      view.create();\n      this._activeViews.push(view);\n    }\n\n    // Switch to default when there is no more active ViewContainers\n    if (this._activeViews.length === 0 && !this._useDefault) {\n      this._useDefault = true;\n      this._activateViews(this._valueViews.get(_WHEN_DEFAULT));\n    }\n  }\n\n  /** @internal */\n  _emptyAllActiveViews(): void {\n    var activeContainers = this._activeViews;\n    for (var i = 0; i < activeContainers.length; i++) {\n      activeContainers[i].destroy();\n    }\n    this._activeViews = [];\n  }\n\n  /** @internal */\n  _activateViews(views: SwitchView[]): void {\n    // TODO(vicb): assert(this._activeViews.length === 0);\n    if (isPresent(views)) {\n      for (var i = 0; i < views.length; i++) {\n        views[i].create();\n      }\n      this._activeViews = views;\n    }\n  }\n\n  /** @internal */\n  _registerView(value: any, view: SwitchView): void {\n    var views = this._valueViews.get(value);\n    if (isBlank(views)) {\n      views = [];\n      this._valueViews.set(value, views);\n    }\n    views.push(view);\n  }\n\n  /** @internal */\n  _deregisterView(value: any, view: SwitchView): void {\n    // `_WHEN_DEFAULT` is used a marker for non-registered whens\n    if (value === _WHEN_DEFAULT) return;\n    var views = this._valueViews.get(value);\n    if (views.length == 1) {\n      this._valueViews.delete(value);\n    } else {\n      ListWrapper.remove(views, view);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]', inputs: ['ngSwitch']}, ] },\n];\n}\nexport class NgSwitchWhen {\n  // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value\n  /** @internal */\n  _value: any = _WHEN_DEFAULT;\n  /** @internal */\n  _view: SwitchView;\n  private _switch: NgSwitch;\n\n  constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, ngSwitch: NgSwitch) {\n    this._switch = ngSwitch;\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  set ngSwitchWhen(value: any) {\n    this._switch._onWhenValueChanged(this._value, value, this._view);\n    this._value = value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchWhen]', inputs: ['ngSwitchWhen']}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\nexport class NgSwitchDefault {\n  constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>, sswitch: NgSwitch) {\n    sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n"]}