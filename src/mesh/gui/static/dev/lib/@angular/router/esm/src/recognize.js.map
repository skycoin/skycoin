{"version":3,"file":"recognize.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/recognize.ts"],"names":[],"mappings":"OAIS,EAAC,YAAY,EAAoB,QAAQ,EAAE,QAAQ,EAAW,SAAS,EAAC,MAAM,YAAY;OAC5F,EAAC,cAAc,EAAgB,MAAM,qBAAqB;OAC1D,EAAO,OAAO,EAAE,SAAS,EAAE,SAAS,EAAC,MAAM,eAAe;OAC1D,EAAC,WAAW,EAAE,gBAAgB,EAAC,MAAM,qBAAqB;OAC1D,EAAC,cAAc,EAAC,MAAM,kBAAkB;OACxC,EAAC,aAAa,EAAC,MAAM,eAAe;OAEpC,EAAC,mBAAmB,EAAC,MAAM,aAAa;OACxC,EAAC,SAAS,EAAC,MAAM,eAAe;AAEvC,iEAAiE;AACjE,0BAA0B,iBAAoC,EAAE,IAAU,EAChD,GAAY;IACpC,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACjF,MAAM,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9F,CAAC;AAED,oBAAoB,iBAAoC,EAAE,UAAgB,EACtD,GAAyB;IAC3C,IAAI,QAAQ,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAE,uCAAuC;IAClF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,aAAa,CACnB,cAAc,SAAS,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;IAChF,CAAC;IAED,IAAI,KAAK,CAAC;IACV,IAAI,CAAC;QACH,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAChC,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,IAAI,IAAI,GAAG,iBAAiB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IACvD,IAAI,GAAG,GACH,cAAc,CAAC,iBAAiB,EAAE,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC9F,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACnE,CAAC;AAED,wBAAwB,iBAAoC,EAAE,UAAgB,EACtD,IAA4B;IAClD,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7E,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAClE,CAAC;AAED,2BAA2B,iBAAoC,EACpC,OAAqB;IAC9C,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC;SACvD,IAAI,CAAC,OAAO;QACX,IAAI,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAClD,mBAAmB;YACnB,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAE1D,IAAI,OAAO,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,UAAU,EAAE,SAAS,EAC1D,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,cAAc,CAAC,iBAAiB,EAAE,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC;iBAC3E,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,QAAQ,CAAe,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,OAAO,CAAC,SAAS,CAAC;iBAC3D,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,QAAQ,CAAe,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC;IACH,CAAC,CAAC,CAAC;AACT,CAAC;AAED,6BAA6B,iBAAoC,EACpC,UAAgB;IAC3C,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC;SAChD,IAAI,CAAC,OAAO;QACX,IAAI,QAAQ,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,IAAI,CAAC,GAAW,QAAQ,CAAC,MAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC;QAC5E,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;iBACxD,IAAI,CAAC,QAAQ;gBACZ,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;qBACpD,IAAI,CAAC,OAAO;oBACX,IAAI,OAAO,GACP,IAAI,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;oBAC3E,MAAM,CAAC,CAAC,IAAI,QAAQ,CAAe,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACzD,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,CAAC;QACT,CAAC;IACH,CAAC,CAAC,CAAC;AACT,CAAC;AAED,gBAAgB,QAAwB,EAAE,GAAyB;IACjE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9B,IAAI,cAAc,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,cAAc,CAAC;QACxB,CAAC;IACH,CAAC;IACD,IAAI,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzE,MAAM,IAAI,aAAa,CACnB,8CAA8C,GAAG,CAAC,KAAK,yBAAyB,eAAe,IAAI,CAAC,CAAC;AAC3G,CAAC;AAED,yBAAyB,KAAoB,EAAE,GAAyB;IACtE,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;IAE7E,EAAE,CAAC,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAC1B,IAAI,mBAAmB,GAAG,EAAE,CAAC;IAE7B,IAAI,UAAU,GAAyB,IAAI,CAAC;IAC5C,IAAI,WAAW,GAAyB,IAAI,CAAC;IAE7C,IAAI,OAAO,GAAG,GAAG,CAAC;IAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QACtC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAElC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,IAAI,aAAa,GAAG,CAAC,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3C,IAAI,YAAY,GAAG,CAAC,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1C,IAAI,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAEnC,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAC3D,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,WAAW,GAAG,OAAO,CAAC;QACxB,CAAC;QACD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,UAAU,GAAG,OAAO,CAAC;QACvB,CAAC;QAED,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC;QAC3D,CAAC;QAED,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAExC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC;IACrC,IAAI,UAAU,GACe,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC;IACzE,IAAI,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAE/E,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,SAAS,EAAE,mBAAmB,EAAE,UAAU,EAAE,WAAW,CAAC,QAAQ,EACtE,cAAc,CAAC,CAAC;AAC1C,CAAC;AAED,oCAAoC,KAA+B;IACjE,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,KAAK,CAAC,OAAO,CAAC,CAAC;QACb,IAAI,yBAAyB,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,GAAG,yBAAyB,CAAC,sBAAsB,CAAC;YACzD,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;YACvC,MAAM,IAAI,aAAa,CAAC,mDAAmD,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/F,CAAC;QACD,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IAClC,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAED;IACE,YAAmB,SAAe,EAAS,mBAAiC,EACzD,UAAmC,EACnC,WAAmC,EAAS,GAA2B;QAFvE,cAAS,GAAT,SAAS,CAAM;QAAS,wBAAmB,GAAnB,mBAAmB,CAAc;QACzD,eAAU,GAAV,UAAU,CAAyB;QACnC,gBAAW,GAAX,WAAW,CAAwB;QAAS,QAAG,GAAH,GAAG,CAAwB;IAAG,CAAC;AAChG,CAAC;AAED,uBAAuB,aAAmB;IACxC,IAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,cAAc,CAAC,CAAC;IAC7F,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACrC,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {RouteSegment, UrlSegment, Tree, TreeNode, rootNode, UrlTree, RouteTree} from './segments';\nimport {RoutesMetadata, RouteMetadata} from './metadata/metadata';\nimport {Type, isBlank, isPresent, stringify} from './facade/lang';\nimport {ListWrapper, StringMapWrapper} from './facade/collection';\nimport {PromiseWrapper} from './facade/promise';\nimport {BaseException} from '@angular/core';\nimport {ComponentResolver} from '@angular/core';\nimport {DEFAULT_OUTLET_NAME} from './constants';\nimport {reflector} from '@angular/core';\n\n// TODO: vsavkin: recognize should take the old tree and merge it\nexport function recognize(componentResolver: ComponentResolver, type: Type,\n                          url: UrlTree): Promise<RouteTree> {\n  let matched = new _MatchResult(type, [url.root], {}, rootNode(url).children, []);\n  return _constructSegment(componentResolver, matched).then(roots => new RouteTree(roots[0]));\n}\n\nfunction _recognize(componentResolver: ComponentResolver, parentType: Type,\n                    url: TreeNode<UrlSegment>): Promise<TreeNode<RouteSegment>[]> {\n  let metadata = _readMetadata(parentType);  // should read from the factory instead\n  if (isBlank(metadata)) {\n    throw new BaseException(\n        `Component '${stringify(parentType)}' does not have route configuration`);\n  }\n\n  let match;\n  try {\n    match = _match(metadata, url);\n  } catch (e) {\n    return PromiseWrapper.reject(e, null);\n  }\n\n  let main = _constructSegment(componentResolver, match);\n  let aux =\n      _recognizeMany(componentResolver, parentType, match.aux).then(_checkOutletNameUniqueness);\n  return PromiseWrapper.all([main, aux]).then(ListWrapper.flatten);\n}\n\nfunction _recognizeMany(componentResolver: ComponentResolver, parentType: Type,\n                        urls: TreeNode<UrlSegment>[]): Promise<TreeNode<RouteSegment>[]> {\n  let recognized = urls.map(u => _recognize(componentResolver, parentType, u));\n  return PromiseWrapper.all(recognized).then(ListWrapper.flatten);\n}\n\nfunction _constructSegment(componentResolver: ComponentResolver,\n                           matched: _MatchResult): Promise<TreeNode<RouteSegment>[]> {\n  return componentResolver.resolveComponent(matched.component)\n      .then(factory => {\n        let urlOutlet = matched.consumedUrlSegments.length === 0 ||\n                                isBlank(matched.consumedUrlSegments[0].outlet) ?\n                            DEFAULT_OUTLET_NAME :\n                            matched.consumedUrlSegments[0].outlet;\n\n        let segment = new RouteSegment(matched.consumedUrlSegments, matched.parameters, urlOutlet,\n                                       matched.component, factory);\n\n        if (matched.leftOverUrl.length > 0) {\n          return _recognizeMany(componentResolver, matched.component, matched.leftOverUrl)\n              .then(children => [new TreeNode<RouteSegment>(segment, children)]);\n        } else {\n          return _recognizeLeftOvers(componentResolver, matched.component)\n              .then(children => [new TreeNode<RouteSegment>(segment, children)]);\n        }\n      });\n}\n\nfunction _recognizeLeftOvers(componentResolver: ComponentResolver,\n                             parentType: Type): Promise<TreeNode<RouteSegment>[]> {\n  return componentResolver.resolveComponent(parentType)\n      .then(factory => {\n        let metadata = _readMetadata(parentType);\n        if (isBlank(metadata)) {\n          return [];\n        }\n\n        let r = (<any[]>metadata.routes).filter(r => r.path == \"\" || r.path == \"/\");\n        if (r.length === 0) {\n          return PromiseWrapper.resolve([]);\n        } else {\n          return _recognizeLeftOvers(componentResolver, r[0].component)\n              .then(children => {\n                return componentResolver.resolveComponent(r[0].component)\n                    .then(factory => {\n                      let segment =\n                          new RouteSegment([], {}, DEFAULT_OUTLET_NAME, r[0].component, factory);\n                      return [new TreeNode<RouteSegment>(segment, children)];\n                    });\n              });\n        }\n      });\n}\n\nfunction _match(metadata: RoutesMetadata, url: TreeNode<UrlSegment>): _MatchResult {\n  for (let r of metadata.routes) {\n    let matchingResult = _matchWithParts(r, url);\n    if (isPresent(matchingResult)) {\n      return matchingResult;\n    }\n  }\n  let availableRoutes = metadata.routes.map(r => `'${r.path}'`).join(\", \");\n  throw new BaseException(\n      `Cannot match any routes. Current segment: '${url.value}'. Available routes: [${availableRoutes}].`);\n}\n\nfunction _matchWithParts(route: RouteMetadata, url: TreeNode<UrlSegment>): _MatchResult {\n  let path = route.path.startsWith(\"/\") ? route.path.substring(1) : route.path;\n\n  if (path == \"*\") {\n    return new _MatchResult(route.component, [], null, [], []);\n  }\n\n  let parts = path.split(\"/\");\n  let positionalParams = {};\n  let consumedUrlSegments = [];\n\n  let lastParent: TreeNode<UrlSegment> = null;\n  let lastSegment: TreeNode<UrlSegment> = null;\n\n  let current = url;\n  for (let i = 0; i < parts.length; ++i) {\n    if (isBlank(current)) return null;\n\n    let p = parts[i];\n    let isLastSegment = i === parts.length - 1;\n    let isLastParent = i === parts.length - 2;\n    let isPosParam = p.startsWith(\":\");\n\n    if (!isPosParam && p != current.value.segment) return null;\n    if (isLastSegment) {\n      lastSegment = current;\n    }\n    if (isLastParent) {\n      lastParent = current;\n    }\n\n    if (isPosParam) {\n      positionalParams[p.substring(1)] = current.value.segment;\n    }\n\n    consumedUrlSegments.push(current.value);\n\n    current = ListWrapper.first(current.children);\n  }\n\n  let p = lastSegment.value.parameters;\n  let parameters =\n      <{[key: string]: string}>StringMapWrapper.merge(p, positionalParams);\n  let axuUrlSubtrees = isPresent(lastParent) ? lastParent.children.slice(1) : [];\n\n  return new _MatchResult(route.component, consumedUrlSegments, parameters, lastSegment.children,\n                          axuUrlSubtrees);\n}\n\nfunction _checkOutletNameUniqueness(nodes: TreeNode<RouteSegment>[]): TreeNode<RouteSegment>[] {\n  let names = {};\n  nodes.forEach(n => {\n    let segmentWithSameOutletName = names[n.value.outlet];\n    if (isPresent(segmentWithSameOutletName)) {\n      let p = segmentWithSameOutletName.stringifiedUrlSegments;\n      let c = n.value.stringifiedUrlSegments;\n      throw new BaseException(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n  return nodes;\n}\n\nclass _MatchResult {\n  constructor(public component: Type, public consumedUrlSegments: UrlSegment[],\n              public parameters: {[key: string]: string},\n              public leftOverUrl: TreeNode<UrlSegment>[], public aux: TreeNode<UrlSegment>[]) {}\n}\n\nfunction _readMetadata(componentType: Type) {\n  let metadata = reflector.annotations(componentType).filter(f => f instanceof RoutesMetadata);\n  return ListWrapper.first(metadata);\n}\n"]}