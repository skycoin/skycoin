{"version":3,"file":"base_request_options.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/base_request_options.ts"],"names":[],"mappings":"OAIS,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,oBAAoB;OACjD,EAAC,OAAO,EAAC,MAAM,WAAW;OAC1B,EAAC,aAAa,EAAC,MAAM,SAAS;OAE9B,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,eAAe,EAAC,MAAM,qBAAqB;OAC5C,EAAC,mBAAmB,EAAC,MAAM,cAAc;AAEhD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IAuBE,YAAY,EAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAC,GAAuB,EAAE;QACvE,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,mBAAmB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC;QACnD,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QAC1C,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,eAAe,CAAS,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACH,KAAK,CAAC,OAA4B;QAChC,MAAM,CAAC,IAAI,cAAc,CAAC;YACxB,MAAM,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;YACtF,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;YAC1F,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;YAC9E,GAAG,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG;YAC1E,MAAM,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC3C,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,eAAe,CAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;oBAC3B,CAAC,OAAO,CAAC,MAAM,CAAE,CAAC,KAAK,EAAE,CAAC;gBACxE,IAAI,CAAC,MAAM;SACxB,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AACD,wCAAwC,cAAc;IACpD;QAAgB,MAAM,EAAC,MAAM,EAAE,aAAa,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,OAAO,EAAE,EAAC,CAAC,CAAC;IAAC,CAAC;AAM/E,CAAC;AALM,6BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACK,iCAAc,GAA2D,EAC/E,CACA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent, isString} from '../src/facade/lang';\nimport {Headers} from './headers';\nimport {RequestMethod} from './enums';\nimport {RequestOptionsArgs} from './interfaces';\nimport {Injectable} from '@angular/core';\nimport {URLSearchParams} from './url_search_params';\nimport {normalizeMethodName} from './http_utils';\n\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n *\n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod | string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  // TODO: support FormData, Blob, URLSearchParams\n  body: string;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  search: URLSearchParams;\n  constructor({method, headers, body, url, search}: RequestOptionsArgs = {}) {\n    this.method = isPresent(method) ? normalizeMethodName(method) : null;\n    this.headers = isPresent(headers) ? headers : null;\n    this.body = isPresent(body) ? body : null;\n    this.url = isPresent(url) ? url : null;\n    this.search = isPresent(search) ? (isString(search) ? new URLSearchParams(<string>(search)) :\n                                                          <URLSearchParams>(search)) :\n                                      null;\n  }\n\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n   *\n   * var options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * var req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   */\n  merge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: isPresent(options) && isPresent(options.method) ? options.method : this.method,\n      headers: isPresent(options) && isPresent(options.headers) ? options.headers : this.headers,\n      body: isPresent(options) && isPresent(options.body) ? options.body : this.body,\n      url: isPresent(options) && isPresent(options.url) ? options.url : this.url,\n      search: isPresent(options) && isPresent(options.search) ?\n                  (isString(options.search) ? new URLSearchParams(<string>(options.search)) :\n                                              (<URLSearchParams>(options.search)).clone()) :\n                  this.search\n    });\n  }\n}\nexport class BaseRequestOptions extends RequestOptions {\n  constructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n"]}