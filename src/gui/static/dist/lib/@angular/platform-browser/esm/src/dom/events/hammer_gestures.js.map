{"version":3,"file":"hammer_gestures.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/dom/events/hammer_gestures.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Injectable, Inject, OpaqueToken} from '@angular/core';\nimport {isPresent} from '../../../src/facade/lang';\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {HammerGesturesPluginCommon} from './hammer_common';\n\nexport const HAMMER_GESTURE_CONFIG: OpaqueToken =\n    /*@ts2dart_const*/ new OpaqueToken(\"HammerGestureConfig\");\n\nexport interface HammerInstance {\n  on(eventName: string, callback: Function): void;\n  off(eventName: string, callback: Function): void;\n}\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n\n  buildHammer(element: HTMLElement): HammerInstance {\n    var mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (let eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\nexport class HammerGesturesPlugin extends HammerGesturesPluginCommon {\n  constructor( private _config: HammerGestureConfig) { super(); }\n\n  supports(eventName: string): boolean {\n    if (!super.supports(eventName) && !this.isCustomEvent(eventName)) return false;\n\n    if (!isPresent(window['Hammer'])) {\n      throw new BaseException(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      var mc = this._config.buildHammer(element);\n      var callback = function(eventObj) { zone.runGuarded(function() { handler(eventObj); }); };\n      mc.on(eventName, callback);\n      return () => { mc.off(eventName, callback); };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n"]}