{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser/src/animate/animation.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  DateWrapper,\n  StringWrapper,\n  RegExpWrapper,\n  NumberWrapper,\n  isPresent\n} from '../../src/facade/lang';\nimport {Math} from '../../src/facade/math';\nimport {StringMapWrapper} from '../../src/facade/collection';\nimport {camelCaseToDashCase} from '../dom/util';\nimport {getDOM} from '../dom/dom_adapter';\n\nimport {BrowserDetails} from './browser_details';\nimport {CssAnimationOptions} from './css_animation_options';\n\nexport class Animation {\n  /** functions to be called upon completion */\n  callbacks: Function[] = [];\n\n  /** the duration (ms) of the animation (whether from CSS or manually set) */\n  computedDuration: number;\n\n  /** the animation delay (ms) (whether from CSS or manually set) */\n  computedDelay: number;\n\n  /** timestamp of when the animation started */\n  startTime: number;\n\n  /** functions for removing event listeners */\n  eventClearFunctions: Function[] = [];\n\n  /** flag used to track whether or not the animation has finished */\n  completed: boolean = false;\n\n  private _stringPrefix: string = '';\n\n  /** total amount of time that the animation should take including delay */\n  get totalTime(): number {\n    let delay = this.computedDelay != null ? this.computedDelay : 0;\n    let duration = this.computedDuration != null ? this.computedDuration : 0;\n    return delay + duration;\n  }\n\n  /**\n   * Stores the start time and starts the animation\n   * @param element\n   * @param data\n   * @param browserDetails\n   */\n  constructor(public element: HTMLElement, public data: CssAnimationOptions,\n              public browserDetails: BrowserDetails) {\n    this.startTime = DateWrapper.toMillis(DateWrapper.now());\n    this._stringPrefix = getDOM().getAnimationPrefix();\n    this.setup();\n    this.wait((timestamp: any) => this.start());\n  }\n\n  wait(callback: Function) {\n    // Firefox requires 2 frames for some reason\n    this.browserDetails.raf(callback, 2);\n  }\n\n  /**\n   * Sets up the initial styles before the animation is started\n   */\n  setup(): void {\n    if (this.data.fromStyles != null) this.applyStyles(this.data.fromStyles);\n    if (this.data.duration != null)\n      this.applyStyles({'transitionDuration': this.data.duration.toString() + 'ms'});\n    if (this.data.delay != null)\n      this.applyStyles({'transitionDelay': this.data.delay.toString() + 'ms'});\n  }\n\n  /**\n   * After the initial setup has occurred, this method adds the animation styles\n   */\n  start(): void {\n    this.addClasses(this.data.classesToAdd);\n    this.addClasses(this.data.animationClasses);\n    this.removeClasses(this.data.classesToRemove);\n    if (this.data.toStyles != null) this.applyStyles(this.data.toStyles);\n    var computedStyles = getDOM().getComputedStyle(this.element);\n    this.computedDelay =\n        Math.max(this.parseDurationString(\n                     computedStyles.getPropertyValue(this._stringPrefix + 'transition-delay')),\n                 this.parseDurationString(\n                     this.element.style.getPropertyValue(this._stringPrefix + 'transition-delay')));\n    this.computedDuration = Math.max(this.parseDurationString(computedStyles.getPropertyValue(\n                                         this._stringPrefix + 'transition-duration')),\n                                     this.parseDurationString(this.element.style.getPropertyValue(\n                                         this._stringPrefix + 'transition-duration')));\n    this.addEvents();\n  }\n\n  /**\n   * Applies the provided styles to the element\n   * @param styles\n   */\n  applyStyles(styles: {[key: string]: any}): void {\n    StringMapWrapper.forEach(styles, (value: any, key: string) => {\n      var dashCaseKey = camelCaseToDashCase(key);\n      if (isPresent(getDOM().getStyle(this.element, dashCaseKey))) {\n        getDOM().setStyle(this.element, dashCaseKey, value.toString());\n      } else {\n        getDOM().setStyle(this.element, this._stringPrefix + dashCaseKey, value.toString());\n      }\n    });\n  }\n\n  /**\n   * Adds the provided classes to the element\n   * @param classes\n   */\n  addClasses(classes: string[]): void {\n    for (let i = 0, len = classes.length; i < len; i++) getDOM().addClass(this.element, classes[i]);\n  }\n\n  /**\n   * Removes the provided classes from the element\n   * @param classes\n   */\n  removeClasses(classes: string[]): void {\n    for (let i = 0, len = classes.length; i < len; i++)\n      getDOM().removeClass(this.element, classes[i]);\n  }\n\n  /**\n   * Adds events to track when animations have finished\n   */\n  addEvents(): void {\n    if (this.totalTime > 0) {\n      this.eventClearFunctions.push(\n          getDOM().onAndCancel(this.element, getDOM().getTransitionEnd(),\n                               (event: any) => this.handleAnimationEvent(event)));\n    } else {\n      this.handleAnimationCompleted();\n    }\n  }\n\n  handleAnimationEvent(event: any): void {\n    let elapsedTime = Math.round(event.elapsedTime * 1000);\n    if (!this.browserDetails.elapsedTimeIncludesDelay) elapsedTime += this.computedDelay;\n    event.stopPropagation();\n    if (elapsedTime >= this.totalTime) this.handleAnimationCompleted();\n  }\n\n  /**\n   * Runs all animation callbacks and removes temporary classes\n   */\n  handleAnimationCompleted(): void {\n    this.removeClasses(this.data.animationClasses);\n    this.callbacks.forEach(callback => callback());\n    this.callbacks = [];\n    this.eventClearFunctions.forEach(fn => fn());\n    this.eventClearFunctions = [];\n    this.completed = true;\n  }\n\n  /**\n   * Adds animation callbacks to be called upon completion\n   * @param callback\n   * @returns {Animation}\n   */\n  onComplete(callback: Function): Animation {\n    if (this.completed) {\n      callback();\n    } else {\n      this.callbacks.push(callback);\n    }\n    return this;\n  }\n\n  /**\n   * Converts the duration string to the number of milliseconds\n   * @param duration\n   * @returns {number}\n   */\n  parseDurationString(duration: string): number {\n    var maxValue = 0;\n    // duration must have at least 2 characters to be valid. (number + type)\n    if (duration == null || duration.length < 2) {\n      return maxValue;\n    } else if (duration.substring(duration.length - 2) == 'ms') {\n      let value = NumberWrapper.parseInt(this.stripLetters(duration), 10);\n      if (value > maxValue) maxValue = value;\n    } else if (duration.substring(duration.length - 1) == 's') {\n      let ms = NumberWrapper.parseFloat(this.stripLetters(duration)) * 1000;\n      let value = Math.floor(ms);\n      if (value > maxValue) maxValue = value;\n    }\n    return maxValue;\n  }\n\n  /**\n   * Strips the letters from the duration string\n   * @param str\n   * @returns {string}\n   */\n  stripLetters(str: string): string {\n    return StringWrapper.replaceAll(str, RegExpWrapper.create('[^0-9]+$', ''), '');\n  }\n}\n"]}