{"version":3,"file":"router_state.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/router_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {merge, shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n/**\n * @whatItDoes Represents the state of the router.\n *\n * @howToUse\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @description\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments,\n * the extracted parameters, and the resolved data.\n *\n * See {@link ActivatedRoute} for more information.\n *\n * @stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /**\n   * @internal\n   */\n  constructor(\n      root: TreeNode<ActivatedRoute>,\n      /**\n       * The current snapshot of the router state.\n       */\n      public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterStateSnapshot<RouterState, ActivatedRoute>(this, root);\n  }\n\n  toString(): string { return this.snapshot.toString(); }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * @whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * ActivatedRoute can also be used to traverse the router state tree.\n *\n * @howToUse\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(s => s.join(''));\n *     const user = route.data.map(d => d.user); //includes `data` and `resolve`\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport class ActivatedRoute {\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n\n  /**\n   * The current snapshot of this route.\n   */\n  snapshot: ActivatedRouteSnapshot;\n\n  /** @internal */\n  _routerState: RouterState;\n\n  /**\n   * @internal\n   */\n  constructor(\n      /**\n       *  The URL segments matched by this route. The observable will emit a new value when\n       *  the array of segments changes.\n       */\n      public url: Observable<UrlSegment[]>,\n\n      /**\n       * The matrix parameters scoped to this route. The observable will emit a new value when\n       * the set of the parameters changes.\n       */\n      public params: Observable<Params>,\n\n      /**\n       * The query parameters shared by all the routes. The observable will emit a new value when\n       * the set of the parameters changes.\n       */\n      public queryParams: Observable<Params>,\n\n      /**\n       * The URL fragment shared by all the routes. The observable will emit a new value when\n       * the URL fragment changes.\n       */\n      public fragment: Observable<string>,\n\n      /**\n       * The static and resolved data of this route. The observable will emit a new value when\n       * any of the resolvers returns a new object.\n       */\n      public data: Observable<Data>,\n\n      /**\n       * The outlet name of the route. It's a constant.\n       */\n      public outlet: string,\n\n      /**\n       * The component of the route. It's a constant.\n       */\n      public component: Type<any>|string,  // TODO: vsavkin: remove |string\n      futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  /**\n   * The configuration used to match this route.\n   */\n  get routeConfig(): Route { return this._futureSnapshot.routeConfig; }\n\n  /**\n   * The root of the router state.\n   */\n  get root(): ActivatedRoute { return this._routerState.root; }\n\n  /**\n   * The parent of this route in the router state tree.\n   */\n  get parent(): ActivatedRoute { return this._routerState.parent(this); }\n\n  /**\n   * The first child of this route in the router state tree.\n   */\n  get firstChild(): ActivatedRoute { return this._routerState.firstChild(this); }\n\n  /**\n   * The children of this route in the router state tree.\n   */\n  get children(): ActivatedRoute[] { return this._routerState.children(this); }\n\n  /**\n   * The path from the root of the router state tree to this route.\n   */\n  get pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n\n  /**\n   * @docsNotRequired\n   */\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\n/**\n * @internal\n */\nexport type Inherited = {\n  params: Params; data: Data; resolve: Data;\n}\n\n/**\n * @internal\n */\nexport function\ninheritedParamsDataResolve(route: ActivatedRouteSnapshot):\n    Inherited {\n      const pathToRoot = route.pathFromRoot;\n\n      let inhertingStartingFrom = pathToRoot.length - 1;\n\n      while (inhertingStartingFrom >= 1) {\n        const current = pathToRoot[inhertingStartingFrom];\n        const parent = pathToRoot[inhertingStartingFrom - 1];\n        // current route is an empty path => inherits its parent's params and data\n        if (current.routeConfig && current.routeConfig.path === '') {\n          inhertingStartingFrom--;\n\n          // parent is componentless => current route should inherit its params and data\n        } else if (!parent.component) {\n          inhertingStartingFrom--;\n\n        } else {\n          break;\n        }\n      }\n\n      return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n        const params = merge(res.params, curr.params);\n        const data = merge(res.data, curr.data);\n        const resolve = merge(res.resolve, curr._resolvedData);\n        return {params, data, resolve};\n      }, <any>{params: {}, data: {}, resolve: {}});\n    }\n\n/**\n * @whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n *\n * @howToUse\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport class ActivatedRouteSnapshot {\n  /** @internal **/\n  _routeConfig: Route;\n\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n\n  /** @internal */\n  _lastPathIndex: number;\n\n  /** @internal */\n  _resolve: ResolveData;\n\n  /** @internal */\n  _resolvedData: Data;\n\n  /** @internal */\n  _routerState: RouterStateSnapshot;\n\n  /**\n   * @internal\n   */\n  constructor(\n      /**\n       *  The URL segments matched by this route.\n       */\n      public url: UrlSegment[],\n\n      /**\n       * The matrix parameters scoped to this route.\n       */\n      public params: Params,\n\n      /**\n       * The query parameters shared by all the routes.\n       */\n      public queryParams: Params,\n\n      /**\n       * The URL fragment shared by all the routes.\n       */\n      public fragment: string,\n\n      /**\n       * The static and resolved data of this route.\n       */\n      public data: Data,\n\n      /**\n       * The outlet name of the route.\n       */\n      public outlet: string,\n\n      /**\n       * The component of the route.\n       */\n      public component: Type<any>|string, routeConfig: Route, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  /**\n   * The configuration used to match this route.\n   */\n  get routeConfig(): Route { return this._routeConfig; }\n\n  /**\n   * The root of the router state.\n   */\n  get root(): ActivatedRouteSnapshot { return this._routerState.root; }\n\n  /**\n   * The parent of this route in the router state tree.\n   */\n  get parent(): ActivatedRouteSnapshot { return this._routerState.parent(this); }\n\n  /**\n   * The first child of this route in the router state tree.\n   */\n  get firstChild(): ActivatedRouteSnapshot { return this._routerState.firstChild(this); }\n\n  /**\n   * The children of this route in the router state tree.\n   */\n  get children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n\n  /**\n   * The path from the root of the router state tree to this route.\n   */\n  get pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n\n  /**\n   * @docsNotRequired\n   */\n  toString(): string {\n    const url = this.url.map(s => s.toString()).join('/');\n    const matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @whatItDoes Represents the state of the router at a moment in time.\n *\n * @howToUse\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @description\n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /**\n   * @internal\n   */\n  constructor(\n\n      /** The url from which this snapshot was created */\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterStateSnapshot<RouterStateSnapshot, ActivatedRouteSnapshot>(this, root);\n  }\n\n  toString(): string { return serializeNode(this._root); }\n}\n\nfunction setRouterStateSnapshot<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterStateSnapshot(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {\n      (<any>route.queryParams).next(route._futureSnapshot.queryParams);\n    }\n    if (route.snapshot.fragment !== route._futureSnapshot.fragment) {\n      (<any>route.fragment).next(route._futureSnapshot.fragment);\n    }\n    if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {\n      (<any>route.params).next(route._futureSnapshot.params);\n    }\n    if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {\n      (<any>route.url).next(route._futureSnapshot.url);\n    }\n    if (!equalParamsAndUrlSegments(route.snapshot, route._futureSnapshot)) {\n      (<any>route.data).next(route._futureSnapshot.data);\n    }\n    route.snapshot = route._futureSnapshot;\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\n\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}