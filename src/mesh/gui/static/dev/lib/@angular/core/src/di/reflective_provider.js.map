{"version":3,"file":"reflective_provider.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di/reflective_provider.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  Type,\n  isBlank,\n  isPresent,\n  isArray,\n} from '../../src/facade/lang';\nimport {MapWrapper, ListWrapper} from '../../src/facade/collection';\nimport {reflector} from '../reflection/reflection';\nimport {ReflectiveKey} from './reflective_key';\nimport {\n  InjectMetadata,\n  OptionalMetadata,\n  SelfMetadata,\n  HostMetadata,\n  SkipSelfMetadata,\n  DependencyMetadata\n} from './metadata';\nimport {\n  NoAnnotationError,\n  MixingMultiProvidersWithRegularProvidersError,\n  InvalidProviderError\n} from './reflective_exceptions';\nimport {resolveForwardRef} from './forward_ref';\nimport {Provider, ProviderBuilder, provide} from './provider';\nimport {isProviderLiteral, createProvider} from './provider_util';\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport class ReflectiveDependency {\n  constructor(public key: ReflectiveKey, public optional: boolean, public lowerBoundVisibility: any,\n              public upperBoundVisibility: any, public properties: any[]) {}\n\n  static fromKey(key: ReflectiveKey): ReflectiveDependency {\n    return new ReflectiveDependency(key, false, null, null, []);\n  }\n}\n\nconst _EMPTY_LIST = /*@ts2dart_const*/[];\n\n/**\n * An internal resolved representation of a {@link Provider} used by the {@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([new Provider('message', {useValue: 'Hello'})]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n */\nexport interface ResolvedReflectiveProvider {\n  /**\n   * A key, usually a `Type`.\n   */\n  key: ReflectiveKey;\n\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  resolvedFactories: ResolvedReflectiveFactory[];\n\n  /**\n   * Indicates if the provider is a multi-provider or a regular provider.\n   */\n  multiProvider: boolean;\n}\n\n/**\n * See {@link ResolvedProvider} instead.\n *\n * @deprecated\n */\nexport interface ResolvedReflectiveBinding extends ResolvedReflectiveProvider {}\n\nexport class ResolvedReflectiveProvider_ implements ResolvedReflectiveBinding {\n  constructor(public key: ReflectiveKey, public resolvedFactories: ResolvedReflectiveFactory[],\n              public multiProvider: boolean) {}\n\n  get resolvedFactory(): ResolvedReflectiveFactory { return this.resolvedFactories[0]; }\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving {@link Provider}.\n */\nexport class ResolvedReflectiveFactory {\n  constructor(\n      /**\n       * Factory function which can return an instance of an object represented by a key.\n       */\n      public factory: Function,\n\n      /**\n       * Arguments (dependencies) to the `factory` function.\n       */\n      public dependencies: ReflectiveDependency[]) {}\n}\n\n\n/**\n * Resolve a single provider.\n */\nexport function resolveReflectiveFactory(provider: Provider): ResolvedReflectiveFactory {\n  var factoryFn: Function;\n  var resolvedDeps;\n  if (isPresent(provider.useClass)) {\n    var useClass = resolveForwardRef(provider.useClass);\n    factoryFn = reflector.factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (isPresent(provider.useExisting)) {\n    factoryFn = (aliasInstance) => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (isPresent(provider.useFactory)) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n\n/**\n * Converts the {@link Provider} into {@link ResolvedProvider}.\n *\n * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains\n * convenience provider syntax.\n */\nexport function resolveReflectiveProvider(provider: Provider): ResolvedReflectiveProvider {\n  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.token),\n                                         [resolveReflectiveFactory(provider)], provider.multi);\n}\n\n/**\n * Resolve a list of Providers.\n */\nexport function resolveReflectiveProviders(\n    providers: Array<Type | Provider | {[k: string]: any} | any[]>): ResolvedReflectiveProvider[] {\n  var normalized = _normalizeProviders(providers, []);\n  var resolved = normalized.map(resolveReflectiveProvider);\n  return MapWrapper.values(\n      mergeResolvedReflectiveProviders(resolved, new Map<number, ResolvedReflectiveProvider>()));\n}\n\n/**\n * Merges a list of ResolvedProviders into a list where\n * each key is contained exactly once and multi providers\n * have been merged.\n */\nexport function mergeResolvedReflectiveProviders(\n    providers: ResolvedReflectiveProvider[],\n    normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>):\n    Map<number, ResolvedReflectiveProvider> {\n  for (var i = 0; i < providers.length; i++) {\n    var provider = providers[i];\n    var existing = normalizedProvidersMap.get(provider.key.id);\n    if (isPresent(existing)) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (var j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      var resolvedProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(\n            provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n\nfunction _normalizeProviders(\n    providers: Array<Type | Provider | {[k: string]: any} | ProviderBuilder | any[]>,\n    res: Provider[]): Provider[] {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push(provide(b, {useClass: b}));\n\n    } else if (b instanceof Provider) {\n      res.push(b);\n\n    } else if (isProviderLiteral(b)) {\n      res.push(createProvider(b));\n\n    } else if (b instanceof Array) {\n      _normalizeProviders(b, res);\n\n    } else if (b instanceof ProviderBuilder) {\n      throw new InvalidProviderError(b.token);\n\n    } else {\n      throw new InvalidProviderError(b);\n    }\n  });\n\n  return res;\n}\n\nexport function constructDependencies(typeOrFunc: any,\n                                      dependencies: any[]): ReflectiveDependency[] {\n  if (isBlank(dependencies)) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    var params: any[][] = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n\nfunction _dependenciesFor(typeOrFunc: any): ReflectiveDependency[] {\n  var params = reflector.parameters(typeOrFunc);\n  if (isBlank(params)) return [];\n  if (params.some(isBlank)) {\n    throw new NoAnnotationError(typeOrFunc, params);\n  }\n  return params.map((p: any[]) => _extractToken(typeOrFunc, p, params));\n}\n\nfunction _extractToken(typeOrFunc, metadata /*any[] | any*/,\n                       params: any[][]): ReflectiveDependency {\n  var depProps = [];\n  var token = null;\n  var optional = false;\n\n  if (!isArray(metadata)) {\n    if (metadata instanceof InjectMetadata) {\n      return _createDependency(metadata.token, optional, null, null, depProps);\n    } else {\n      return _createDependency(metadata, optional, null, null, depProps);\n    }\n  }\n\n  var lowerBoundVisibility = null;\n  var upperBoundVisibility = null;\n\n  for (var i = 0; i < metadata.length; ++i) {\n    var paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n\n    } else if (paramMetadata instanceof InjectMetadata) {\n      token = paramMetadata.token;\n\n    } else if (paramMetadata instanceof OptionalMetadata) {\n      optional = true;\n\n    } else if (paramMetadata instanceof SelfMetadata) {\n      upperBoundVisibility = paramMetadata;\n\n    } else if (paramMetadata instanceof HostMetadata) {\n      upperBoundVisibility = paramMetadata;\n\n    } else if (paramMetadata instanceof SkipSelfMetadata) {\n      lowerBoundVisibility = paramMetadata;\n\n    } else if (paramMetadata instanceof DependencyMetadata) {\n      if (isPresent(paramMetadata.token)) {\n        token = paramMetadata.token;\n      }\n      depProps.push(paramMetadata);\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (isPresent(token)) {\n    return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);\n  } else {\n    throw new NoAnnotationError(typeOrFunc, params);\n  }\n}\n\nfunction _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility,\n                           depProps): ReflectiveDependency {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility,\n                                  upperBoundVisibility, depProps);\n}\n"]}