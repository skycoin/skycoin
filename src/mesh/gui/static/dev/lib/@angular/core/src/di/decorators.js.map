{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di/decorators.ts"],"names":[],"mappings":";AAIE,yBAOK,YAAY,CAAC,CAAA;AACpB,2BAAgD,oBAAoB,CAAC,CAAA;AAkDrE;;GAEG;AACQ,cAAM,GAA0B,+BAAkB,CAAC,yBAAc,CAAC,CAAC;AAE9E;;GAEG;AACQ,gBAAQ,GAA4B,+BAAkB,CAAC,2BAAgB,CAAC,CAAC;AAEpF;;GAEG;AACQ,kBAAU,GACU,0BAAa,CAAC,6BAAkB,CAAC,CAAC;AAEjE;;GAEG;AACQ,YAAI,GAAwB,+BAAkB,CAAC,uBAAY,CAAC,CAAC;AAExE;;GAEG;AACQ,YAAI,GAAwB,+BAAkB,CAAC,uBAAY,CAAC,CAAC;AAExE;;GAEG;AACQ,gBAAQ,GAA4B,+BAAkB,CAAC,2BAAgB,CAAC,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  InjectMetadata,\n  OptionalMetadata,\n  InjectableMetadata,\n  SelfMetadata,\n  HostMetadata,\n  SkipSelfMetadata\n} from './metadata';\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\n\n/**\n * Factory for creating {@link InjectMetadata}.\n */\nexport interface InjectMetadataFactory {\n  (token: any): any;\n  new (token: any): InjectMetadata;\n}\n\n/**\n * Factory for creating {@link OptionalMetadata}.\n */\nexport interface OptionalMetadataFactory {\n  (): any;\n  new (): OptionalMetadata;\n}\n\n/**\n * Factory for creating {@link InjectableMetadata}.\n */\nexport interface InjectableMetadataFactory {\n  (): any;\n  new (): InjectableMetadata;\n}\n\n/**\n * Factory for creating {@link SelfMetadata}.\n */\nexport interface SelfMetadataFactory {\n  (): any;\n  new (): SelfMetadata;\n}\n\n/**\n * Factory for creating {@link HostMetadata}.\n */\nexport interface HostMetadataFactory {\n  (): any;\n  new (): HostMetadata;\n}\n\n/**\n * Factory for creating {@link SkipSelfMetadata}.\n */\nexport interface SkipSelfMetadataFactory {\n  (): any;\n  new (): SkipSelfMetadata;\n}\n\n/**\n * Factory for creating {@link InjectMetadata}.\n */\nexport var Inject: InjectMetadataFactory = makeParamDecorator(InjectMetadata);\n\n/**\n * Factory for creating {@link OptionalMetadata}.\n */\nexport var Optional: OptionalMetadataFactory = makeParamDecorator(OptionalMetadata);\n\n/**\n * Factory for creating {@link InjectableMetadata}.\n */\nexport var Injectable: InjectableMetadataFactory =\n    <InjectableMetadataFactory>makeDecorator(InjectableMetadata);\n\n/**\n * Factory for creating {@link SelfMetadata}.\n */\nexport var Self: SelfMetadataFactory = makeParamDecorator(SelfMetadata);\n\n/**\n * Factory for creating {@link HostMetadata}.\n */\nexport var Host: HostMetadataFactory = makeParamDecorator(HostMetadata);\n\n/**\n * Factory for creating {@link SkipSelfMetadata}.\n */\nexport var SkipSelf: SkipSelfMetadataFactory = makeParamDecorator(SkipSelfMetadata);\n"]}