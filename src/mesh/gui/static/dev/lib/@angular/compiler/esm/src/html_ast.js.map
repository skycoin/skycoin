{"version":3,"file":"html_ast.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/html_ast.ts"],"names":[],"mappings":"OAIS,EAAC,SAAS,EAAC,MAAM,oBAAoB;AAS9C;IACE,YAAmB,KAAa,EAAS,UAA2B;QAAjD,UAAK,GAAL,KAAK,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IACxE,KAAK,CAAC,OAAuB,EAAE,OAAY,IAAS,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAChG,CAAC;AAED;IACE,YAAmB,WAAmB,EAAS,IAAY,EAAS,KAA6B,EAC9E,UAA2B,EAAS,qBAAsC;QAD1E,gBAAW,GAAX,WAAW,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAwB;QAC9E,eAAU,GAAV,UAAU,CAAiB;QAAS,0BAAqB,GAArB,qBAAqB,CAAiB;IAAG,CAAC;IACjG,KAAK,CAAC,OAAuB,EAAE,OAAY;QACzC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;AACH,CAAC;AAED;IACE,YAAmB,KAAa,EAAS,UAAqB,EAC3C,UAA2B,EAAS,eAAgC,EACpE,aAA8B;QAF9B,UAAK,GAAL,KAAK,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAW;QAC3C,eAAU,GAAV,UAAU,CAAiB;QAAS,oBAAe,GAAf,eAAe,CAAiB;QACpE,kBAAa,GAAb,aAAa,CAAiB;IAAG,CAAC;IAErD,KAAK,CAAC,OAAuB,EAAE,OAAY;QACzC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;AACH,CAAC;AAED;IACE,YAAmB,IAAY,EAAS,KAAa,EAAS,UAA2B;QAAtE,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAC7F,KAAK,CAAC,OAAuB,EAAE,OAAY,IAAS,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AAChG,CAAC;AAED;IACE,YAAmB,IAAY,EAAS,KAAoB,EAAS,QAAmB,EACrE,UAA2B,EAAS,eAAgC,EACpE,aAA8B;QAF9B,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAe;QAAS,aAAQ,GAAR,QAAQ,CAAW;QACrE,eAAU,GAAV,UAAU,CAAiB;QAAS,oBAAe,GAAf,eAAe,CAAiB;QACpE,kBAAa,GAAb,aAAa,CAAiB;IAAG,CAAC;IACrD,KAAK,CAAC,OAAuB,EAAE,OAAY,IAAS,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnG,CAAC;AAED;IACE,YAAmB,KAAa,EAAS,UAA2B;QAAjD,UAAK,GAAL,KAAK,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IACxE,KAAK,CAAC,OAAuB,EAAE,OAAY,IAAS,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACnG,CAAC;AAWD,6BAA6B,OAAuB,EAAE,IAAe,EAAE,OAAO,GAAQ,IAAI;IACxF,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,OAAO,CAAC,GAAG;QACd,IAAI,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC5C,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC;IACH,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent} from '../src/facade/lang';\n\nimport {ParseSourceSpan} from './parse_util';\n\nexport interface HtmlAst {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: HtmlAstVisitor, context: any): any;\n}\n\nexport class HtmlTextAst implements HtmlAst {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: HtmlAstVisitor, context: any): any { return visitor.visitText(this, context); }\n}\n\nexport class HtmlExpansionAst implements HtmlAst {\n  constructor(public switchValue: string, public type: string, public cases: HtmlExpansionCaseAst[],\n              public sourceSpan: ParseSourceSpan, public switchValueSourceSpan: ParseSourceSpan) {}\n  visit(visitor: HtmlAstVisitor, context: any): any {\n    return visitor.visitExpansion(this, context);\n  }\n}\n\nexport class HtmlExpansionCaseAst implements HtmlAst {\n  constructor(public value: string, public expression: HtmlAst[],\n              public sourceSpan: ParseSourceSpan, public valueSourceSpan: ParseSourceSpan,\n              public expSourceSpan: ParseSourceSpan) {}\n\n  visit(visitor: HtmlAstVisitor, context: any): any {\n    return visitor.visitExpansionCase(this, context);\n  }\n}\n\nexport class HtmlAttrAst implements HtmlAst {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: HtmlAstVisitor, context: any): any { return visitor.visitAttr(this, context); }\n}\n\nexport class HtmlElementAst implements HtmlAst {\n  constructor(public name: string, public attrs: HtmlAttrAst[], public children: HtmlAst[],\n              public sourceSpan: ParseSourceSpan, public startSourceSpan: ParseSourceSpan,\n              public endSourceSpan: ParseSourceSpan) {}\n  visit(visitor: HtmlAstVisitor, context: any): any { return visitor.visitElement(this, context); }\n}\n\nexport class HtmlCommentAst implements HtmlAst {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: HtmlAstVisitor, context: any): any { return visitor.visitComment(this, context); }\n}\n\nexport interface HtmlAstVisitor {\n  visitElement(ast: HtmlElementAst, context: any): any;\n  visitAttr(ast: HtmlAttrAst, context: any): any;\n  visitText(ast: HtmlTextAst, context: any): any;\n  visitComment(ast: HtmlCommentAst, context: any): any;\n  visitExpansion(ast: HtmlExpansionAst, context: any): any;\n  visitExpansionCase(ast: HtmlExpansionCaseAst, context: any): any;\n}\n\nexport function htmlVisitAll(visitor: HtmlAstVisitor, asts: HtmlAst[], context: any = null): any[] {\n  var result = [];\n  asts.forEach(ast => {\n    var astResult = ast.visit(visitor, context);\n    if (isPresent(astResult)) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n"]}