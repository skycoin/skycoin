{"version":3,"file":"ng_form_model.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/ng_form_model.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  SimpleChange,\n  OnChanges,\n  Directive,\n  forwardRef,\n  Provider,\n  Inject,\n  Optional,\n  Self\n} from '@angular/core';\nimport {isBlank} from '../../../src/facade/lang';\nimport {ListWrapper, StringMapWrapper} from '../../../src/facade/collection';\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {ObservableWrapper, EventEmitter} from '../../../src/facade/async';\nimport {NgControl} from './ng_control';\nimport {NgControlGroup} from './ng_control_group';\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {Control, ControlGroup} from '../model';\nimport {setUpControl, setUpControlGroup, composeValidators, composeAsyncValidators} from './shared';\nimport {Validators, NG_VALIDATORS, NG_ASYNC_VALIDATORS} from '../validators';\n\nexport const formDirectiveProvider: any =\n    /*@ts2dart_const*/ /* @ts2dart_Provider */ {\n      provide: ControlContainer,\n      useExisting: forwardRef(() => NgFormModel)\n    };\nexport class NgFormModel extends ControlContainer implements Form,\n    OnChanges {\n  form: ControlGroup = null;\n  directives: NgControl[] = [];\n  ngSubmit = new EventEmitter();\n\n  constructor( private _validators: any[], private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: {[key: string]: SimpleChange}): void {\n    this._checkFormPresent();\n    if (StringMapWrapper.contains(changes, \"form\")) {\n      var sync = composeValidators(this._validators);\n      this.form.validator = Validators.compose([this.form.validator, sync]);\n\n      var async = composeAsyncValidators(this._asyncValidators);\n      this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n\n      this.form.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    }\n\n    this._updateDomValue();\n  }\n\n  get formDirective(): Form { return this; }\n\n  get control(): ControlGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: NgControl): void {\n    var ctrl: any = this.form.find(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n  }\n\n  getControl(dir: NgControl): Control { return <Control>this.form.find(dir.path); }\n\n  removeControl(dir: NgControl): void { ListWrapper.remove(this.directives, dir); }\n\n  addControlGroup(dir: NgControlGroup) {\n    var ctrl: any = this.form.find(dir.path);\n    setUpControlGroup(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeControlGroup(dir: NgControlGroup) {}\n\n  getControlGroup(dir: NgControlGroup): ControlGroup {\n    return <ControlGroup>this.form.find(dir.path);\n  }\n\n  updateModel(dir: NgControl, value: any): void {\n    var ctrlÂ  = <Control>this.form.find(dir.path);\n    ctrl.updateValue(value);\n  }\n\n  onSubmit(): boolean {\n    ObservableWrapper.callEmit(this.ngSubmit, null);\n    return false;\n  }\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      var ctrl: any = this.form.find(dir.path);\n      dir.valueAccessor.writeValue(ctrl.value);\n    });\n  }\n\n  private _checkFormPresent() {\n    if (isBlank(this.form)) {\n      throw new BaseException(\n          `ngFormModel expects a form. Please pass one in. Example: <form [ngFormModel]=\"myCoolForm\">`);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFormModel]',\n  bindings: [formDirectiveProvider],\n  inputs: ['form: ngFormModel'],\n  host: {'(submit)': 'onSubmit()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n"]}