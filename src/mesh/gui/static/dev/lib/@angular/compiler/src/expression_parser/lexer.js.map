{"version":3,"file":"lexer.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/expression_parser/lexer.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Injectable} from '@angular/core';\nimport {SetWrapper} from '../../src/facade/collection';\nimport {NumberWrapper, StringJoiner, StringWrapper, isPresent} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\n\nexport enum TokenType {\n  Character,\n  Identifier,\n  Keyword,\n  String,\n  Operator,\n  Number\n}\nexport class Lexer {\n  tokenize(text: string): any[] {\n    var scanner = new _Scanner(text);\n    var tokens = [];\n    var token = scanner.scanToken();\n    while (token != null) {\n      tokens.push(token);\n      token = scanner.scanToken();\n    }\n    return tokens;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\nexport class Token {\n  constructor(public index: number, public type: TokenType, public numValue: number,\n              public strValue: string) {}\n\n  isCharacter(code: number): boolean {\n    return (this.type == TokenType.Character && this.numValue == code);\n  }\n\n  isNumber(): boolean { return (this.type == TokenType.Number); }\n\n  isString(): boolean { return (this.type == TokenType.String); }\n\n  isOperator(operater: string): boolean {\n    return (this.type == TokenType.Operator && this.strValue == operater);\n  }\n\n  isIdentifier(): boolean { return (this.type == TokenType.Identifier); }\n\n  isKeyword(): boolean { return (this.type == TokenType.Keyword); }\n\n  isKeywordDeprecatedVar(): boolean {\n    return (this.type == TokenType.Keyword && this.strValue == \"var\");\n  }\n\n  isKeywordLet(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"let\"); }\n\n  isKeywordNull(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"null\"); }\n\n  isKeywordUndefined(): boolean {\n    return (this.type == TokenType.Keyword && this.strValue == \"undefined\");\n  }\n\n  isKeywordTrue(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"true\"); }\n\n  isKeywordFalse(): boolean { return (this.type == TokenType.Keyword && this.strValue == \"false\"); }\n\n  toNumber(): number {\n    // -1 instead of NULL ok?\n    return (this.type == TokenType.Number) ? this.numValue : -1;\n  }\n\n  toString(): string {\n    switch (this.type) {\n      case TokenType.Character:\n      case TokenType.Identifier:\n      case TokenType.Keyword:\n      case TokenType.Operator:\n      case TokenType.String:\n        return this.strValue;\n      case TokenType.Number:\n        return this.numValue.toString();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction newCharacterToken(index: number, code: number): Token {\n  return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));\n}\n\nfunction newIdentifierToken(index: number, text: string): Token {\n  return new Token(index, TokenType.Identifier, 0, text);\n}\n\nfunction newKeywordToken(index: number, text: string): Token {\n  return new Token(index, TokenType.Keyword, 0, text);\n}\n\nfunction newOperatorToken(index: number, text: string): Token {\n  return new Token(index, TokenType.Operator, 0, text);\n}\n\nfunction newStringToken(index: number, text: string): Token {\n  return new Token(index, TokenType.String, 0, text);\n}\n\nfunction newNumberToken(index: number, n: number): Token {\n  return new Token(index, TokenType.Number, n, \"\");\n}\n\n\nexport var EOF: Token = new Token(-1, TokenType.Character, 0, \"\");\n\nexport const $EOF = /*@ts2dart_const*/ 0;\nexport const $TAB = /*@ts2dart_const*/ 9;\nexport const $LF = /*@ts2dart_const*/ 10;\nexport const $VTAB = /*@ts2dart_const*/ 11;\nexport const $FF = /*@ts2dart_const*/ 12;\nexport const $CR = /*@ts2dart_const*/ 13;\nexport const $SPACE = /*@ts2dart_const*/ 32;\nexport const $BANG = /*@ts2dart_const*/ 33;\nexport const $DQ = /*@ts2dart_const*/ 34;\nexport const $HASH = /*@ts2dart_const*/ 35;\nexport const $$ = /*@ts2dart_const*/ 36;\nexport const $PERCENT = /*@ts2dart_const*/ 37;\nexport const $AMPERSAND = /*@ts2dart_const*/ 38;\nexport const $SQ = /*@ts2dart_const*/ 39;\nexport const $LPAREN = /*@ts2dart_const*/ 40;\nexport const $RPAREN = /*@ts2dart_const*/ 41;\nexport const $STAR = /*@ts2dart_const*/ 42;\nexport const $PLUS = /*@ts2dart_const*/ 43;\nexport const $COMMA = /*@ts2dart_const*/ 44;\nexport const $MINUS = /*@ts2dart_const*/ 45;\nexport const $PERIOD = /*@ts2dart_const*/ 46;\nexport const $SLASH = /*@ts2dart_const*/ 47;\nexport const $COLON = /*@ts2dart_const*/ 58;\nexport const $SEMICOLON = /*@ts2dart_const*/ 59;\nexport const $LT = /*@ts2dart_const*/ 60;\nexport const $EQ = /*@ts2dart_const*/ 61;\nexport const $GT = /*@ts2dart_const*/ 62;\nexport const $QUESTION = /*@ts2dart_const*/ 63;\n\nconst $0 = /*@ts2dart_const*/ 48;\nconst $9 = /*@ts2dart_const*/ 57;\n\nconst $A = /*@ts2dart_const*/ 65, $E = /*@ts2dart_const*/ 69, $Z = /*@ts2dart_const*/ 90;\n\nexport const $LBRACKET = /*@ts2dart_const*/ 91;\nexport const $BACKSLASH = /*@ts2dart_const*/ 92;\nexport const $RBRACKET = /*@ts2dart_const*/ 93;\nconst $CARET = /*@ts2dart_const*/ 94;\nconst $_ = /*@ts2dart_const*/ 95;\nexport const $BT = /*@ts2dart_const*/ 96;\nconst $a = /*@ts2dart_const*/ 97, $e = /*@ts2dart_const*/ 101, $f = /*@ts2dart_const*/ 102;\nconst $n = /*@ts2dart_const*/ 110, $r = /*@ts2dart_const*/ 114, $t = /*@ts2dart_const*/ 116,\n      $u = /*@ts2dart_const*/ 117, $v = /*@ts2dart_const*/ 118, $z = /*@ts2dart_const*/ 122;\n\nexport const $LBRACE = /*@ts2dart_const*/ 123;\nexport const $BAR = /*@ts2dart_const*/ 124;\nexport const $RBRACE = /*@ts2dart_const*/ 125;\nconst $NBSP = /*@ts2dart_const*/ 160;\n\nexport class ScannerError extends BaseException {\n  constructor(public message) { super(); }\n\n  toString(): string { return this.message; }\n}\n\nclass _Scanner {\n  length: number;\n  peek: number = 0;\n  index: number = -1;\n\n  constructor(public input: string) {\n    this.length = input.length;\n    this.advance();\n  }\n\n  advance() {\n    this.peek =\n        ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);\n  }\n\n  scanToken(): Token {\n    var input = this.input, length = this.length, peek = this.peek, index = this.index;\n\n    // Skip whitespace.\n    while (peek <= $SPACE) {\n      if (++index >= length) {\n        peek = $EOF;\n        break;\n      } else {\n        peek = StringWrapper.charCodeAt(input, index);\n      }\n    }\n\n    this.peek = peek;\n    this.index = index;\n\n    if (index >= length) {\n      return null;\n    }\n\n    // Handle identifiers and numbers.\n    if (isIdentifierStart(peek)) return this.scanIdentifier();\n    if (isDigit(peek)) return this.scanNumber(index);\n\n    var start: number = index;\n    switch (peek) {\n      case $PERIOD:\n        this.advance();\n        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);\n      case $LPAREN:\n      case $RPAREN:\n      case $LBRACE:\n      case $RBRACE:\n      case $LBRACKET:\n      case $RBRACKET:\n      case $COMMA:\n      case $COLON:\n      case $SEMICOLON:\n        return this.scanCharacter(start, peek);\n      case $SQ:\n      case $DQ:\n        return this.scanString();\n      case $HASH:\n      case $PLUS:\n      case $MINUS:\n      case $STAR:\n      case $SLASH:\n      case $PERCENT:\n      case $CARET:\n        return this.scanOperator(start, StringWrapper.fromCharCode(peek));\n      case $QUESTION:\n        return this.scanComplexOperator(start, '?', $PERIOD, '.');\n      case $LT:\n      case $GT:\n        return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=');\n      case $BANG:\n      case $EQ:\n        return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=', $EQ,\n                                        '=');\n      case $AMPERSAND:\n        return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n      case $BAR:\n        return this.scanComplexOperator(start, '|', $BAR, '|');\n      case $NBSP:\n        while (isWhitespace(this.peek)) this.advance();\n        return this.scanToken();\n    }\n\n    this.error(`Unexpected character [${StringWrapper.fromCharCode(peek)}]`, 0);\n    return null;\n  }\n\n  scanCharacter(start: number, code: number): Token {\n    this.advance();\n    return newCharacterToken(start, code);\n  }\n\n\n  scanOperator(start: number, str: string): Token {\n    this.advance();\n    return newOperatorToken(start, str);\n  }\n\n  /**\n   * Tokenize a 2/3 char long operator\n   *\n   * @param start start index in the expression\n   * @param one first symbol (always part of the operator)\n   * @param twoCode code point for the second symbol\n   * @param two second symbol (part of the operator when the second code point matches)\n   * @param threeCode code point for the third symbol\n   * @param three third symbol (part of the operator when provided and matches source expression)\n   * @returns {Token}\n   */\n  scanComplexOperator(start: number, one: string, twoCode: number, two: string, threeCode?: number,\n                      three?: string): Token {\n    this.advance();\n    var str: string = one;\n    if (this.peek == twoCode) {\n      this.advance();\n      str += two;\n    }\n    if (isPresent(threeCode) && this.peek == threeCode) {\n      this.advance();\n      str += three;\n    }\n    return newOperatorToken(start, str);\n  }\n\n  scanIdentifier(): Token {\n    var start: number = this.index;\n    this.advance();\n    while (isIdentifierPart(this.peek)) this.advance();\n    var str: string = this.input.substring(start, this.index);\n    if (SetWrapper.has(KEYWORDS, str)) {\n      return newKeywordToken(start, str);\n    } else {\n      return newIdentifierToken(start, str);\n    }\n  }\n\n  scanNumber(start: number): Token {\n    var simple: boolean = (this.index === start);\n    this.advance();  // Skip initial digit.\n    while (true) {\n      if (isDigit(this.peek)) {\n        // Do nothing.\n      } else if (this.peek == $PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek)) this.advance();\n        if (!isDigit(this.peek)) this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n      this.advance();\n    }\n    var str: string = this.input.substring(start, this.index);\n    // TODO\n    var value: number =\n        simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);\n    return newNumberToken(start, value);\n  }\n\n  scanString(): Token {\n    var start: number = this.index;\n    var quote: number = this.peek;\n    this.advance();  // Skip initial quote.\n\n    var buffer: StringJoiner;\n    var marker: number = this.index;\n    var input: string = this.input;\n\n    while (this.peek != quote) {\n      if (this.peek == $BACKSLASH) {\n        if (buffer == null) buffer = new StringJoiner();\n        buffer.add(input.substring(marker, this.index));\n        this.advance();\n        var unescapedCode: number;\n        if (this.peek == $u) {\n          // 4 character hex code for unicode character.\n          var hex: string = input.substring(this.index + 1, this.index + 5);\n          try {\n            unescapedCode = NumberWrapper.parseInt(hex, 16);\n          } catch (e) {\n            this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n          }\n          for (var i: number = 0; i < 5; i++) {\n            this.advance();\n          }\n        } else {\n          unescapedCode = unescape(this.peek);\n          this.advance();\n        }\n        buffer.add(StringWrapper.fromCharCode(unescapedCode));\n        marker = this.index;\n      } else if (this.peek == $EOF) {\n        this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n\n    var last: string = input.substring(marker, this.index);\n    this.advance();  // Skip terminating quote.\n\n    // Compute the unescaped string value.\n    var unescaped: string = last;\n    if (buffer != null) {\n      buffer.add(last);\n      unescaped = buffer.toString();\n    }\n    return newStringToken(start, unescaped);\n  }\n\n  error(message: string, offset: number) {\n    var position: number = this.index + offset;\n    throw new ScannerError(\n        `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n  }\n}\n\nfunction isWhitespace(code: number): boolean {\n  return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\n\nfunction isIdentifierStart(code: number): boolean {\n  return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);\n}\n\nexport function isIdentifier(input: string): boolean {\n  if (input.length == 0) return false;\n  var scanner = new _Scanner(input);\n  if (!isIdentifierStart(scanner.peek)) return false;\n  scanner.advance();\n  while (scanner.peek !== $EOF) {\n    if (!isIdentifierPart(scanner.peek)) return false;\n    scanner.advance();\n  }\n  return true;\n}\n\nfunction isIdentifierPart(code: number): boolean {\n  return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||\n         (code == $_) || (code == $$);\n}\n\nfunction isDigit(code: number): boolean {\n  return $0 <= code && code <= $9;\n}\n\nfunction isExponentStart(code: number): boolean {\n  return code == $e || code == $E;\n}\n\nfunction isExponentSign(code: number): boolean {\n  return code == $MINUS || code == $PLUS;\n}\n\nexport function isQuote(code: number): boolean {\n  return code === $SQ || code === $DQ || code === $BT;\n}\n\nfunction unescape(code: number): number {\n  switch (code) {\n    case $n:\n      return $LF;\n    case $f:\n      return $FF;\n    case $r:\n      return $CR;\n    case $t:\n      return $TAB;\n    case $v:\n      return $VTAB;\n    default:\n      return code;\n  }\n}\n\nvar OPERATORS = SetWrapper.createFromList([\n  '+',\n  '-',\n  '*',\n  '/',\n  '%',\n  '^',\n  '=',\n  '==',\n  '!=',\n  '===',\n  '!==',\n  '<',\n  '>',\n  '<=',\n  '>=',\n  '&&',\n  '||',\n  '&',\n  '|',\n  '!',\n  '?',\n  '#',\n  '?.'\n]);\n\n\nvar KEYWORDS =\n    SetWrapper.createFromList(['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else']);\n"]}