package cipherTestSuite

import (
	"bufio"
	"encoding/json"
	"log"
	"os"

	"github.com/skycoin/skycoin/src/cipher"
)

// InputData contains hashes to be signed
type InputData struct {
	Hashes []string `json:"hashes"`
}

// SeedData contains address, public key,  secret key and list of signatures
type SeedData struct {
	Address    string   `json:"address"`
	Secret     string   `json:"secret"`
	Public     string   `json:"public"`
	Signatures []string `json:"signatures"`
}

// SeedSignature contains data generated by Seed
type SeedSignature struct {
	Seed string      `json:"seed"`
	Keys []*SeedData `json:"keys"`
}

// ReadInputData reads hashes from a file with InputData
func ReadInputData(filename string) *InputData {
	var inpData InputData
	var err error
	f, err := os.Open(filename)
	if err != nil {
		log.Panicf("failed readInputData from file: %v. err: %v", filename, err)
	}
	reader := bufio.NewReader(f)
	err = json.NewDecoder(reader).Decode(&inpData)
	if err != nil {
		log.Panicf("failed decode inputData. err: %v", err)
	}
	return &inpData
}

// GenerateSecPubAddress generates address, public key and secret key by seed
func GenerateSecPubAddress(seed []byte) (cipher.SecKey, cipher.PubKey, cipher.Address) {
	secretKeys := cipher.GenerateDeterministicKeyPairs(seed, 1)
	publicKey := cipher.PubKeyFromSecKey(secretKeys[0])
	addr := cipher.AddressFromPubKey(publicKey)
	return secretKeys[0], publicKey, addr
}
