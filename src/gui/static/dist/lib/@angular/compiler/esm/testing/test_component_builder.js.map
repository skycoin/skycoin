{"version":3,"file":"test_component_builder.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/testing/test_component_builder.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  OpaqueToken,\n  ComponentRef,\n  ComponentFactory,\n  ComponentResolver,\n  Injector,\n  Injectable,\n  ViewMetadata,\n  ElementRef,\n  ChangeDetectorRef,\n  NgZone,\n  NgZoneError,\n  DebugElement,\n  getDebugNode\n} from '@angular/core';\nimport {DirectiveResolver, ViewResolver} from '../index';\n\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isPresent, isBlank, IS_DART, scheduleMicroTask} from '../src/facade/lang';\nimport {PromiseWrapper, ObservableWrapper, PromiseCompleter} from '../src/facade/async';\nimport {ListWrapper, MapWrapper} from '../src/facade/collection';\n\nimport {tick} from '@angular/core/testing';\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n */\nexport class TestComponentRenderer {\n  insertRootElement(rootElementId: string) {}\n}\n\nexport var ComponentFixtureAutoDetect = new OpaqueToken(\"ComponentFixtureAutoDetect\");\nexport var ComponentFixtureNoNgZone = new OpaqueToken(\"ComponentFixtureNoNgZone\");\n\n/**\n * Fixture for debugging and testing a component.\n */\nexport class ComponentFixture<T> {\n  /**\n   * The DebugElement associated with the root element of this component.\n   */\n  debugElement: DebugElement;\n\n  /**\n   * The instance of the root component class.\n   */\n  componentInstance: any;\n\n  /**\n   * The native element at the root of the component.\n   */\n  nativeElement: any;\n\n  /**\n   * The ElementRef for the element at the root of the component.\n   */\n  elementRef: ElementRef;\n\n  /**\n   * The ComponentRef for the component\n   */\n  componentRef: ComponentRef<T>;\n\n  /**\n   * The ChangeDetectorRef for the component\n   */\n  changeDetectorRef: ChangeDetectorRef;\n\n  /**\n   * The NgZone in which this component was instantiated.\n   */\n  ngZone: NgZone;\n\n  private _autoDetect: boolean;\n\n  private _isStable: boolean = true;\n  private _completer: PromiseCompleter<any> = null;\n  private _onUnstableSubscription = null;\n  private _onStableSubscription = null;\n  private _onMicrotaskEmptySubscription = null;\n  private _onErrorSubscription = null;\n\n  constructor(componentRef: ComponentRef<T>, ngZone: NgZone, autoDetect: boolean) {\n    this.changeDetectorRef = componentRef.changeDetectorRef;\n    this.elementRef = componentRef.location;\n    this.debugElement = <DebugElement>getDebugNode(this.elementRef.nativeElement);\n    this.componentInstance = componentRef.instance;\n    this.nativeElement = this.elementRef.nativeElement;\n    this.componentRef = componentRef;\n    this.ngZone = ngZone;\n    this._autoDetect = autoDetect;\n\n    if (ngZone != null) {\n      this._onUnstableSubscription =\n          ObservableWrapper.subscribe(ngZone.onUnstable, (_) => { this._isStable = false; });\n      this._onMicrotaskEmptySubscription =\n          ObservableWrapper.subscribe(ngZone.onMicrotaskEmpty, (_) => {\n            if (this._autoDetect) {\n              // Do a change detection run with checkNoChanges set to true to check\n              // there are no changes on the second run.\n              this.detectChanges(true);\n            }\n          });\n      this._onStableSubscription = ObservableWrapper.subscribe(ngZone.onStable, (_) => {\n        this._isStable = true;\n        // Check whether there are no pending macrotasks in a microtask so that ngZone gets a chance\n        // to update the state of pending macrotasks.\n        scheduleMicroTask(() => {\n          if (!this.ngZone.hasPendingMacrotasks) {\n            if (this._completer != null) {\n              this._completer.resolve(true);\n              this._completer = null;\n            }\n          }\n        });\n      });\n\n      this._onErrorSubscription = ObservableWrapper.subscribe(\n          ngZone.onError, (error: NgZoneError) => { throw error.error; });\n    }\n  }\n\n  private _tick(checkNoChanges: boolean) {\n    this.changeDetectorRef.detectChanges();\n    if (checkNoChanges) {\n      this.checkNoChanges();\n    }\n  }\n\n  /**\n   * Trigger a change detection cycle for the component.\n   */\n  detectChanges(checkNoChanges: boolean = true): void {\n    if (this.ngZone != null) {\n      // Run the change detection inside the NgZone so that any async tasks as part of the change\n      // detection are captured by the zone and can be waited for in isStable.\n      this.ngZone.run(() => { this._tick(checkNoChanges); });\n    } else {\n      // Running without zone. Just do the change detection.\n      this._tick(checkNoChanges);\n    }\n  }\n\n  /**\n   * Do a change detection run to make sure there were no changes.\n   */\n  checkNoChanges(): void { this.changeDetectorRef.checkNoChanges(); }\n\n  /**\n   * Set whether the fixture should autodetect changes.\n   *\n   * Also runs detectChanges once so that any existing change is detected.\n   */\n  autoDetectChanges(autoDetect: boolean = true) {\n    if (this.ngZone == null) {\n      throw new BaseException('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n    }\n    this._autoDetect = autoDetect;\n    this.detectChanges();\n  }\n\n  /**\n   * Return whether the fixture is currently stable or has async tasks that have not been completed\n   * yet.\n   */\n  isStable(): boolean { return this._isStable && !this.ngZone.hasPendingMacrotasks; }\n\n  /**\n   * Get a promise that resolves when the fixture is stable.\n   *\n   * This can be used to resume testing after events have triggered asynchronous activity or\n   * asynchronous change detection.\n   */\n  whenStable(): Promise<any> {\n    if (this.isStable()) {\n      return PromiseWrapper.resolve(false);\n    } else if (this._completer !== null) {\n      return this._completer.promise;\n    } else {\n      this._completer = new PromiseCompleter<any>();\n      return this._completer.promise;\n    }\n  }\n\n  /**\n   * Trigger component destruction.\n   */\n  destroy(): void {\n    this.componentRef.destroy();\n    if (this._onUnstableSubscription != null) {\n      ObservableWrapper.dispose(this._onUnstableSubscription);\n      this._onUnstableSubscription = null;\n    }\n    if (this._onStableSubscription != null) {\n      ObservableWrapper.dispose(this._onStableSubscription);\n      this._onStableSubscription = null;\n    }\n    if (this._onMicrotaskEmptySubscription != null) {\n      ObservableWrapper.dispose(this._onMicrotaskEmptySubscription);\n      this._onMicrotaskEmptySubscription = null;\n    }\n    if (this._onErrorSubscription != null) {\n      ObservableWrapper.dispose(this._onErrorSubscription);\n      this._onErrorSubscription = null;\n    }\n  }\n}\n\nvar _nextRootElementId = 0;\nexport class TestComponentBuilder {\n  /** @internal */\n  _bindingsOverrides = new Map<Type, any[]>();\n  /** @internal */\n  _directiveOverrides = new Map<Type, Map<Type, Type>>();\n  /** @internal */\n  _templateOverrides = new Map<Type, string>();\n  /** @internal */\n  _viewBindingsOverrides = new Map<Type, any[]>();\n  /** @internal */\n  _viewOverrides = new Map<Type, ViewMetadata>();\n\n\n  constructor(private _injector: Injector) {}\n\n  /** @internal */\n  _clone(): TestComponentBuilder {\n    let clone = new TestComponentBuilder(this._injector);\n    clone._viewOverrides = MapWrapper.clone(this._viewOverrides);\n    clone._directiveOverrides = MapWrapper.clone(this._directiveOverrides);\n    clone._templateOverrides = MapWrapper.clone(this._templateOverrides);\n    clone._bindingsOverrides = MapWrapper.clone(this._bindingsOverrides);\n    clone._viewBindingsOverrides = MapWrapper.clone(this._viewBindingsOverrides);\n    return clone;\n  }\n\n  /**\n   * Overrides only the html of a {@link ComponentMetadata}.\n   * All the other properties of the component's {@link ViewMetadata} are preserved.\n   *\n   * @param {Type} component\n   * @param {string} html\n   *\n   * @return {TestComponentBuilder}\n   */\n  overrideTemplate(componentType: Type, template: string): TestComponentBuilder {\n    let clone = this._clone();\n    clone._templateOverrides.set(componentType, template);\n    return clone;\n  }\n\n  /**\n   * Overrides a component's {@link ViewMetadata}.\n   *\n   * @param {Type} component\n   * @param {view} View\n   *\n   * @return {TestComponentBuilder}\n   */\n  overrideView(componentType: Type, view: ViewMetadata): TestComponentBuilder {\n    let clone = this._clone();\n    clone._viewOverrides.set(componentType, view);\n    return clone;\n  }\n\n  /**\n   * Overrides the directives from the component {@link ViewMetadata}.\n   *\n   * @param {Type} component\n   * @param {Type} from\n   * @param {Type} to\n   *\n   * @return {TestComponentBuilder}\n   */\n  overrideDirective(componentType: Type, from: Type, to: Type): TestComponentBuilder {\n    let clone = this._clone();\n    let overridesForComponent = clone._directiveOverrides.get(componentType);\n    if (!isPresent(overridesForComponent)) {\n      clone._directiveOverrides.set(componentType, new Map<Type, Type>());\n      overridesForComponent = clone._directiveOverrides.get(componentType);\n    }\n    overridesForComponent.set(from, to);\n    return clone;\n  }\n\n  /**\n   * Overrides one or more injectables configured via `providers` metadata property of a directive\n   * or\n   * component.\n   * Very useful when certain providers need to be mocked out.\n   *\n   * The providers specified via this method are appended to the existing `providers` causing the\n   * duplicated providers to\n   * be overridden.\n   *\n   * @param {Type} component\n   * @param {any[]} providers\n   *\n   * @return {TestComponentBuilder}\n   */\n  overrideProviders(type: Type, providers: any[]): TestComponentBuilder {\n    let clone = this._clone();\n    clone._bindingsOverrides.set(type, providers);\n    return clone;\n  }\n\n  /**\n   * @deprecated\n   */\n  overrideBindings(type: Type, providers: any[]): TestComponentBuilder {\n    return this.overrideProviders(type, providers);\n  }\n\n  /**\n   * Overrides one or more injectables configured via `providers` metadata property of a directive\n   * or\n   * component.\n   * Very useful when certain providers need to be mocked out.\n   *\n   * The providers specified via this method are appended to the existing `providers` causing the\n   * duplicated providers to\n   * be overridden.\n   *\n   * @param {Type} component\n   * @param {any[]} providers\n   *\n   * @return {TestComponentBuilder}\n   */\n  overrideViewProviders(type: Type, providers: any[]): TestComponentBuilder {\n    let clone = this._clone();\n    clone._viewBindingsOverrides.set(type, providers);\n    return clone;\n  }\n\n  /**\n   * @deprecated\n   */\n  overrideViewBindings(type: Type, providers: any[]): TestComponentBuilder {\n    return this.overrideViewProviders(type, providers);\n  }\n\n  private _create<C>(ngZone: NgZone, componentFactory: ComponentFactory<C>): ComponentFixture<C> {\n    let rootElId = `root${_nextRootElementId++}`;\n    var testComponentRenderer: TestComponentRenderer = this._injector.get(TestComponentRenderer);\n    testComponentRenderer.insertRootElement(rootElId);\n\n    var componentRef = componentFactory.create(this._injector, [], `#${rootElId}`);\n    let autoDetect: boolean = this._injector.get(ComponentFixtureAutoDetect, false);\n    return new ComponentFixture<any /*C*/>(componentRef, ngZone, autoDetect);\n  }\n\n  /**\n   * Builds and returns a ComponentFixture.\n   *\n   * @return {Promise<ComponentFixture>}\n   */\n  createAsync(rootComponentType: Type): Promise<ComponentFixture<any>> {\n    let noNgZone = IS_DART || this._injector.get(ComponentFixtureNoNgZone, false);\n    let ngZone: NgZone = noNgZone ? null : this._injector.get(NgZone, null);\n\n    let initComponent = () => {\n      let mockDirectiveResolver = this._injector.get(DirectiveResolver);\n      let mockViewResolver = this._injector.get(ViewResolver);\n      this._viewOverrides.forEach((view, type) => mockViewResolver.setView(type, view));\n      this._templateOverrides.forEach((template, type) =>\n                                          mockViewResolver.setInlineTemplate(type, template));\n      this._directiveOverrides.forEach((overrides, component) => {\n        overrides.forEach(\n            (to, from) => { mockViewResolver.overrideViewDirective(component, from, to); });\n      });\n      this._bindingsOverrides.forEach(\n          (bindings, type) => mockDirectiveResolver.setBindingsOverride(type, bindings));\n      this._viewBindingsOverrides.forEach(\n          (bindings, type) => mockDirectiveResolver.setViewBindingsOverride(type, bindings));\n\n      let promise: Promise<ComponentFactory<any>> =\n          this._injector.get(ComponentResolver).resolveComponent(rootComponentType);\n      return promise.then(componentFactory => this._create(ngZone, componentFactory));\n    };\n\n    return ngZone == null ? initComponent() : ngZone.run(initComponent);\n  }\n\n  createFakeAsync(rootComponentType: Type): ComponentFixture<any> {\n    let result;\n    let error;\n    PromiseWrapper.then(this.createAsync(rootComponentType), (_result) => { result = _result; },\n                        (_error) => { error = _error; });\n    tick();\n    if (isPresent(error)) {\n      throw error;\n    }\n    return result;\n  }\n\n  createSync<C>(componentFactory: ComponentFactory<C>): ComponentFixture<C> {\n    let noNgZone = IS_DART || this._injector.get(ComponentFixtureNoNgZone, false);\n    let ngZone: NgZone = noNgZone ? null : this._injector.get(NgZone, null);\n\n    let initComponent = () => this._create(ngZone, componentFactory);\n    return ngZone == null ? initComponent() : ngZone.run(initComponent);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n"]}