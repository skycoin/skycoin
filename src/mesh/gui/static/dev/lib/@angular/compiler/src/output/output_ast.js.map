{"version":3,"file":"output_ast.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/output_ast.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isString, isPresent, isBlank} from '../../src/facade/lang';\nimport {CompileIdentifierMetadata} from '../compile_metadata';\n\n//// Types\nexport enum TypeModifier {\n  Const\n}\n\nexport abstract class Type {\n  constructor(public modifiers: TypeModifier[] = null) {\n    if (isBlank(modifiers)) {\n      this.modifiers = [];\n    }\n  }\n  abstract visitType(visitor: TypeVisitor, context: any): any;\n\n  hasModifier(modifier: TypeModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n}\n\nexport enum BuiltinTypeName {\n  Dynamic,\n  Bool,\n  String,\n  Int,\n  Number,\n  Function\n}\n\nexport class BuiltinType extends Type {\n  constructor(public name: BuiltinTypeName, modifiers: TypeModifier[] = null) { super(modifiers); }\n  visitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitBuiltintType(this, context);\n  }\n}\n\nexport class ExternalType extends Type {\n  constructor(public value: CompileIdentifierMetadata, public typeParams: Type[] = null,\n              modifiers: TypeModifier[] = null) {\n    super(modifiers);\n  }\n  visitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitExternalType(this, context);\n  }\n}\n\n\nexport class ArrayType extends Type {\n  constructor(public of: Type, modifiers: TypeModifier[] = null) { super(modifiers); }\n  visitType(visitor: TypeVisitor, context: any): any {\n    return visitor.visitArrayType(this, context);\n  }\n}\n\n\nexport class MapType extends Type {\n  constructor(public valueType: Type, modifiers: TypeModifier[] = null) { super(modifiers); }\n  visitType(visitor: TypeVisitor, context: any): any { return visitor.visitMapType(this, context); }\n}\n\nexport var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nexport var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nexport var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nexport var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nexport var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nexport var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\n\n\nexport interface TypeVisitor {\n  visitBuiltintType(type: BuiltinType, context: any): any;\n  visitExternalType(type: ExternalType, context: any): any;\n  visitArrayType(type: ArrayType, context: any): any;\n  visitMapType(type: MapType, context: any): any;\n}\n\n///// Expressions\n\nexport enum BinaryOperator {\n  Equals,\n  NotEquals,\n  Identical,\n  NotIdentical,\n  Minus,\n  Plus,\n  Divide,\n  Multiply,\n  Modulo,\n  And,\n  Or,\n  Lower,\n  LowerEquals,\n  Bigger,\n  BiggerEquals\n}\n\n\nexport abstract class Expression {\n  constructor(public type: Type) {}\n\n  abstract visitExpression(visitor: ExpressionVisitor, context: any): any;\n\n  prop(name: string): ReadPropExpr { return new ReadPropExpr(this, name); }\n\n  key(index: Expression, type: Type = null): ReadKeyExpr {\n    return new ReadKeyExpr(this, index, type);\n  }\n\n  callMethod(name: string | BuiltinMethod, params: Expression[]): InvokeMethodExpr {\n    return new InvokeMethodExpr(this, name, params);\n  }\n\n  callFn(params: Expression[]): InvokeFunctionExpr { return new InvokeFunctionExpr(this, params); }\n\n  instantiate(params: Expression[], type: Type = null): InstantiateExpr {\n    return new InstantiateExpr(this, params, type);\n  }\n\n  conditional(trueCase: Expression, falseCase: Expression = null): ConditionalExpr {\n    return new ConditionalExpr(this, trueCase, falseCase);\n  }\n\n  equals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);\n  }\n  notEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);\n  }\n  identical(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);\n  }\n  notIdentical(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);\n  }\n  minus(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);\n  }\n  plus(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);\n  }\n  divide(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);\n  }\n  multiply(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);\n  }\n  modulo(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);\n  }\n  and(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);\n  }\n  or(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);\n  }\n  lower(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);\n  }\n  lowerEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);\n  }\n  bigger(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);\n  }\n  biggerEquals(rhs: Expression): BinaryOperatorExpr {\n    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);\n  }\n  isBlank(): Expression {\n    // Note: We use equals by purpose here to compare to null and undefined in JS.\n    return this.equals(NULL_EXPR);\n  }\n  cast(type: Type): Expression { return new CastExpr(this, type); }\n  toStmt(): Statement { return new ExpressionStatement(this); }\n}\n\nexport enum BuiltinVar {\n  This,\n  Super,\n  CatchError,\n  CatchStack\n}\n\nexport class ReadVarExpr extends Expression {\n  public name;\n  public builtin: BuiltinVar;\n\n  constructor(name: string | BuiltinVar, type: Type = null) {\n    super(type);\n    if (isString(name)) {\n      this.name = <string>name;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinVar>name;\n    }\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadVarExpr(this, context);\n  }\n\n  set(value: Expression): WriteVarExpr { return new WriteVarExpr(this.name, value); }\n}\n\n\nexport class WriteVarExpr extends Expression {\n  public value: Expression;\n  constructor(public name: string, value: Expression, type: Type = null) {\n    super(isPresent(type) ? type : value.type);\n    this.value = value;\n  }\n\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteVarExpr(this, context);\n  }\n\n  toDeclStmt(type: Type = null, modifiers: StmtModifier[] = null): DeclareVarStmt {\n    return new DeclareVarStmt(this.name, this.value, type, modifiers);\n  }\n}\n\n\nexport class WriteKeyExpr extends Expression {\n  public value: Expression;\n  constructor(public receiver: Expression, public index: Expression, value: Expression,\n              type: Type = null) {\n    super(isPresent(type) ? type : value.type);\n    this.value = value;\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWriteKeyExpr(this, context);\n  }\n}\n\n\nexport class WritePropExpr extends Expression {\n  public value: Expression;\n  constructor(public receiver: Expression, public name: string, value: Expression,\n              type: Type = null) {\n    super(isPresent(type) ? type : value.type);\n    this.value = value;\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitWritePropExpr(this, context);\n  }\n}\n\nexport enum BuiltinMethod {\n  ConcatArray,\n  SubscribeObservable,\n  bind\n}\n\nexport class InvokeMethodExpr extends Expression {\n  public name: string;\n  public builtin: BuiltinMethod;\n  constructor(public receiver: Expression, method: string | BuiltinMethod,\n              public args: Expression[], type: Type = null) {\n    super(type);\n    if (isString(method)) {\n      this.name = <string>method;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = <BuiltinMethod>method;\n    }\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeMethodExpr(this, context);\n  }\n}\n\n\nexport class InvokeFunctionExpr extends Expression {\n  constructor(public fn: Expression, public args: Expression[], type: Type = null) { super(type); }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInvokeFunctionExpr(this, context);\n  }\n}\n\n\nexport class InstantiateExpr extends Expression {\n  constructor(public classExpr: Expression, public args: Expression[], type?: Type) { super(type); }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitInstantiateExpr(this, context);\n  }\n}\n\n\nexport class LiteralExpr extends Expression {\n  constructor(public value: any, type: Type = null) { super(type); }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralExpr(this, context);\n  }\n}\n\n\nexport class ExternalExpr extends Expression {\n  constructor(public value: CompileIdentifierMetadata, type: Type = null,\n              public typeParams: Type[] = null) {\n    super(type);\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitExternalExpr(this, context);\n  }\n}\n\n\nexport class ConditionalExpr extends Expression {\n  public trueCase: Expression;\n  constructor(public condition: Expression, trueCase: Expression,\n              public falseCase: Expression = null, type: Type = null) {\n    super(isPresent(type) ? type : trueCase.type);\n    this.trueCase = trueCase;\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitConditionalExpr(this, context);\n  }\n}\n\n\nexport class NotExpr extends Expression {\n  constructor(public condition: Expression) { super(BOOL_TYPE); }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitNotExpr(this, context);\n  }\n}\n\nexport class CastExpr extends Expression {\n  constructor(public value: Expression, type: Type) { super(type); }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitCastExpr(this, context);\n  }\n}\n\n\nexport class FnParam {\n  constructor(public name: string, public type: Type = null) {}\n}\n\n\nexport class FunctionExpr extends Expression {\n  constructor(public params: FnParam[], public statements: Statement[], type: Type = null) {\n    super(type);\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitFunctionExpr(this, context);\n  }\n\n  toDeclStmt(name: string, modifiers: StmtModifier[] = null): DeclareFunctionStmt {\n    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);\n  }\n}\n\n\nexport class BinaryOperatorExpr extends Expression {\n  public lhs: Expression;\n  constructor(public operator: BinaryOperator, lhs: Expression, public rhs: Expression,\n              type: Type = null) {\n    super(isPresent(type) ? type : lhs.type);\n    this.lhs = lhs;\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitBinaryOperatorExpr(this, context);\n  }\n}\n\n\nexport class ReadPropExpr extends Expression {\n  constructor(public receiver: Expression, public name: string, type: Type = null) { super(type); }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadPropExpr(this, context);\n  }\n  set(value: Expression): WritePropExpr {\n    return new WritePropExpr(this.receiver, this.name, value);\n  }\n}\n\n\nexport class ReadKeyExpr extends Expression {\n  constructor(public receiver: Expression, public index: Expression, type: Type = null) {\n    super(type);\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitReadKeyExpr(this, context);\n  }\n  set(value: Expression): WriteKeyExpr {\n    return new WriteKeyExpr(this.receiver, this.index, value);\n  }\n}\n\n\nexport class LiteralArrayExpr extends Expression {\n  public entries: Expression[];\n  constructor(entries: Expression[], type: Type = null) {\n    super(type);\n    this.entries = entries;\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralArrayExpr(this, context);\n  }\n}\n\n\nexport class LiteralMapExpr extends Expression {\n  public valueType: Type = null;\n  constructor(public entries: Array<Array<string | Expression>>, type: MapType = null) {\n    super(type);\n    if (isPresent(type)) {\n      this.valueType = type.valueType;\n    }\n  }\n  visitExpression(visitor: ExpressionVisitor, context: any): any {\n    return visitor.visitLiteralMapExpr(this, context);\n  }\n}\n\nexport interface ExpressionVisitor {\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any;\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any;\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any;\n  visitWritePropExpr(expr: WritePropExpr, context: any): any;\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any;\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any;\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any;\n  visitLiteralExpr(ast: LiteralExpr, context: any): any;\n  visitExternalExpr(ast: ExternalExpr, context: any): any;\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any;\n  visitNotExpr(ast: NotExpr, context: any): any;\n  visitCastExpr(ast: CastExpr, context: any): any;\n  visitFunctionExpr(ast: FunctionExpr, context: any): any;\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any;\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any;\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any;\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any;\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any;\n}\n\nexport var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);\nexport var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);\nexport var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);\nexport var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);\nexport var NULL_EXPR = new LiteralExpr(null, null);\n\n//// Statements\nexport enum StmtModifier {\n  Final,\n  Private\n}\n\nexport abstract class Statement {\n  constructor(public modifiers: StmtModifier[] = null) {\n    if (isBlank(modifiers)) {\n      this.modifiers = [];\n    }\n  }\n\n  abstract visitStatement(visitor: StatementVisitor, context: any): any;\n\n  hasModifier(modifier: StmtModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n}\n\n\nexport class DeclareVarStmt extends Statement {\n  public type: Type;\n  constructor(public name: string, public value: Expression, type: Type = null,\n              modifiers: StmtModifier[] = null) {\n    super(modifiers);\n    this.type = isPresent(type) ? type : value.type;\n  }\n\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareVarStmt(this, context);\n  }\n}\n\nexport class DeclareFunctionStmt extends Statement {\n  constructor(public name: string, public params: FnParam[], public statements: Statement[],\n              public type: Type = null, modifiers: StmtModifier[] = null) {\n    super(modifiers);\n  }\n\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareFunctionStmt(this, context);\n  }\n}\n\nexport class ExpressionStatement extends Statement {\n  constructor(public expr: Expression) { super(); }\n\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitExpressionStmt(this, context);\n  }\n}\n\n\nexport class ReturnStatement extends Statement {\n  constructor(public value: Expression) { super(); }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitReturnStmt(this, context);\n  }\n}\n\nexport class AbstractClassPart {\n  constructor(public type: Type = null, public modifiers: StmtModifier[]) {\n    if (isBlank(modifiers)) {\n      this.modifiers = [];\n    }\n  }\n  hasModifier(modifier: StmtModifier): boolean { return this.modifiers.indexOf(modifier) !== -1; }\n}\n\nexport class ClassField extends AbstractClassPart {\n  constructor(public name: string, type: Type = null, modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n}\n\n\nexport class ClassMethod extends AbstractClassPart {\n  constructor(public name: string, public params: FnParam[], public body: Statement[],\n              type: Type = null, modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n}\n\n\nexport class ClassGetter extends AbstractClassPart {\n  constructor(public name: string, public body: Statement[], type: Type = null,\n              modifiers: StmtModifier[] = null) {\n    super(type, modifiers);\n  }\n}\n\n\nexport class ClassStmt extends Statement {\n  constructor(public name: string, public parent: Expression, public fields: ClassField[],\n              public getters: ClassGetter[], public constructorMethod: ClassMethod,\n              public methods: ClassMethod[], modifiers: StmtModifier[] = null) {\n    super(modifiers);\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitDeclareClassStmt(this, context);\n  }\n}\n\n\nexport class IfStmt extends Statement {\n  constructor(public condition: Expression, public trueCase: Statement[],\n              public falseCase: Statement[] = /*@ts2dart_const*/[]) {\n    super();\n  }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitIfStmt(this, context);\n  }\n}\n\n\nexport class CommentStmt extends Statement {\n  constructor(public comment: string) { super(); }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitCommentStmt(this, context);\n  }\n}\n\n\nexport class TryCatchStmt extends Statement {\n  constructor(public bodyStmts: Statement[], public catchStmts: Statement[]) { super(); }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitTryCatchStmt(this, context);\n  }\n}\n\n\nexport class ThrowStmt extends Statement {\n  constructor(public error: Expression) { super(); }\n  visitStatement(visitor: StatementVisitor, context: any): any {\n    return visitor.visitThrowStmt(this, context);\n  }\n}\n\nexport interface StatementVisitor {\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any;\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any;\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any;\n  visitReturnStmt(stmt: ReturnStatement, context: any): any;\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any;\n  visitIfStmt(stmt: IfStmt, context: any): any;\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any;\n  visitThrowStmt(stmt: ThrowStmt, context: any): any;\n  visitCommentStmt(stmt: CommentStmt, context: any): any;\n}\n\nexport class ExpressionTransformer implements StatementVisitor, ExpressionVisitor {\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any { return ast; }\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));\n  }\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    return new WriteKeyExpr(expr.receiver.visitExpression(this, context),\n                            expr.index.visitExpression(this, context),\n                            expr.value.visitExpression(this, context));\n  }\n  visitWritePropExpr(expr: WritePropExpr, context: any): any {\n    return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name,\n                             expr.value.visitExpression(this, context));\n  }\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    var method = isPresent(ast.builtin) ? ast.builtin : ast.name;\n    return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method,\n                                this.visitAllExpressions(ast.args, context), ast.type);\n  }\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    return new InvokeFunctionExpr(ast.fn.visitExpression(this, context),\n                                  this.visitAllExpressions(ast.args, context), ast.type);\n  }\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    return new InstantiateExpr(ast.classExpr.visitExpression(this, context),\n                               this.visitAllExpressions(ast.args, context), ast.type);\n  }\n  visitLiteralExpr(ast: LiteralExpr, context: any): any { return ast; }\n  visitExternalExpr(ast: ExternalExpr, context: any): any { return ast; }\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    return new ConditionalExpr(ast.condition.visitExpression(this, context),\n                               ast.trueCase.visitExpression(this, context),\n                               ast.falseCase.visitExpression(this, context));\n  }\n  visitNotExpr(ast: NotExpr, context: any): any {\n    return new NotExpr(ast.condition.visitExpression(this, context));\n  }\n  visitCastExpr(ast: CastExpr, context: any): any {\n    return new CastExpr(ast.value.visitExpression(this, context), context);\n  }\n  visitFunctionExpr(ast: FunctionExpr, context: any): any {\n    // Don't descend into nested functions\n    return ast;\n  }\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context),\n                                  ast.rhs.visitExpression(this, context), ast.type);\n  }\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);\n  }\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    return new ReadKeyExpr(ast.receiver.visitExpression(this, context),\n                           ast.index.visitExpression(this, context), ast.type);\n  }\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));\n  }\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    return new LiteralMapExpr(ast.entries.map(\n        (entry) => [entry[0], (<Expression>entry[1]).visitExpression(this, context)]));\n  }\n  visitAllExpressions(exprs: Expression[], context: any): Expression[] {\n    return exprs.map(expr => expr.visitExpression(this, context));\n  }\n\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type,\n                              stmt.modifiers);\n  }\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    return new ExpressionStatement(stmt.expr.visitExpression(this, context));\n  }\n  visitReturnStmt(stmt: ReturnStatement, context: any): any {\n    return new ReturnStatement(stmt.value.visitExpression(this, context));\n  }\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n  visitIfStmt(stmt: IfStmt, context: any): any {\n    return new IfStmt(stmt.condition.visitExpression(this, context),\n                      this.visitAllStatements(stmt.trueCase, context),\n                      this.visitAllStatements(stmt.falseCase, context));\n  }\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context),\n                            this.visitAllStatements(stmt.catchStmts, context));\n  }\n  visitThrowStmt(stmt: ThrowStmt, context: any): any {\n    return new ThrowStmt(stmt.error.visitExpression(this, context));\n  }\n  visitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n  visitAllStatements(stmts: Statement[], context: any): Statement[] {\n    return stmts.map(stmt => stmt.visitStatement(this, context));\n  }\n}\n\n\nexport class RecursiveExpressionVisitor implements StatementVisitor, ExpressionVisitor {\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any { return ast; }\n  visitWriteVarExpr(expr: WriteVarExpr, context: any): any {\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n  visitWriteKeyExpr(expr: WriteKeyExpr, context: any): any {\n    expr.receiver.visitExpression(this, context);\n    expr.index.visitExpression(this, context);\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n  visitWritePropExpr(expr: WritePropExpr, context: any): any {\n    expr.receiver.visitExpression(this, context);\n    expr.value.visitExpression(this, context);\n    return expr;\n  }\n  visitInvokeMethodExpr(ast: InvokeMethodExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n  visitInvokeFunctionExpr(ast: InvokeFunctionExpr, context: any): any {\n    ast.fn.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n  visitInstantiateExpr(ast: InstantiateExpr, context: any): any {\n    ast.classExpr.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return ast;\n  }\n  visitLiteralExpr(ast: LiteralExpr, context: any): any { return ast; }\n  visitExternalExpr(ast: ExternalExpr, context: any): any { return ast; }\n  visitConditionalExpr(ast: ConditionalExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    ast.trueCase.visitExpression(this, context);\n    ast.falseCase.visitExpression(this, context);\n    return ast;\n  }\n  visitNotExpr(ast: NotExpr, context: any): any {\n    ast.condition.visitExpression(this, context);\n    return ast;\n  }\n  visitCastExpr(ast: CastExpr, context: any): any {\n    ast.value.visitExpression(this, context);\n    return ast;\n  }\n  visitFunctionExpr(ast: FunctionExpr, context: any): any { return ast; }\n  visitBinaryOperatorExpr(ast: BinaryOperatorExpr, context: any): any {\n    ast.lhs.visitExpression(this, context);\n    ast.rhs.visitExpression(this, context);\n    return ast;\n  }\n  visitReadPropExpr(ast: ReadPropExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    return ast;\n  }\n  visitReadKeyExpr(ast: ReadKeyExpr, context: any): any {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    return ast;\n  }\n  visitLiteralArrayExpr(ast: LiteralArrayExpr, context: any): any {\n    this.visitAllExpressions(ast.entries, context);\n    return ast;\n  }\n  visitLiteralMapExpr(ast: LiteralMapExpr, context: any): any {\n    ast.entries.forEach((entry) => (<Expression>entry[1]).visitExpression(this, context));\n    return ast;\n  }\n  visitAllExpressions(exprs: Expression[], context: any): void {\n    exprs.forEach(expr => expr.visitExpression(this, context));\n  }\n\n  visitDeclareVarStmt(stmt: DeclareVarStmt, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n  visitDeclareFunctionStmt(stmt: DeclareFunctionStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n  visitExpressionStmt(stmt: ExpressionStatement, context: any): any {\n    stmt.expr.visitExpression(this, context);\n    return stmt;\n  }\n  visitReturnStmt(stmt: ReturnStatement, context: any): any {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n  visitDeclareClassStmt(stmt: ClassStmt, context: any): any {\n    // Don't descend into nested functions\n    return stmt;\n  }\n  visitIfStmt(stmt: IfStmt, context: any): any {\n    stmt.condition.visitExpression(this, context);\n    this.visitAllStatements(stmt.trueCase, context);\n    this.visitAllStatements(stmt.falseCase, context);\n    return stmt;\n  }\n  visitTryCatchStmt(stmt: TryCatchStmt, context: any): any {\n    this.visitAllStatements(stmt.bodyStmts, context);\n    this.visitAllStatements(stmt.catchStmts, context);\n    return stmt;\n  }\n  visitThrowStmt(stmt: ThrowStmt, context: any): any {\n    stmt.error.visitExpression(this, context);\n    return stmt;\n  }\n  visitCommentStmt(stmt: CommentStmt, context: any): any { return stmt; }\n  visitAllStatements(stmts: Statement[], context: any): void {\n    stmts.forEach(stmt => stmt.visitStatement(this, context));\n  }\n}\n\nexport function replaceVarInExpression(varName: string, newValue: Expression,\n                                       expression: Expression): Expression {\n  var transformer = new _ReplaceVariableTransformer(varName, newValue);\n  return expression.visitExpression(transformer, null);\n}\n\nclass _ReplaceVariableTransformer extends ExpressionTransformer {\n  constructor(private _varName: string, private _newValue: Expression) { super(); }\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    return ast.name == this._varName ? this._newValue : ast;\n  }\n}\n\nexport function findReadVarNames(stmts: Statement[]): Set<string> {\n  var finder = new _VariableFinder();\n  finder.visitAllStatements(stmts, null);\n  return finder.varNames;\n}\n\nclass _VariableFinder extends RecursiveExpressionVisitor {\n  varNames = new Set<string>();\n  visitReadVarExpr(ast: ReadVarExpr, context: any): any {\n    this.varNames.add(ast.name);\n    return null;\n  }\n}\n\nexport function variable(name: string, type: Type = null): ReadVarExpr {\n  return new ReadVarExpr(name, type);\n}\n\nexport function importExpr(id: CompileIdentifierMetadata, typeParams: Type[] = null): ExternalExpr {\n  return new ExternalExpr(id, null, typeParams);\n}\n\nexport function importType(id: CompileIdentifierMetadata, typeParams: Type[] = null,\n                           typeModifiers: TypeModifier[] = null): ExternalType {\n  return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;\n}\n\nexport function literal(value: any, type: Type = null): LiteralExpr {\n  return new LiteralExpr(value, type);\n}\n\nexport function literalArr(values: Expression[], type: Type = null): LiteralArrayExpr {\n  return new LiteralArrayExpr(values, type);\n}\n\nexport function literalMap(values: Array<Array<string | Expression>>,\n                           type: MapType = null): LiteralMapExpr {\n  return new LiteralMapExpr(values, type);\n}\n\nexport function not(expr: Expression): NotExpr {\n  return new NotExpr(expr);\n}\n\nexport function fn(params: FnParam[], body: Statement[], type: Type = null): FunctionExpr {\n  return new FunctionExpr(params, body, type);\n}\n"]}