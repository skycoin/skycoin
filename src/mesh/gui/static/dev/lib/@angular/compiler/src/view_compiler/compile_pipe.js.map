{"version":3,"file":"compile_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isBlank, isPresent} from '../facade/lang';\nimport {BaseException} from '../facade/exceptions';\nimport * as o from '../output/output_ast';\nimport {CompileView} from './compile_view';\nimport {CompilePipeMetadata} from '../compile_metadata';\nimport {Identifiers, identifierToken} from '../identifiers';\nimport {injectFromViewParentInjector, createPureProxy, getPropertyInView} from './util';\n\nclass _PurePipeProxy {\n  constructor(public view: CompileView, public instance: o.ReadPropExpr, public argCount: number) {}\n}\n\nexport class CompilePipe {\n  static call(view: CompileView, name: string, args: o.Expression[]): o.Expression {\n    var compView = view.componentView;\n    var meta = _findPipeMeta(compView, name);\n    var pipe: CompilePipe;\n    if (meta.pure) {\n      // pure pipes live on the component view\n      pipe = compView.purePipes.get(name);\n      if (isBlank(pipe)) {\n        pipe = new CompilePipe(compView, meta);\n        compView.purePipes.set(name, pipe);\n        compView.pipes.push(pipe);\n      }\n    } else {\n      // Non pure pipes live on the view that called it\n      pipe = new CompilePipe(view, meta);\n      view.pipes.push(pipe);\n    }\n    return pipe._call(view, args);\n  }\n\n  instance: o.ReadPropExpr;\n  private _purePipeProxies: _PurePipeProxy[] = [];\n\n  constructor(public view: CompileView, public meta: CompilePipeMetadata) {\n    this.instance = o.THIS_EXPR.prop(`_pipe_${meta.name}_${view.pipeCount++}`);\n  }\n\n  get pure(): boolean { return this.meta.pure; }\n\n  create(): void {\n    var deps = this.meta.type.diDeps.map((diDep) => {\n      if (diDep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef))) {\n        return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n      }\n      return injectFromViewParentInjector(diDep.token, false);\n    });\n    this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));\n    this.view.createMethod.resetDebugInfo(null, null);\n    this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name)\n                                       .set(o.importExpr(this.meta.type).instantiate(deps))\n                                       .toStmt());\n    this._purePipeProxies.forEach((purePipeProxy) => {\n      var pipeInstanceSeenFromPureProxy =\n          getPropertyInView(this.instance, purePipeProxy.view, this.view);\n      createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')\n                          .callMethod(o.BuiltinMethod.bind, [pipeInstanceSeenFromPureProxy]),\n                      purePipeProxy.argCount, purePipeProxy.instance, purePipeProxy.view);\n    });\n  }\n\n  private _call(callingView: CompileView, args: o.Expression[]): o.Expression {\n    if (this.meta.pure) {\n      // PurePipeProxies live on the view that called them.\n      var purePipeProxy = new _PurePipeProxy(\n          callingView, o.THIS_EXPR.prop(`${this.instance.name}_${this._purePipeProxies.length}`),\n          args.length);\n      this._purePipeProxies.push(purePipeProxy);\n      return o.importExpr(Identifiers.castByValue)\n          .callFn([\n            purePipeProxy.instance,\n            getPropertyInView(this.instance.prop('transform'), callingView, this.view)\n          ])\n          .callFn(args);\n    } else {\n      return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);\n    }\n  }\n}\n\nfunction _findPipeMeta(view: CompileView, name: string): CompilePipeMetadata {\n  var pipeMeta: CompilePipeMetadata = null;\n  for (var i = view.pipeMetas.length - 1; i >= 0; i--) {\n    var localPipeMeta = view.pipeMetas[i];\n    if (localPipeMeta.name == name) {\n      pipeMeta = localPipeMeta;\n      break;\n    }\n  }\n  if (isBlank(pipeMeta)) {\n    throw new BaseException(\n        `Illegal state: Could not find pipe ${name} although the parser should have detected this error!`);\n  }\n  return pipeMeta;\n}\n"]}