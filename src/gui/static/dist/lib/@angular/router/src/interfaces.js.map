{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {RouteSegment, Tree, RouteTree} from './segments';\n\n/**\n * Defines route lifecycle method `routerOnActivate`, which is called by the router at the end of a\n * successful route navigation.\n *\n * The `routerOnActivate` hook is called with the current and previous {@link RouteSegment}s of the\n * component and with the corresponding route trees.\n */\nexport interface OnActivate {\n  routerOnActivate(curr: RouteSegment, prev?: RouteSegment, currTree?: RouteTree,\n                   prevTree?: RouteTree): void;\n}\n\n/**\n * Defines route lifecycle method `routerOnDeactivate`, which is called by the router before\n * destroying a component as part of a route change.\n *\n * The `routerOnDeactivate` hook is called with two {@link RouteTree}s, representing the current\n * and the future state of the application.\n *\n * `routerOnDeactivate` must return a promise. The route change will wait until the promise settles.\n */\nexport interface CanDeactivate {\n  routerCanDeactivate(currTree?: RouteTree, futureTree?: RouteTree): Promise<boolean>;\n}"]}