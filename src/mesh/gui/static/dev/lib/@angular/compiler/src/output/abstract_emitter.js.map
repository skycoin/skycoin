{"version":3,"file":"abstract_emitter.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/abstract_emitter.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent, isBlank, isString, StringWrapper} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport * as o from './output_ast';\n\nvar _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nexport var CATCH_ERROR_VAR = o.variable('error');\nexport var CATCH_STACK_VAR = o.variable('stack');\n\nexport abstract class OutputEmitter {\n  abstract emitStatements(moduleUrl: string, stmts: o.Statement[], exportedVars: string[]): string;\n}\n\nclass _EmittedLine {\n  parts: string[] = [];\n  constructor(public indent: number) {}\n}\n\nexport class EmitterVisitorContext {\n  static createRoot(exportedVars: string[]): EmitterVisitorContext {\n    return new EmitterVisitorContext(exportedVars, 0);\n  }\n\n  private _lines: _EmittedLine[];\n  private _classes: o.ClassStmt[] = [];\n\n  constructor(private _exportedVars: string[], private _indent: number) {\n    this._lines = [new _EmittedLine(_indent)];\n  }\n\n  private get _currentLine(): _EmittedLine { return this._lines[this._lines.length - 1]; }\n\n  isExportedVar(varName: string): boolean { return this._exportedVars.indexOf(varName) !== -1; }\n\n  println(lastPart: string = ''): void { this.print(lastPart, true); }\n\n  lineIsEmpty(): boolean { return this._currentLine.parts.length === 0; }\n\n  print(part: string, newLine: boolean = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n    }\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n\n  removeEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n\n  incIndent() {\n    this._indent++;\n    this._currentLine.indent = this._indent;\n  }\n\n  decIndent() {\n    this._indent--;\n    this._currentLine.indent = this._indent;\n  }\n\n  pushClass(clazz: o.ClassStmt) { this._classes.push(clazz); }\n\n  popClass(): o.ClassStmt { return this._classes.pop(); }\n\n  get currentClass(): o.ClassStmt {\n    return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n  }\n\n  toSource(): any {\n    var lines = this._lines;\n    if (lines[lines.length - 1].parts.length === 0) {\n      lines = lines.slice(0, lines.length - 1);\n    }\n    return lines.map((line) => {\n                  if (line.parts.length > 0) {\n                    return _createIndent(line.indent) + line.parts.join('');\n                  } else {\n                    return '';\n                  }\n                })\n        .join('\\n');\n  }\n}\n\nexport abstract class AbstractEmitterVisitor implements o.StatementVisitor, o.ExpressionVisitor {\n  constructor(private _escapeDollarInStrings: boolean) {}\n\n  visitExpressionStmt(stmt: o.ExpressionStatement, ctx: EmitterVisitorContext): any {\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(';');\n    return null;\n  }\n\n  visitReturnStmt(stmt: o.ReturnStatement, ctx: EmitterVisitorContext): any {\n    ctx.print(`return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(';');\n    return null;\n  }\n\n  abstract visitCastExpr(ast: o.CastExpr, context: any): any;\n\n  abstract visitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext): any;\n\n  visitIfStmt(stmt: o.IfStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(`if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(`) {`);\n    var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n      if (hasElseCase) {\n        ctx.println(`} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n    ctx.println(`}`);\n    return null;\n  }\n\n  abstract visitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext): any;\n\n  visitThrowStmt(stmt: o.ThrowStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(`throw `);\n    stmt.error.visitExpression(this, ctx);\n    ctx.println(`;`);\n    return null;\n  }\n  visitCommentStmt(stmt: o.CommentStmt, ctx: EmitterVisitorContext): any {\n    var lines = stmt.comment.split('\\n');\n    lines.forEach((line) => { ctx.println(`// ${line}`); });\n    return null;\n  }\n  abstract visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any;\n  visitWriteVarExpr(expr: o.WriteVarExpr, ctx: EmitterVisitorContext): any {\n    var lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    ctx.print(`${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n  visitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: EmitterVisitorContext): any {\n    var lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(`[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(`] = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n  visitWritePropExpr(expr: o.WritePropExpr, ctx: EmitterVisitorContext): any {\n    var lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(`.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n  visitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: EmitterVisitorContext): any {\n    expr.receiver.visitExpression(this, ctx);\n    var name = expr.name;\n    if (isPresent(expr.builtin)) {\n      name = this.getBuiltinMethodName(expr.builtin);\n      if (isBlank(name)) {\n        // some builtins just mean to skip the call.\n        // e.g. `bind` in Dart.\n        return null;\n      }\n    }\n    ctx.print(`.${name}(`);\n    this.visitAllExpressions(expr.args, ctx, `,`);\n    ctx.print(`)`);\n    return null;\n  }\n\n  abstract getBuiltinMethodName(method: o.BuiltinMethod): string;\n\n  visitInvokeFunctionExpr(expr: o.InvokeFunctionExpr, ctx: EmitterVisitorContext): any {\n    expr.fn.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(`)`);\n    return null;\n  }\n  visitReadVarExpr(ast: o.ReadVarExpr, ctx: EmitterVisitorContext): any {\n    var varName = ast.name;\n    if (isPresent(ast.builtin)) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          varName = 'super';\n          break;\n        case o.BuiltinVar.This:\n          varName = 'this';\n          break;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR.name;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR.name;\n          break;\n        default:\n          throw new BaseException(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    ctx.print(varName);\n    return null;\n  }\n  visitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(`)`);\n    return null;\n  }\n  visitLiteralExpr(ast: o.LiteralExpr, ctx: EmitterVisitorContext): any {\n    var value = ast.value;\n    if (isString(value)) {\n      ctx.print(escapeSingleQuoteString(value, this._escapeDollarInStrings));\n    } else if (isBlank(value)) {\n      ctx.print('null');\n    } else {\n      ctx.print(`${value}`);\n    }\n    return null;\n  }\n\n  abstract visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any;\n\n  visitConditionalExpr(ast: o.ConditionalExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print('? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(': ');\n    ast.falseCase.visitExpression(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n  visitNotExpr(ast: o.NotExpr, ctx: EmitterVisitorContext): any {\n    ctx.print('!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n  abstract visitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext): any;\n  abstract visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, context: any): any;\n\n  visitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any {\n    var opStr;\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        opStr = '==';\n        break;\n      case o.BinaryOperator.Identical:\n        opStr = '===';\n        break;\n      case o.BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n      case o.BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n      case o.BinaryOperator.And:\n        opStr = '&&';\n        break;\n      case o.BinaryOperator.Or:\n        opStr = '||';\n        break;\n      case o.BinaryOperator.Plus:\n        opStr = '+';\n        break;\n      case o.BinaryOperator.Minus:\n        opStr = '-';\n        break;\n      case o.BinaryOperator.Divide:\n        opStr = '/';\n        break;\n      case o.BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n      case o.BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n      case o.BinaryOperator.Lower:\n        opStr = '<';\n        break;\n      case o.BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n      case o.BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n      case o.BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n      default:\n        throw new BaseException(`Unknown operator ${ast.operator}`);\n    }\n    ctx.print(`(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n\n  visitReadPropExpr(ast: o.ReadPropExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(`.`);\n    ctx.print(ast.name);\n    return null;\n  }\n  visitReadKeyExpr(ast: o.ReadKeyExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(`[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(`]`);\n    return null;\n  }\n  visitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any {\n    var useNewLine = ast.entries.length > 1;\n    ctx.print(`[`, useNewLine);\n    ctx.incIndent();\n    this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(`]`, useNewLine);\n    return null;\n  }\n  visitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any {\n    var useNewLine = ast.entries.length > 1;\n    ctx.print(`{`, useNewLine);\n    ctx.incIndent();\n    this.visitAllObjects((entry) => {\n      ctx.print(`${escapeSingleQuoteString(entry[0], this._escapeDollarInStrings)}: `);\n      entry[1].visitExpression(this, ctx);\n    }, ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(`}`, useNewLine);\n    return null;\n  }\n\n  visitAllExpressions(expressions: o.Expression[], ctx: EmitterVisitorContext, separator: string,\n                      newLine: boolean = false): void {\n    this.visitAllObjects((expr) => expr.visitExpression(this, ctx), expressions, ctx, separator,\n                         newLine);\n  }\n\n  visitAllObjects(handler: Function, expressions: any, ctx: EmitterVisitorContext,\n                  separator: string, newLine: boolean = false): void {\n    for (var i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        ctx.print(separator, newLine);\n      }\n      handler(expressions[i]);\n    }\n    if (newLine) {\n      ctx.println();\n    }\n  }\n\n  visitAllStatements(statements: o.Statement[], ctx: EmitterVisitorContext): void {\n    statements.forEach((stmt) => { return stmt.visitStatement(this, ctx); });\n  }\n}\n\nexport function escapeSingleQuoteString(input: string, escapeDollar: boolean): any {\n  if (isBlank(input)) {\n    return null;\n  }\n  var body = StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, (match) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  return `'${body}'`;\n}\n\nfunction _createIndent(count: number): string {\n  var res = '';\n  for (var i = 0; i < count; i++) {\n    res += '  ';\n  }\n  return res;\n}\n"]}