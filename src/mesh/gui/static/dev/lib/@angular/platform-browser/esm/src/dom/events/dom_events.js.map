{"version":3,"file":"dom_events.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/dom/events/dom_events.ts"],"names":[],"mappings":"OAIS,EAAC,UAAU,EAAC,MAAM,eAAe;OAEnC,EAAC,MAAM,EAAC,MAAM,gBAAgB;OAC9B,EAAC,kBAAkB,EAAC,MAAM,iBAAiB;AAClD,qCAAqC,kBAAkB;IACrD,8EAA8E;IAC9E,UAAU;IACV,QAAQ,CAAC,SAAiB,IAAa,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAErD,gBAAgB,CAAC,OAAoB,EAAE,SAAiB,EAAE,OAAiB;QACzE,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,cAAc,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAC3C,MAAM,MAAM,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,sBAAsB,CAAC,MAAc,EAAE,SAAiB,EAAE,OAAiB;QACzE,IAAI,OAAO,GAAG,MAAM,EAAE,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,cAAc,GAAG,CAAC,KAAK,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAC3C,MAAM,MAAM,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;IACtE,CAAC;AAIH,CAAC;AAHM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CACA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Injectable} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean { return true; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var zone = this.manager.getZone();\n    var outsideHandler = (event) => zone.runGuarded(() => handler(event));\n    return this.manager.getZone().runOutsideAngular(\n        () => getDOM().onAndCancel(element, eventName, outsideHandler));\n  }\n\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    var element = getDOM().getGlobalEventTarget(target);\n    var zone = this.manager.getZone();\n    var outsideHandler = (event) => zone.runGuarded(() => handler(event));\n    return this.manager.getZone().runOutsideAngular(\n        () => getDOM().onAndCancel(element, eventName, outsideHandler));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n"]}