{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/render/api.ts"],"names":[],"mappings":";AAIE,2BAA4B,6BAA6B,CAAC,CAAA;AAI5D;IACE,6BAAmB,EAAU,EAAS,WAAmB,EAAS,SAAiB,EAChE,aAAgC,EAAS,MAA6B;QADtE,OAAE,GAAF,EAAE,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAQ;QAChE,kBAAa,GAAb,aAAa,CAAmB;QAAS,WAAM,GAAN,MAAM,CAAuB;IAAG,CAAC;IAC/F,0BAAC;AAAD,CAAC,AAHD,IAGC;AAHY,2BAAmB,sBAG/B,CAAA;AAED;IAAA;IAOA,CAAC;IANC,sBAAI,qCAAQ;aAAZ,cAA2B,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACpD,sBAAI,sCAAS;aAAb,cAAuB,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAChD,sBAAI,2CAAc;aAAlB,cAA8B,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACvD,sBAAI,uCAAU;aAAd,cAAyC,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAClE,sBAAI,oCAAO;aAAX,cAAqB,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC9C,sBAAI,mCAAM;aAAV,cAAuB,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAClD,sBAAC;AAAD,CAAC,AAPD,IAOC;AAPqB,uBAAe,kBAOpC,CAAA;AAED;IAAA;IAyCA,CAAC;IAAD,eAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCqB,gBAAQ,WAyC7B,CAAA;AAED;;;;;;;;;;;GAWG;AAEH;IAAA;IAEA,CAAC;IAAD,mBAAC;AAAD,CAAC,AAFD,IAEC;AAFqB,oBAAY,eAEjC,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {unimplemented} from '../../src/facade/exceptions';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {Injector} from '../di/injector';\n\nexport class RenderComponentType {\n  constructor(public id: string, public templateUrl: string, public slotCount: number,\n              public encapsulation: ViewEncapsulation, public styles: Array<string | any[]>) {}\n}\n\nexport abstract class RenderDebugInfo {\n  get injector(): Injector { return unimplemented(); }\n  get component(): any { return unimplemented(); }\n  get providerTokens(): any[] { return unimplemented(); }\n  get references(): {[key: string]: any} { return unimplemented(); }\n  get context(): any { return unimplemented(); }\n  get source(): string { return unimplemented(); }\n}\n\nexport abstract class Renderer {\n  abstract selectRootElement(selectorOrNode: string | any, debugInfo: RenderDebugInfo): any;\n\n  abstract createElement(parentElement: any, name: string, debugInfo: RenderDebugInfo): any;\n\n  abstract createViewRoot(hostElement: any): any;\n\n  abstract createTemplateAnchor(parentElement: any, debugInfo: RenderDebugInfo): any;\n\n  abstract createText(parentElement: any, value: string, debugInfo: RenderDebugInfo): any;\n\n  abstract projectNodes(parentElement: any, nodes: any[]): void;\n\n  abstract attachViewAfter(node: any, viewRootNodes: any[]): void;\n\n  abstract detachView(viewRootNodes: any[]): void;\n\n  abstract destroyView(hostElement: any, viewAllNodes: any[]): void;\n\n  abstract listen(renderElement: any, name: string, callback: Function): Function;\n\n  abstract listenGlobal(target: string, name: string, callback: Function): Function;\n\n  abstract setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n\n  abstract setElementAttribute(renderElement: any, attributeName: string,\n                               attributeValue: string): void;\n\n  /**\n   * Used only in debug mode to serialize property changes to dom nodes as attributes.\n   */\n  abstract setBindingDebugInfo(renderElement: any, propertyName: string,\n                               propertyValue: string): void;\n\n  abstract setElementClass(renderElement: any, className: string, isAdd: boolean);\n\n  abstract setElementStyle(renderElement: any, styleName: string, styleValue: string);\n\n  abstract invokeElementMethod(renderElement: any, methodName: string, args: any[]);\n\n  abstract setText(renderNode: any, text: string);\n}\n\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}\n * respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n */\n\nexport abstract class RootRenderer {\n  abstract renderComponent(componentType: RenderComponentType): Renderer;\n}\n"]}