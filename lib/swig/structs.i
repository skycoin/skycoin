typedef struct{
} encrypt__Sha256Xor;

typedef struct{
    GoInt_ N;
    GoInt_ R;
    GoInt_ P;
    GoInt_ KeyLen;
} encrypt__ScryptChacha20poly1305;

typedef struct{
    GoUint32_  n[10];
} secp256k1go__Field;


typedef GoUint8_ cipher__PubKey[33];

typedef GoUint8_ cipher__Ripemd160[20];

typedef GoUint8_ cipher__SecKey[32];

typedef GoUint8_ cipher__Sig[65];

typedef GoUint8_ cipher__SHA256[32];

typedef GoUint8_  cipher__Checksum[4];

typedef struct{
	GoUint8 data[33];
} cipher_PubKey;

typedef struct{
	GoUint8 data[32];
} cipher_SecKey;

typedef struct{
	GoUint8 data[20];
} cipher_Ripemd160;

typedef struct{
	GoUint8 data[65];
} cipher_Sig;

typedef struct{
	GoUint8 data[32];
} cipher_SHA256;

typedef struct{
	GoUint8 data[4];
} cipher_Checksum;

typedef struct{
	cipher_SecKey data[MAX_ARRAY_LENGTH_WRAP];
	int count;
} cipher_SecKeys;

typedef struct{
	cipher_PubKey data[MAX_ARRAY_LENGTH_WRAP];
	int count;
} cipher_PubKeys;

typedef struct {
	cipher__Address Address;    ///< Wallet address.
	cipher__PubKey  Public;     ///< Public key used to generate address.
	cipher__SecKey  Secret;     ///< Secret key used to generate address.
} wallet__Entry;


typedef struct{
    GoUint8_ Version;      ///< Address version identifier.
						   ///< Used to differentiate testnet
                           ///< vs mainnet addresses, for ins
    cipher__Ripemd160 Key; ///< Address hash identifier.
} cipher__Address;



typedef struct{
    GoUint64_ Coins;
    GoUint64_ Hours;
} wallet__Balance;

typedef struct{
    wallet__Balance Confirmed;
    wallet__Balance Predicted;
} wallet__BalancePair;

typedef struct{
    GoInt_ N;
    BOOL IncludeDistribution;
} api__RichlistParams;

typedef struct{
} cli__PasswordFromTerm;

typedef struct{
    secp256k1go__Field X;
    secp256k1go__Field Y;
    secp256k1go__Field Z;
    BOOL Infinity;
} secp256k1go__XYZ;

typedef struct{
    secp256k1go__Field X;
    secp256k1go__Field Y;
    BOOL Infinity;
} secp256k1go__XY;

typedef struct{
    cipher__Address Address;  ///< Receipient address.
    GoUint64_ Coins;		  ///< Amount sent to the receipient address.
    GoUint64_ Hours;          ///< Amount of Coin Hours sent to the receipient address.
} coin__TransactionOutput;

typedef struct {
	cipher__SHA256   Hash;     ///< Hash of underlying UxOut.
	GoInt64_ BkSeq;           ///< Block height corresponding to the
                            ///< moment balance calculation is performed at.
	cipher__Address  Address;  ///< Account holder address.
	GoInt64_ Coins;           ///< Coins amount (e.g. in SKY).
	GoInt64_ Hours;           ///< Balance of Coin Hours generated by underlying UxOut, depending on UxOut's head time.
} wallet__UxBalance;

/*
//Requires typemap, contains GoString_
typedef struct{
    GoString_ UxID;
    GoString_ Address;
    GoString_ Coins;
    GoString_ Hours;
} api__CreatedTransactionOutput;

typedef struct{
    GoString_ UxID;
    GoString_ Address;
    GoString_ Coins;
    GoString_ Hours;
    GoString_ CalculatedHours;
    GoUint64_ Time;
    GoUint64_ Block;
    GoString_ TxID;
} api__CreatedTransactionInput;

*/
/*
typedef struct {
	BOOL 		neg;
	GoSlice_ 	nat;
} Number;

typedef struct {
	Number R;
	Number S;
} Signature;
*/
/*

//Contain slices. Should be Handle

typedef struct{
    visor__ReadableOutputSet Outputs;
} webrpc__OutputsResult;


typedef struct{
    cli__Balance Confirmed;
    cli__Balance Spendable;
    cli__Balance Expected;
    GoSlice_  Addresses;
} cli__BalanceResult;

typedef struct{
    wallet__BalancePair * Balance;
    visor__ReadableTransaction * Transaction;
    GoString_ Error;
} api__SpendResult;

typedef struct{
    api__CreatedTransaction Transaction;
    GoString_ EncodedTransaction;
} api__CreateTransactionResponse;

typedef struct{
    GoSlice_  Blocks;
} visor__ReadableBlocks;

typedef GoSlice_  coin__Transactions;

typedef struct{
    coin__Transactions Transactions;
} coin__BlockBody;

typedef struct{
    GoUint32_ Version;
    GoUint64_ Time;
    GoUint64_ BkSeq;
    GoUint64_ Fee;
    cipher__SHA256 PrevHash;
    cipher__SHA256 BodyHash;
    cipher__SHA256 UxHash;
} coin__BlockHeader;


typedef struct{
    coin__BlockHeader Head;
    coin__BlockBody Body;
} coin__Block;

typedef struct{
    coin__Block _unnamed;
    cipher__Sig Sig;
} coin__SignedBlock;

typedef struct {
	GoInt32_ Length;              ///< Current transaction's length expressed in bytes.
	GoInt8_  Type;                ///< Transaction's version. When a node tries to process a transaction, it must verify whether it supports the transaction's type. This is intended to provide a way to update skycoin clients and servers without crashing the network. If the transaction is not compatible with the node, it should not process it.
	cipher__SHA256  InnerHash;    ///< It's a SHA256 hash of the inputs and outputs of the transaction. It is used to protect against transaction mutability. This means that the transaction cannot be altered after its creation.

	GoSlice_ Sigs;                ///< A list of digital signiatures generated by the skycoin client using the private key. It is used by Skycoin servers to verify the authenticy of the transaction. Each input requires a different signature.
	GoSlice_ In;                  ///< A list of references to unspent transaction outputs. Unlike other cryptocurrencies, such as Bitcoin, Skycoin unspent transaction outputs (UX) and Skycoin transactions (TX) are separated in the blockchain protocol, allowing for lighter transactions, thus reducing the broadcasting costs across the network.
	GoSlice_ Out;                 ///< Outputs: A list of outputs created by the client, that will be recorded in the blockchain if transactions are confirmed. An output consists of a data structure representing an UTXT, which is composed by a Skycoin address to be sent to, the amount in Skycoin to be sent, and the amount of Coin Hours to be sent, and the SHA256 hash of the previous fields.
} coin__Transaction;

typedef struct{
    GoUint32_ Length;
    GoUint8_ Type;
    GoString_ TxID;
    GoString_ InnerHash;
    GoString_ Fee;
    GoSlice_  Sigs;
    GoSlice_  In;
    GoSlice_  Out;
} api__CreatedTransaction;

typedef struct{
    api__CreatedTransaction Transaction;
    GoString_ EncodedTransaction;
} api__CreateTransactionResponse;

typedef struct{
    coin__Transactions Txns;
    GoSlice_  Fees;
    GoSlice_  Hashes;
} coin__SortableTransactions;

//Should be Handle
typedef struct{
    daemon__TransactionResult * Transaction;
} webrpc__TxnResult;

*/

