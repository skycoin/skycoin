{"version":3,"file":"view_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  Injectable,\n  ViewMetadata,\n  ComponentMetadata,\n  reflector,\n} from '@angular/core';\n\nimport {ReflectorReader} from '../core_private';\n\nimport {Type, stringify, isBlank, isPresent} from '../src/facade/lang';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Map} from '../src/facade/collection';\nexport class ViewResolver {\n  private _reflector: ReflectorReader;\n\n  /** @internal */\n  _cache = new Map<Type, ViewMetadata>();\n\n  constructor(_reflector?: ReflectorReader) {\n    if (isPresent(_reflector)) {\n      this._reflector = _reflector;\n    } else {\n      this._reflector = reflector;\n    }\n  }\n\n  resolve(component: Type): ViewMetadata {\n    var view = this._cache.get(component);\n\n    if (isBlank(view)) {\n      view = this._resolve(component);\n      this._cache.set(component, view);\n    }\n\n    return view;\n  }\n\n  /** @internal */\n  _resolve(component: Type): ViewMetadata {\n    var compMeta: ComponentMetadata;\n    var viewMeta: ViewMetadata;\n\n    this._reflector.annotations(component).forEach(m => {\n      if (m instanceof ViewMetadata) {\n        viewMeta = m;\n      }\n      if (m instanceof ComponentMetadata) {\n        compMeta = m;\n      }\n    });\n\n    if (isPresent(compMeta)) {\n      if (isBlank(compMeta.template) && isBlank(compMeta.templateUrl) && isBlank(viewMeta)) {\n        throw new BaseException(\n            `Component '${stringify(component)}' must have either 'template' or 'templateUrl' set.`);\n\n      } else if (isPresent(compMeta.template) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"template\", component);\n\n      } else if (isPresent(compMeta.templateUrl) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"templateUrl\", component);\n\n      } else if (isPresent(compMeta.directives) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"directives\", component);\n\n      } else if (isPresent(compMeta.pipes) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"pipes\", component);\n\n      } else if (isPresent(compMeta.encapsulation) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"encapsulation\", component);\n\n      } else if (isPresent(compMeta.styles) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"styles\", component);\n\n      } else if (isPresent(compMeta.styleUrls) && isPresent(viewMeta)) {\n        this._throwMixingViewAndComponent(\"styleUrls\", component);\n\n      } else if (isPresent(viewMeta)) {\n        return viewMeta;\n\n      } else {\n        return new ViewMetadata({\n          templateUrl: compMeta.templateUrl,\n          template: compMeta.template,\n          directives: compMeta.directives,\n          pipes: compMeta.pipes,\n          encapsulation: compMeta.encapsulation,\n          styles: compMeta.styles,\n          styleUrls: compMeta.styleUrls\n        });\n      }\n    } else {\n      if (isBlank(viewMeta)) {\n        throw new BaseException(\n            `Could not compile '${stringify(component)}' because it is not a component.`);\n      } else {\n        return viewMeta;\n      }\n    }\n    return null;\n  }\n\n  /** @internal */\n  _throwMixingViewAndComponent(propertyName: string, component: Type): void {\n    throw new BaseException(\n        `Component '${stringify(component)}' cannot have both '${propertyName}' and '@View' set at the same time\"`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n"]}