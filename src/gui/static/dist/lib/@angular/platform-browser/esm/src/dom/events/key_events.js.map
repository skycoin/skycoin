{"version":3,"file":"key_events.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/dom/events/key_events.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {NgZone, Injectable} from '@angular/core';\nimport {\n  isPresent,\n  StringWrapper,\n} from '../../../src/facade/lang';\nimport {StringMapWrapper, ListWrapper} from '../../../src/facade/collection';\n\nimport {getDOM} from '../dom_adapter';\nimport {EventManagerPlugin} from './event_manager';\n\n\nvar modifierKeys = ['alt', 'control', 'meta', 'shift'];\nvar modifierKeyGetters: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  constructor() { super(); }\n\n  supports(eventName: string): boolean {\n    return isPresent(KeyEventsPlugin.parseEventName(eventName));\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n\n    var outsideHandler = KeyEventsPlugin.eventCallback(\n        element, StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, StringMapWrapper.get(parsedEvent, 'domEventName'),\n                                  outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {[key: string]: string} {\n    var parts: string[] = eventName.toLowerCase().split('.');\n\n    var domEventName = parts.shift();\n    if ((parts.length === 0) ||\n        !(StringWrapper.equals(domEventName, 'keydown') ||\n          StringWrapper.equals(domEventName, 'keyup'))) {\n      return null;\n    }\n\n    var key = KeyEventsPlugin._normalizeKey(parts.pop());\n\n    var fullKey = '';\n    modifierKeys.forEach(modifierName => {\n      if (ListWrapper.contains(parts, modifierName)) {\n        ListWrapper.remove(parts, modifierName);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n    var result = StringMapWrapper.create();\n    StringMapWrapper.set(result, 'domEventName', domEventName);\n    StringMapWrapper.set(result, 'fullKey', fullKey);\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    var fullKey = '';\n    var key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (StringWrapper.equals(key, ' ')) {\n      key = 'space';  // for readability\n    } else if (StringWrapper.equals(key, '.')) {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    modifierKeys.forEach(modifierName => {\n      if (modifierName != key) {\n        var modifierGetter = StringMapWrapper.get(modifierKeyGetters, modifierName);\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  static eventCallback(element: HTMLElement, fullKey: any, handler: Function,\n                       zone: NgZone): Function {\n    return (event) => {\n      if (StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a StringMap if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n"]}