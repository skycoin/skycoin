{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di/metadata.ts"],"names":[],"mappings":";AAIE,qBAAwB,uBAAuB,CAAC,CAAA;AAElD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AACH;IACE,wBAAmB,KAAK;QAAL,UAAK,GAAL,KAAK,CAAA;IAAG,CAAC;IAC5B,iCAAQ,GAAR,cAAqB,MAAM,CAAC,aAAW,gBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAG,CAAC,CAAC,CAAC;IACpE,qBAAC;AAAD,CAAC,AAHD,IAGC;AAHY,sBAAc,iBAG1B,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH;IAAA;IAEA,CAAC;IADC,mCAAQ,GAAR,cAAqB,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;IAC9C,uBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,wBAAgB,mBAE5B,CAAA;AAED;;;;GAIG;AACH;IAAA;IAEA,CAAC;IADC,sBAAI,qCAAK;aAAT,cAAc,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAC9B,yBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,0BAAkB,qBAE9B,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH;IACE;IAAe,CAAC;IAClB,yBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,0BAAkB,qBAE9B,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH;IAAA;IAEA,CAAC;IADC,+BAAQ,GAAR,cAAqB,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC1C,mBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,oBAAY,eAExB,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH;IAAA;IAEA,CAAC;IADC,mCAAQ,GAAR,cAAqB,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;IAC9C,uBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,wBAAgB,mBAE5B,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsDG;AACH;IAAA;IAEA,CAAC;IADC,+BAAQ,GAAR,cAAqB,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;IAC1C,mBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,oBAAY,eAExB,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {stringify} from '../../src/facade/lang';\n\n/**\n * A parameter metadata that specifies a dependency.\n *\n * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))\n *\n * ```typescript\n * class Engine {}\n *\n * @Injectable()\n * class Car {\n *   engine;\n *   constructor(@Inject(\"MyEngine\") engine:Engine) {\n *     this.engine = engine;\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([\n *  provide(\"MyEngine\", {useClass: Engine}),\n *  Car\n * ]);\n *\n * expect(injector.get(Car).engine instanceof Engine).toBe(true);\n * ```\n *\n * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.\n *\n * ### Example\n *\n * ```typescript\n * class Engine {}\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)\n * }\n *\n * var injector = Injector.resolveAndCreate([Engine, Car]);\n * expect(injector.get(Car).engine instanceof Engine).toBe(true);\n * ```\n * @ts2dart_const\n */\nexport class InjectMetadata {\n  constructor(public token) {}\n  toString(): string { return `@Inject(${stringify(this.token)})`; }\n}\n\n/**\n * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if\n * the dependency is not found.\n *\n * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))\n *\n * ```typescript\n * class Engine {}\n *\n * @Injectable()\n * class Car {\n *   engine;\n *   constructor(@Optional() engine:Engine) {\n *     this.engine = engine;\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([Car]);\n * expect(injector.get(Car).engine).toBeNull();\n * ```\n * @ts2dart_const\n */\nexport class OptionalMetadata {\n  toString(): string { return `@Optional()`; }\n}\n\n/**\n * `DependencyMetadata` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n * @ts2dart_const\n */\nexport class DependencyMetadata {\n  get token() { return null; }\n}\n\n/**\n * A marker metadata that marks a class as available to {@link Injector} for creation.\n *\n * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))\n *\n * ```typescript\n * @Injectable()\n * class UsefulService {}\n *\n * @Injectable()\n * class NeedsService {\n *   constructor(public service:UsefulService) {}\n * }\n *\n * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\n * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);\n * ```\n * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that\n * does not have `@Injectable` marker, as shown in the example below.\n *\n * ```typescript\n * class UsefulService {}\n *\n * class NeedsService {\n *   constructor(public service:UsefulService) {}\n * }\n *\n * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\n * expect(() => injector.get(NeedsService)).toThrowError();\n * ```\n * @ts2dart_const\n */\nexport class InjectableMetadata {\n  constructor() {}\n}\n\n/**\n * Specifies that an {@link Injector} should retrieve a dependency only from itself.\n *\n * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))\n *\n * ```typescript\n * class Dependency {\n * }\n *\n * @Injectable()\n * class NeedsDependency {\n *   dependency;\n *   constructor(@Self() dependency:Dependency) {\n *     this.dependency = dependency;\n *   }\n * }\n *\n * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\n * var nd = inj.get(NeedsDependency);\n *\n * expect(nd.dependency instanceof Dependency).toBe(true);\n *\n * var inj = Injector.resolveAndCreate([Dependency]);\n * var child = inj.resolveAndCreateChild([NeedsDependency]);\n * expect(() => child.get(NeedsDependency)).toThrowError();\n * ```\n * @ts2dart_const\n */\nexport class SelfMetadata {\n  toString(): string { return `@Self()`; }\n}\n\n/**\n * Specifies that the dependency resolution should start from the parent injector.\n *\n * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))\n *\n * ```typescript\n * class Dependency {\n * }\n *\n * @Injectable()\n * class NeedsDependency {\n *   dependency;\n *   constructor(@SkipSelf() dependency:Dependency) {\n *     this.dependency = dependency;\n *   }\n * }\n *\n * var parent = Injector.resolveAndCreate([Dependency]);\n * var child = parent.resolveAndCreateChild([NeedsDependency]);\n * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);\n *\n * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\n * expect(() => inj.get(NeedsDependency)).toThrowError();\n * ```\n * @ts2dart_const\n */\nexport class SkipSelfMetadata {\n  toString(): string { return `@SkipSelf()`; }\n}\n\n/**\n * Specifies that an injector should retrieve a dependency from any injector until reaching the\n * closest host.\n *\n * In Angular, a component element is automatically declared as a host for all the injectors in\n * its view.\n *\n * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))\n *\n * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.\n * So `ParentCmp` is the host of `ChildDirective`.\n *\n * `ChildDirective` depends on two services: `HostService` and `OtherService`.\n * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.\n *\n *```typescript\n * class OtherService {}\n * class HostService {}\n *\n * @Directive({\n *   selector: 'child-directive'\n * })\n * class ChildDirective {\n *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){\n *     console.log(\"os is null\", os);\n *     console.log(\"hs is NOT null\", hs);\n *   }\n * }\n *\n * @Component({\n *   selector: 'parent-cmp',\n *   providers: [HostService],\n *   template: `\n *     Dir: <child-directive></child-directive>\n *   `,\n *   directives: [ChildDirective]\n * })\n * class ParentCmp {\n * }\n *\n * @Component({\n *   selector: 'app',\n *   providers: [OtherService],\n *   template: `\n *     Parent: <parent-cmp></parent-cmp>\n *   `,\n *   directives: [ParentCmp]\n * })\n * class App {\n * }\n *\n * bootstrap(App);\n *```\n * @ts2dart_const\n */\nexport class HostMetadata {\n  toString(): string { return `@Host()`; }\n}\n"]}