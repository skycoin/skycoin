{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":";AAIE,2BAA4B,6BAA6B,CAAC,CAAA;AAE5D,IAAM,mBAAmB,GAAsB,IAAI,MAAM,EAAE,CAAC;AAC/C,0BAAkB,GAAsB,mBAAmB,CAAC;AAEzE;IAAA;IA4BA,CAAC;IAzBC;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,sBAAG,GAAH,UAAI,KAAU,EAAE,aAAmB,IAAS,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IA1B9D,2BAAkB,GAAG,mBAAmB,CAAC;IA2BlD,eAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BqB,gBAAQ,WA4B7B,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {unimplemented} from '../../src/facade/exceptions';\n\nconst _THROW_IF_NOT_FOUND = /*@ts2dart_const*/ new Object();\nexport const THROW_IF_NOT_FOUND = /*@ts2dart_const*/ _THROW_IF_NOT_FOUND;\n\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * If not found:\n   * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\n   * Injector.THROW_IF_NOT_FOUND is given\n   * - Returns the `notFoundValue` otherwise\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([\n   *   provide(\"validToken\", {useValue: \"Value\"})\n   * ]);\n   * expect(injector.get(\"validToken\")).toEqual(\"Value\");\n   * expect(() => injector.get(\"invalidToken\")).toThrowError();\n   * ```\n   *\n   * `Injector` returns itself when given `Injector` as a token.\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([]);\n   * expect(injector.get(Injector)).toBe(injector);\n   * ```\n   */\n  get(token: any, notFoundValue?: any): any { return unimplemented(); }\n}\n"]}