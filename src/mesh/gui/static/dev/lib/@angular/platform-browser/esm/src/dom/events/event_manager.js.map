{"version":3,"file":"event_manager.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/platform-browser/src/dom/events/event_manager.ts"],"names":[],"mappings":"OAIS,EAAC,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAC,MAAM,eAAe;OAEhE,EAAC,aAAa,EAAC,MAAM,gCAAgC;OACrD,EAAC,WAAW,EAAC,MAAM,gCAAgC;AAG1D,OAAO,MAAM,qBAAqB;AAC9B,kBAAkB,CAAC,IAAI,WAAW,CAAC,qBAAqB,CAAC,CAAC;AAC9D;IAGE,YAAa,OAA6B,EAAU,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAC/D,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAED,gBAAgB,CAAC,OAAoB,EAAE,SAAiB,EAAE,OAAiB;QACzE,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,sBAAsB,CAAC,MAAc,EAAE,SAAiB,EAAE,OAAiB;QACzE,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IACnE,CAAC;IAED,OAAO,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAExC,gBAAgB;IAChB,cAAc,CAAC,SAAiB;QAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACxB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;QACH,CAAC;QACD,MAAM,IAAI,aAAa,CAAC,2CAA2C,SAAS,EAAE,CAAC,CAAC;IAClF,CAAC;AAQH,CAAC;AAPM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACK,2BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,qBAAqB,EAAG,EAAE,EAAG,EAAC;IACpF,EAAC,IAAI,EAAE,MAAM,GAAG;CACf,CACA;AAED;IAGE,wDAAwD;IACxD,QAAQ,CAAC,SAAiB,IAAa,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAEtD,gBAAgB,CAAC,OAAoB,EAAE,SAAiB,EAAE,OAAiB;QACzE,MAAM,iBAAiB,CAAC;IAC1B,CAAC;IAED,sBAAsB,CAAC,OAAe,EAAE,SAAiB,EAAE,OAAiB;QAC1E,MAAM,iBAAiB,CAAC;IAC1B,CAAC;AACH,CAAC;AAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Injectable, Inject, OpaqueToken, NgZone} from '@angular/core';\n\nimport {BaseException} from '../../../src/facade/exceptions';\nimport {ListWrapper} from '../../../src/facade/collection';\n\n\nexport const EVENT_MANAGER_PLUGINS: OpaqueToken =\n    /*@ts2dart_const*/ new OpaqueToken(\"EventManagerPlugins\");\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n\n  constructor( plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = ListWrapper.reversed(plugins);\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    var plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  getZone(): NgZone { return this._zone; }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    var plugins = this._plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      var plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        return plugin;\n      }\n    }\n    throw new BaseException(`No event manager plugin found for event ${eventName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nexport class EventManagerPlugin {\n  manager: EventManager;\n\n  // That is equivalent to having supporting $event.target\n  supports(eventName: string): boolean { return false; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    throw \"not implemented\";\n  }\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    throw \"not implemented\";\n  }\n}\n"]}