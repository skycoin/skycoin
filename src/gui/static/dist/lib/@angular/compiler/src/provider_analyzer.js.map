{"version":3,"file":"provider_analyzer.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/provider_analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileDirectiveSummary, CompileNgModuleMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata} from './compile_metadata';\nimport {isBlank, isPresent} from './facade/lang';\nimport {Identifiers, resolveIdentifierToken} from './identifiers';\nimport {ParseError, ParseSourceSpan} from './parse_util';\nimport {AttrAst, DirectiveAst, ProviderAst, ProviderAstType, ReferenceAst} from './template_parser/template_ast';\n\nexport class ProviderError extends ParseError {\n  constructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\n\nexport class ProviderViewContext {\n  /**\n   * @internal\n   */\n  viewQueries: Map<any, CompileQueryMetadata[]>;\n  /**\n   * @internal\n   */\n  viewProviders: Map<any, boolean>;\n  errors: ProviderError[] = [];\n\n  constructor(public component: CompileDirectiveMetadata, public sourceSpan: ParseSourceSpan) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new Map<any, boolean>();\n    _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach((provider) => {\n      if (isBlank(this.viewProviders.get(provider.token.reference))) {\n        this.viewProviders.set(provider.token.reference, true);\n      }\n    });\n  }\n}\n\nexport class ProviderElementContext {\n  private _contentQueries: Map<any, CompileQueryMetadata[]>;\n\n  private _transformedProviders = new Map<any, ProviderAst>();\n  private _seenProviders = new Map<any, boolean>();\n  private _allProviders: Map<any, ProviderAst>;\n  private _attrs: {[key: string]: string};\n  private _hasViewContainer: boolean = false;\n\n  constructor(\n      public viewContext: ProviderViewContext, private _parent: ProviderElementContext,\n      private _isViewRoot: boolean, private _directiveAsts: DirectiveAst[], attrs: AttrAst[],\n      refs: ReferenceAst[], private _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n    this._contentQueries = _getContentQueries(directivesMeta);\n    const queriedTokens = new Map<any, boolean>();\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._addQueryReadsTo(provider.token, queriedTokens);\n    });\n    refs.forEach((refAst) => {\n      this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);\n    });\n    if (isPresent(\n            queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {\n      this._hasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      const eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n\n  afterElement() {\n    // collect lazy providers\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n\n  get transformProviders(): ProviderAst[] {\n    return Array.from(this._transformedProviders.values());\n  }\n\n  get transformedDirectiveAsts(): DirectiveAst[] {\n    const sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n    const sortedDirectives = this._directiveAsts.slice();\n    sortedDirectives.sort(\n        (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n\n  get transformedHasViewContainer(): boolean { return this._hasViewContainer; }\n\n  private _addQueryReadsTo(token: CompileTokenMetadata, queryReadTokens: Map<any, boolean>) {\n    this._getQueriesFor(token).forEach((query) => {\n      const queryReadToken = query.read || token;\n      if (isBlank(queryReadTokens.get(queryReadToken.reference))) {\n        queryReadTokens.set(queryReadToken.reference, true);\n      }\n    });\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): CompileQueryMetadata[] {\n    const result: CompileQueryMetadata[] = [];\n    let currentEl: ProviderElementContext = this;\n    let distance = 0;\n    let queries: CompileQueryMetadata[];\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(token.reference);\n      if (isPresent(queries)) {\n        result.push(...queries.filter((query) => query.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this.viewContext.viewQueries.get(token.reference);\n    if (isPresent(queries)) {\n      result.push(...queries);\n    }\n    return result;\n  }\n\n\n  private _getOrCreateLocalProvider(\n      requestingProviderType: ProviderAstType, token: CompileTokenMetadata,\n      eager: boolean): ProviderAst {\n    const resolvedProvider = this._allProviders.get(token.reference);\n    if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n                               requestingProviderType === ProviderAstType.PublicService) &&\n                              resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    let transformedProviderAst = this._transformedProviders.get(token.reference);\n    if (isPresent(transformedProviderAst)) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(token.reference))) {\n      this.viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${token.name}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(token.reference, true);\n    const transformedProviders = resolvedProvider.providers.map((provider) => {\n      let transformedUseValue = provider.useValue;\n      let transformedUseExisting = provider.useExisting;\n      let transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        const existingDiDep = this._getDependency(\n            resolvedProvider.providerType,\n            new CompileDiDependencyMetadata({token: provider.useExisting}), eager);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (isPresent(provider.useFactory)) {\n        const deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      } else if (isPresent(provider.useClass)) {\n        const deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(token.reference, transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    if (dep.isAttribute) {\n      const attrValue = this._attrs[dep.token.value];\n      return new CompileDiDependencyMetadata(\n          {isValue: true, value: attrValue == null ? null : attrValue});\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference ||\n            dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference ||\n            dep.token.reference ===\n                resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference ||\n            dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {\n          return dep;\n        }\n        if (dep.token.reference ===\n            resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {\n          this._hasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {\n        return dep;\n      }\n      // access providers\n      if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n        return dep;\n      }\n    }\n    return null;\n  }\n\n  private _getDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    let currElement: ProviderElementContext = this;\n    let currEager: boolean = eager;\n    let result: CompileDiDependencyMetadata = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (!result && dep.isOptional) {\n        result = new CompileDiDependencyMetadata({isValue: true, value: null});\n      }\n    } else {\n      // check parent elements\n      while (!result && isPresent(currElement._parent)) {\n        const prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (!result) {\n        if (!dep.isHost || this.viewContext.component.type.isHost ||\n            this.viewContext.component.type.reference === dep.token.reference ||\n            isPresent(this.viewContext.viewProviders.get(dep.token.reference))) {\n          result = dep;\n        } else {\n          result = dep.isOptional ?\n              result = new CompileDiDependencyMetadata({isValue: true, value: null}) :\n              null;\n        }\n      }\n    }\n    if (!result) {\n      this.viewContext.errors.push(\n          new ProviderError(`No provider for ${dep.token.name}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\n\nexport class NgModuleProviderAnalyzer {\n  private _transformedProviders = new Map<any, ProviderAst>();\n  private _seenProviders = new Map<any, boolean>();\n  private _allProviders: Map<any, ProviderAst>;\n  private _errors: ProviderError[] = [];\n\n  constructor(\n      ngModule: CompileNgModuleMetadata, extraProviders: CompileProviderMetadata[],\n      sourceSpan: ParseSourceSpan) {\n    this._allProviders = new Map<any, ProviderAst>();\n    const ngModuleTypes = ngModule.transitiveModule.modules.map((moduleMeta) => moduleMeta.type);\n    ngModuleTypes.forEach((ngModuleType: CompileTypeMetadata) => {\n      const ngModuleProvider = new CompileProviderMetadata(\n          {token: new CompileTokenMetadata({identifier: ngModuleType}), useClass: ngModuleType});\n      _resolveProviders(\n          [ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors,\n          this._allProviders);\n    });\n    _resolveProviders(\n        _normalizeProviders(\n            ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors),\n        ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n  }\n\n  parse(): ProviderAst[] {\n    Array.from(this._allProviders.values()).forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.token, provider.eager);\n    });\n    if (this._errors.length > 0) {\n      const errorString = this._errors.join('\\n');\n      throw new Error(`Provider parse errors:\\n${errorString}`);\n    }\n    return Array.from(this._transformedProviders.values());\n  }\n\n  private _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst {\n    const resolvedProvider = this._allProviders.get(token.reference);\n    if (!resolvedProvider) {\n      return null;\n    }\n    let transformedProviderAst = this._transformedProviders.get(token.reference);\n    if (isPresent(transformedProviderAst)) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(token.reference))) {\n      this._errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${token.name}`, resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.set(token.reference, true);\n    const transformedProviders = resolvedProvider.providers.map((provider) => {\n      let transformedUseValue = provider.useValue;\n      let transformedUseExisting = provider.useExisting;\n      let transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        const existingDiDep = this._getDependency(\n            new CompileDiDependencyMetadata({token: provider.useExisting}), eager,\n            resolvedProvider.sourceSpan);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (isPresent(provider.useFactory)) {\n        const deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (isPresent(provider.useClass)) {\n        const deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.set(token.reference, transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getDependency(\n      dep: CompileDiDependencyMetadata, eager: boolean = null,\n      requestorSourceSpan: ParseSourceSpan): CompileDiDependencyMetadata {\n    let foundLocal = false;\n    if (!dep.isSkipSelf && isPresent(dep.token)) {\n      // access the injector\n      if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||\n          dep.token.reference ===\n              resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {\n        foundLocal = true;\n        // access providers\n      } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {\n        foundLocal = true;\n      }\n    }\n    let result: CompileDiDependencyMetadata = dep;\n    if (dep.isSelf && !foundLocal) {\n      if (dep.isOptional) {\n        result = new CompileDiDependencyMetadata({isValue: true, value: null});\n      } else {\n        this._errors.push(\n            new ProviderError(`No provider for ${dep.token.name}`, requestorSourceSpan));\n      }\n    }\n    return result;\n  }\n}\n\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return new CompileProviderMetadata({\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  });\n}\n\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(\n      provider.token, provider.multiProvider, provider.eager || eager, providers,\n      provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n}\n\nfunction _normalizeProviders(\n    providers: Array<CompileProviderMetadata|CompileTypeMetadata|any[]>,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProviders: CompileProviderMetadata[] = null): CompileProviderMetadata[] {\n  if (!targetProviders) {\n    targetProviders = [];\n  }\n  if (isPresent(providers)) {\n    providers.forEach((provider) => {\n      if (Array.isArray(provider)) {\n        _normalizeProviders(<any[]>provider, sourceSpan, targetErrors, targetProviders);\n      } else {\n        let normalizeProvider: CompileProviderMetadata;\n        if (provider instanceof CompileProviderMetadata) {\n          normalizeProvider = provider;\n        } else if (provider instanceof CompileTypeMetadata) {\n          normalizeProvider = new CompileProviderMetadata(\n              {token: new CompileTokenMetadata({identifier: provider}), useClass: provider});\n        } else {\n          targetErrors.push(new ProviderError(`Unknown provider type ${provider}`, sourceSpan));\n        }\n        if (isPresent(normalizeProvider)) {\n          targetProviders.push(normalizeProvider);\n        }\n      }\n    });\n  }\n  return targetProviders;\n}\n\n\nfunction _resolveProvidersFromDirectives(\n    directives: CompileDirectiveSummary[], sourceSpan: ParseSourceSpan,\n    targetErrors: ParseError[]): Map<any, ProviderAst> {\n  const providersByToken = new Map<any, ProviderAst>();\n  directives.forEach((directive) => {\n    const dirProvider = new CompileProviderMetadata(\n        {token: new CompileTokenMetadata({identifier: directive.type}), useClass: directive.type});\n    _resolveProviders(\n        [dirProvider],\n        directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true,\n        sourceSpan, targetErrors, providersByToken);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  const directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(\n        _normalizeProviders(directive.providers, sourceSpan, targetErrors),\n        ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);\n    _resolveProviders(\n        _normalizeProviders(directive.viewProviders, sourceSpan, targetErrors),\n        ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);\n  });\n  return providersByToken;\n}\n\nfunction _resolveProviders(\n    providers: CompileProviderMetadata[], providerType: ProviderAstType, eager: boolean,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProvidersByToken: Map<any, ProviderAst>) {\n  providers.forEach((provider) => {\n    let resolvedProvider = targetProvidersByToken.get(provider.token.reference);\n    if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${resolvedProvider.token.name}`,\n          sourceSpan));\n    }\n    if (!resolvedProvider) {\n      const lifecycleHooks =\n          provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ?\n          provider.token.identifier.lifecycleHooks :\n          [];\n      resolvedProvider = new ProviderAst(\n          provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider],\n          providerType, lifecycleHooks, sourceSpan);\n      targetProvidersByToken.set(provider.token.reference, resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        resolvedProvider.providers.length = 0;\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n\n\nfunction _getViewQueries(component: CompileDirectiveMetadata): Map<any, CompileQueryMetadata[]> {\n  const viewQueries = new Map<any, CompileQueryMetadata[]>();\n  if (isPresent(component.viewQueries)) {\n    component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, query));\n  }\n  return viewQueries;\n}\n\nfunction _getContentQueries(directives: CompileDirectiveSummary[]):\n    Map<any, CompileQueryMetadata[]> {\n  const contentQueries = new Map<any, CompileQueryMetadata[]>();\n  directives.forEach(directive => {\n    if (isPresent(directive.queries)) {\n      directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, query));\n    }\n  });\n  return contentQueries;\n}\n\nfunction _addQueryToTokenMap(map: Map<any, CompileQueryMetadata[]>, query: CompileQueryMetadata) {\n  query.selectors.forEach((token: CompileTokenMetadata) => {\n    let entry = map.get(token.reference);\n    if (!entry) {\n      entry = [];\n      map.set(token.reference, entry);\n    }\n    entry.push(query);\n  });\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}