{"version":3,"file":"compile_method.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/view_compiler/compile_method.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent} from '../../src/facade/lang';\nimport {ListWrapper} from '../../src/facade/collection';\n\nimport * as o from '../output/output_ast';\nimport {TemplateAst} from '../template_ast';\n\nimport {CompileView} from './compile_view';\n\nclass _DebugState {\n  constructor(public nodeIndex: number, public sourceAst: TemplateAst) {}\n}\n\nvar NULL_DEBUG_STATE = new _DebugState(null, null);\n\nexport class CompileMethod {\n  private _newState: _DebugState = NULL_DEBUG_STATE;\n  private _currState: _DebugState = NULL_DEBUG_STATE;\n\n  private _debugEnabled: boolean;\n\n  private _bodyStatements: o.Statement[] = [];\n\n  constructor(private _view: CompileView) {\n    this._debugEnabled = this._view.genConfig.genDebugInfo;\n  }\n\n  private _updateDebugContextIfNeeded() {\n    if (this._newState.nodeIndex !== this._currState.nodeIndex ||\n        this._newState.sourceAst !== this._currState.sourceAst) {\n      var expr = this._updateDebugContext(this._newState);\n      if (isPresent(expr)) {\n        this._bodyStatements.push(expr.toStmt());\n      }\n    }\n  }\n\n  private _updateDebugContext(newState: _DebugState): o.Expression {\n    this._currState = this._newState = newState;\n    if (this._debugEnabled) {\n      var sourceLocation =\n          isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;\n\n      return o.THIS_EXPR.callMethod('debug', [\n        o.literal(newState.nodeIndex),\n        isPresent(sourceLocation) ? o.literal(sourceLocation.line) : o.NULL_EXPR,\n        isPresent(sourceLocation) ? o.literal(sourceLocation.col) : o.NULL_EXPR\n      ]);\n    } else {\n      return null;\n    }\n  }\n\n  resetDebugInfoExpr(nodeIndex: number, templateAst: TemplateAst): o.Expression {\n    var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));\n    return isPresent(res) ? res : o.NULL_EXPR;\n  }\n\n  resetDebugInfo(nodeIndex: number, templateAst: TemplateAst) {\n    this._newState = new _DebugState(nodeIndex, templateAst);\n  }\n\n  addStmt(stmt: o.Statement) {\n    this._updateDebugContextIfNeeded();\n    this._bodyStatements.push(stmt);\n  }\n\n  addStmts(stmts: o.Statement[]) {\n    this._updateDebugContextIfNeeded();\n    ListWrapper.addAll(this._bodyStatements, stmts);\n  }\n\n  finish(): o.Statement[] { return this._bodyStatements; }\n\n  isEmpty(): boolean { return this._bodyStatements.length === 0; }\n}\n"]}