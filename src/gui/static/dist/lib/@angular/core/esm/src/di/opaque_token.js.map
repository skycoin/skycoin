{"version":3,"file":"opaque_token.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/opaque_token.ts"],"names":[],"mappings":"AAIE;;;;;;;;;;;;;;;;;;;;;EAqBC;AACH;IACE,YAAoB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAErC,QAAQ,KAAa,MAAM,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACtD,CAAC;AAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  /**\n * Creates a token that can be used in a DI Provider.\n *\n * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))\n *\n * ```typescript\n * var t = new OpaqueToken(\"value\");\n *\n * var injector = Injector.resolveAndCreate([\n *   provide(t, {useValue: \"bindingValue\"})\n * ]);\n *\n * expect(injector.get(t)).toEqual(\"bindingValue\");\n * ```\n *\n * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions\n * caused by multiple providers using the same string as two different tokens.\n *\n * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better\n * error messages.\n * @ts2dart_const\n */\nexport class OpaqueToken {\n  constructor(private _desc: string) {}\n\n  toString(): string { return `Token ${this._desc}`; }\n}\n"]}