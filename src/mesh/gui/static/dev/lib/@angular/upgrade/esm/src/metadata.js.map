{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/metadata.ts"],"names":[],"mappings":"OAKO,EAAC,iBAAiB,EAAC,MAAM,mBAAmB;AAEnD,IAAI,kBAAkB,GAAG,WAAW,CAAC;AACrC,IAAI,WAAW,GAAG,QAAQ,CAAC;AAC3B,IAAI,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAoBhD,iCAAiC,IAAU;IACzC,IAAI,gBAAgB,GAAsB,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC1E,IAAI,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;IACzC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,4DAA4D,GAAG,QAAQ,CAAC,CAAC;IAC3F,CAAC;IACD,IAAI,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,GAAG,EAAE,MAAc,KAAK,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IAC5F,MAAM,CAAC;QACL,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC;QAC5C,OAAO,EAAE,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC;KAC/C,CAAC;AACJ,CAAC;AAED,4BAA4B,KAAe;IACzC,IAAI,SAAS,GAAe,EAAE,CAAC;IAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3B,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACzC,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChE,SAAS,CAAC,IAAI,CAAW;gBACvB,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;gBACV,WAAW,EAAE,IAAI,IAAI,GAAG;gBACxB,SAAS,EAAE,IAAI,IAAI,GAAG;gBACtB,gBAAgB,EAAE,KAAK,IAAI,IAAI;gBAC/B,MAAM,EAAE,KAAK,WAAW,EAAE;gBAC1B,QAAQ,EAAE,OAAO,WAAW,EAAE;gBAC9B,UAAU,EAAE,SAAS,WAAW,EAAE;aACnC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Type, DirectiveMetadata} from '@angular/core';\nimport {DirectiveResolver} from '@angular/compiler';\n\nvar COMPONENT_SELECTOR = /^[\\w|-]*$/;\nvar SKEWER_CASE = /-(\\w)/g;\nvar directiveResolver = new DirectiveResolver();\n\nexport interface AttrProp {\n  prop: string;\n  attr: string;\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n}\n\nexport interface ComponentInfo {\n  type: Type;\n  selector: string;\n  inputs: AttrProp[];\n  outputs: AttrProp[];\n}\n\nexport function getComponentInfo(type: Type): ComponentInfo {\n  var resolvedMetadata: DirectiveMetadata = directiveResolver.resolve(type);\n  var selector = resolvedMetadata.selector;\n  if (!selector.match(COMPONENT_SELECTOR)) {\n    throw new Error('Only selectors matching element names are supported, got: ' + selector);\n  }\n  var selector = selector.replace(SKEWER_CASE, (all, letter: string) => letter.toUpperCase());\n  return {\n    type: type,\n    selector: selector,\n    inputs: parseFields(resolvedMetadata.inputs),\n    outputs: parseFields(resolvedMetadata.outputs)\n  };\n}\n\nexport function parseFields(names: string[]): AttrProp[] {\n  var attrProps: AttrProp[] = [];\n  if (names) {\n    for (var i = 0; i < names.length; i++) {\n      var parts = names[i].split(':');\n      var prop = parts[0].trim();\n      var attr = (parts[1] || parts[0]).trim();\n      var capitalAttr = attr.charAt(0).toUpperCase() + attr.substr(1);\n      attrProps.push(<AttrProp>{\n        prop: prop,\n        attr: attr,\n        bracketAttr: `[${attr}]`,\n        parenAttr: `(${attr})`,\n        bracketParenAttr: `[(${attr})]`,\n        onAttr: `on${capitalAttr}`,\n        bindAttr: `bind${capitalAttr}`,\n        bindonAttr: `bindon${capitalAttr}`\n      });\n    }\n  }\n  return attrProps;\n}\n"]}