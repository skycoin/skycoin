{"version":3,"file":"security.js","sourceRoot":"","sources":["../../../../modules/@angular/core/src/security.ts"],"names":[],"mappings":";AAIE;;;;;;EAMC;AACH,WAAY,eAAe;IACzB,qDAAI,CAAA;IACJ,qDAAI,CAAA;IACJ,uDAAK,CAAA;IACL,yDAAM,CAAA;IACN,mDAAG,CAAA;IACH,qEAAY,CAAA;AACd,CAAC,EAPW,uBAAe,KAAf,uBAAe,QAO1B;AAPD,IAAY,eAAe,GAAf,uBAOX,CAAA;AAED;;;GAGG;AACH;IAAA;IAEA,CAAC;IAAD,0BAAC;AAAD,CAAC,AAFD,IAEC;AAFqB,2BAAmB,sBAExC,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  /**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizationService for more details on security in Angular applications.\n */\nexport enum SecurityContext {\n  NONE,\n  HTML,\n  STYLE,\n  SCRIPT,\n  URL,\n  RESOURCE_URL,\n}\n\n/**\n * SanitizationService is used by the views to sanitize potentially dangerous values. This is a\n * private API, use code should only refer to DomSanitizationService.\n */\nexport abstract class SanitizationService {\n  abstract sanitize(context: SecurityContext, value: string): string;\n}\n"]}