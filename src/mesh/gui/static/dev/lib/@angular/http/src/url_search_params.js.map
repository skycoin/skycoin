{"version":3,"file":"url_search_params.js","sourceRoot":"","sources":["../../../../modules/@angular/http/src/url_search_params.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent} from '../src/facade/lang';\nimport {Map, ListWrapper, isListLikeIterable} from '../src/facade/collection';\n\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  var map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    var params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      var split: string[] = param.split('=');\n      var key = split[0];\n      var val = split[1];\n      var list = isPresent(map.get(key)) ? map.get(key) : [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n  constructor(public rawParams: string = '') { this.paramsMap = paramParser(rawParams); }\n\n  clone(): URLSearchParams {\n    var clone = new URLSearchParams();\n    clone.appendAll(this);\n    return clone;\n  }\n\n  has(param: string): boolean { return this.paramsMap.has(param); }\n\n  get(param: string): string {\n    var storedParam = this.paramsMap.get(param);\n    if (isListLikeIterable(storedParam)) {\n      return ListWrapper.first(storedParam);\n    } else {\n      return null;\n    }\n  }\n\n  getAll(param: string): string[] {\n    var mapParam = this.paramsMap.get(param);\n    return isPresent(mapParam) ? mapParam : [];\n  }\n\n  set(param: string, val: string) {\n    var mapParam = this.paramsMap.get(param);\n    var list = isPresent(mapParam) ? mapParam : [];\n    ListWrapper.clear(list);\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  setAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      var mapParam = this.paramsMap.get(param);\n      var list = isPresent(mapParam) ? mapParam : [];\n      ListWrapper.clear(list);\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  append(param: string, val: string): void {\n    var mapParam = this.paramsMap.get(param);\n    var list = isPresent(mapParam) ? mapParam : [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  appendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      var mapParam = this.paramsMap.get(param);\n      var list = isPresent(mapParam) ? mapParam : [];\n      for (var i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  replaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      var mapParam = this.paramsMap.get(param);\n      var list = isPresent(mapParam) ? mapParam : [];\n      ListWrapper.clear(list);\n      for (var i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n\n  toString(): string {\n    var paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => { values.forEach(v => paramsList.push(k + '=' + v)); });\n    return paramsList.join('&');\n  }\n\n  delete (param: string): void { this.paramsMap.delete(param); }\n}\n"]}