{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/serializer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAYH,kEAAkE;AAClE,oCAAoC,aAA4B;IAC9D,IAAM,UAAU,GAAG,aAAa,CAAC,aAAa,EAAE,CAAC;IACjD,IAAM,YAAY,GAA6C,EAAE,CAAC;IAElE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;QACnC,YAAY,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,YAAY,CAAC;AACtB,CAAC;AAED,sEAAsE;AACtE,wCAAwC,aAA4B;IAClE,IAAM,UAAU,GAAG,aAAa,CAAC,aAAa,EAAE,CAAC;IACjD,IAAM,gBAAgB,GAA6C,EAAE,CAAC;IAEtE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;QACnC,gBAAgB,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from '../../ml_parser/ast';\nimport * as i18n from '../i18n_ast';\nimport {MessageBundle} from '../message_bundle';\n\nexport interface Serializer {\n  write(messageMap: {[id: string]: i18n.Message}): string;\n\n  load(content: string, url: string, messageBundle: MessageBundle): {[id: string]: html.Node[]};\n}\n\n// Generate a map of placeholder to content indexed by message ids\nexport function extractPlaceholders(messageBundle: MessageBundle) {\n  const messageMap = messageBundle.getMessageMap();\n  const placeholders: {[id: string]: {[name: string]: string}} = {};\n\n  Object.keys(messageMap).forEach(msgId => {\n    placeholders[msgId] = messageMap[msgId].placeholders;\n  });\n\n  return placeholders;\n}\n\n// Generate a map of placeholder to message ids indexed by message ids\nexport function extractPlaceholderToIds(messageBundle: MessageBundle) {\n  const messageMap = messageBundle.getMessageMap();\n  const placeholderToIds: {[id: string]: {[name: string]: string}} = {};\n\n  Object.keys(messageMap).forEach(msgId => {\n    placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;\n  });\n\n  return placeholderToIds;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}