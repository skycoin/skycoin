{"version":3,"file":"compile_element.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/view_compiler/compile_element.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {BaseException} from '@angular/core';\nimport {isPresent, isBlank} from '../../src/facade/lang';\nimport {ListWrapper, StringMapWrapper} from '../../src/facade/collection';\n\nimport * as o from '../output/output_ast';\nimport {Identifiers, identifierToken} from '../identifiers';\nimport {InjectMethodVars} from './constants';\nimport {CompileView} from './compile_view';\nimport {TemplateAst, ProviderAst, ProviderAstType, ReferenceAst} from '../template_ast';\nimport {\n  CompileTokenMap,\n  CompileDirectiveMetadata,\n  CompileTokenMetadata,\n  CompileQueryMetadata,\n  CompileProviderMetadata,\n  CompileDiDependencyMetadata,\n  CompileIdentifierMetadata,\n} from '../compile_metadata';\nimport {getPropertyInView, createDiTokenExpression, injectFromViewParentInjector} from './util';\nimport {CompileQuery, createQueryList, addQueryToTokenMap} from './compile_query';\nimport {CompileMethod} from './compile_method';\nimport {ValueTransformer, visitValue} from '../util';\n\nexport class CompileNode {\n  constructor(public parent: CompileElement, public view: CompileView, public nodeIndex: number,\n              public renderNode: o.Expression, public sourceAst: TemplateAst) {}\n\n  isNull(): boolean { return isBlank(this.renderNode); }\n\n  isRootElement(): boolean { return this.view != this.parent.view; }\n}\n\nexport class CompileElement extends CompileNode {\n  static createNull(): CompileElement {\n    return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);\n  }\n\n  private _compViewExpr: o.Expression = null;\n  public appElement: o.ReadPropExpr;\n  public elementRef: o.Expression;\n  public injector: o.Expression;\n  private _instances = new CompileTokenMap<o.Expression>();\n  private _resolvedProviders: CompileTokenMap<ProviderAst>;\n\n  private _queryCount = 0;\n  private _queries = new CompileTokenMap<CompileQuery[]>();\n  private _componentConstructorViewQueryLists: o.Expression[] = [];\n\n  public contentNodesByNgContentIndex: Array<o.Expression>[] = null;\n  public embeddedView: CompileView;\n  public directiveInstances: o.Expression[];\n  public referenceTokens: {[key: string]: CompileTokenMetadata};\n\n  constructor(parent: CompileElement, view: CompileView, nodeIndex: number,\n              renderNode: o.Expression, sourceAst: TemplateAst,\n              public component: CompileDirectiveMetadata,\n              private _directives: CompileDirectiveMetadata[],\n              private _resolvedProvidersArray: ProviderAst[], public hasViewContainer: boolean,\n              public hasEmbeddedView: boolean, references: ReferenceAst[]) {\n    super(parent, view, nodeIndex, renderNode, sourceAst);\n    this.referenceTokens = {};\n    references.forEach(ref => this.referenceTokens[ref.name] = ref.value);\n\n    this.elementRef = o.importExpr(Identifiers.ElementRef).instantiate([this.renderNode]);\n    this._instances.add(identifierToken(Identifiers.ElementRef), this.elementRef);\n    this.injector = o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]);\n    this._instances.add(identifierToken(Identifiers.Injector), this.injector);\n    this._instances.add(identifierToken(Identifiers.Renderer), o.THIS_EXPR.prop('renderer'));\n    if (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) {\n      this._createAppElement();\n    }\n  }\n\n  private _createAppElement() {\n    var fieldName = `_appEl_${this.nodeIndex}`;\n    var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n    // private is fine here as no child view will reference an AppElement\n    this.view.fields.push(new o.ClassField(fieldName, o.importType(Identifiers.AppElement),\n                                           [o.StmtModifier.Private]));\n    var statement = o.THIS_EXPR.prop(fieldName)\n                        .set(o.importExpr(Identifiers.AppElement)\n                                 .instantiate([\n                                   o.literal(this.nodeIndex),\n                                   o.literal(parentNodeIndex),\n                                   o.THIS_EXPR,\n                                   this.renderNode\n                                 ]))\n                        .toStmt();\n    this.view.createMethod.addStmt(statement);\n    this.appElement = o.THIS_EXPR.prop(fieldName);\n    this._instances.add(identifierToken(Identifiers.AppElement), this.appElement);\n  }\n\n  setComponentView(compViewExpr: o.Expression) {\n    this._compViewExpr = compViewExpr;\n    this.contentNodesByNgContentIndex =\n        ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);\n    for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n      this.contentNodesByNgContentIndex[i] = [];\n    }\n  }\n\n  setEmbeddedView(embeddedView: CompileView) {\n    this.embeddedView = embeddedView;\n    if (isPresent(embeddedView)) {\n      var createTemplateRefExpr =\n          o.importExpr(Identifiers.TemplateRef_)\n              .instantiate([this.appElement, this.embeddedView.viewFactory]);\n      var provider = new CompileProviderMetadata(\n          {token: identifierToken(Identifiers.TemplateRef), useValue: createTemplateRefExpr});\n      // Add TemplateRef as first provider as it does not have deps on other providers\n      this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider],\n                                                           ProviderAstType.Builtin,\n                                                           this.sourceAst.sourceSpan));\n    }\n  }\n\n  beforeChildren(): void {\n    if (this.hasViewContainer) {\n      this._instances.add(identifierToken(Identifiers.ViewContainerRef),\n                          this.appElement.prop('vcRef'));\n    }\n\n    this._resolvedProviders = new CompileTokenMap<ProviderAst>();\n    this._resolvedProvidersArray.forEach(provider =>\n                                             this._resolvedProviders.add(provider.token, provider));\n\n    // create all the provider instances, some in the view constructor,\n    // some as getters. We rely on the fact that they are already sorted topologically.\n    this._resolvedProviders.values().forEach((resolvedProvider) => {\n      var providerValueExpressions = resolvedProvider.providers.map((provider) => {\n        if (isPresent(provider.useExisting)) {\n          return this._getDependency(\n              resolvedProvider.providerType,\n              new CompileDiDependencyMetadata({token: provider.useExisting}));\n        } else if (isPresent(provider.useFactory)) {\n          var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n          var depsExpr = deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useFactory).callFn(depsExpr);\n        } else if (isPresent(provider.useClass)) {\n          var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n          var depsExpr = deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useClass)\n              .instantiate(depsExpr, o.importType(provider.useClass));\n        } else {\n          return _convertValueToOutputAst(provider.useValue);\n        }\n      });\n      var propName = `_${resolvedProvider.token.name}_${this.nodeIndex}_${this._instances.size}`;\n      var instance =\n          createProviderProperty(propName, resolvedProvider, providerValueExpressions,\n                                 resolvedProvider.multiProvider, resolvedProvider.eager, this);\n      this._instances.add(resolvedProvider.token, instance);\n    });\n\n    this.directiveInstances =\n        this._directives.map((directive) => this._instances.get(identifierToken(directive.type)));\n    for (var i = 0; i < this.directiveInstances.length; i++) {\n      var directiveInstance = this.directiveInstances[i];\n      var directive = this._directives[i];\n      directive.queries.forEach((queryMeta) => { this._addQuery(queryMeta, directiveInstance); });\n    }\n    var queriesWithReads: _QueryWithRead[] = [];\n    this._resolvedProviders.values().forEach((resolvedProvider) => {\n      var queriesForProvider = this._getQueriesFor(resolvedProvider.token);\n      ListWrapper.addAll(\n          queriesWithReads,\n          queriesForProvider.map(query => new _QueryWithRead(query, resolvedProvider.token)));\n    });\n    StringMapWrapper.forEach(this.referenceTokens, (_, varName) => {\n      var token = this.referenceTokens[varName];\n      var varValue;\n      if (isPresent(token)) {\n        varValue = this._instances.get(token);\n      } else {\n        varValue = this.renderNode;\n      }\n      this.view.locals.set(varName, varValue);\n      var varToken = new CompileTokenMetadata({value: varName});\n      ListWrapper.addAll(queriesWithReads, this._getQueriesFor(varToken)\n                                               .map(query => new _QueryWithRead(query, varToken)));\n    });\n    queriesWithReads.forEach((queryWithRead) => {\n      var value: o.Expression;\n      if (isPresent(queryWithRead.read.identifier)) {\n        // query for an identifier\n        value = this._instances.get(queryWithRead.read);\n      } else {\n        // query for a reference\n        var token = this.referenceTokens[queryWithRead.read.value];\n        if (isPresent(token)) {\n          value = this._instances.get(token);\n        } else {\n          value = this.elementRef;\n        }\n      }\n      if (isPresent(value)) {\n        queryWithRead.query.addValue(value, this.view);\n      }\n    });\n\n    if (isPresent(this.component)) {\n      var componentConstructorViewQueryList =\n          isPresent(this.component) ? o.literalArr(this._componentConstructorViewQueryLists) :\n                                      o.NULL_EXPR;\n      var compExpr = isPresent(this.getComponent()) ? this.getComponent() : o.NULL_EXPR;\n      this.view.createMethod.addStmt(\n          this.appElement.callMethod(\n                             'initComponent',\n                             [compExpr, componentConstructorViewQueryList, this._compViewExpr])\n              .toStmt());\n    }\n  }\n\n  afterChildren(childNodeCount: number) {\n    this._resolvedProviders.values().forEach((resolvedProvider) => {\n      // Note: afterChildren is called after recursing into children.\n      // This is good so that an injector match in an element that is closer to a requesting element\n      // matches first.\n      var providerExpr = this._instances.get(resolvedProvider.token);\n      // Note: view providers are only visible on the injector of that element.\n      // This is not fully correct as the rules during codegen don't allow a directive\n      // to get hold of a view provdier on the same element. We still do this semantic\n      // as it simplifies our model to having only one runtime injector per element.\n      var providerChildNodeCount =\n          resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;\n      this.view.injectorGetMethod.addStmt(createInjectInternalCondition(\n          this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n    });\n\n    this._queries.values().forEach(\n        (queries) =>\n            queries.forEach((query) => query.afterChildren(this.view.updateContentQueriesMethod)));\n  }\n\n  addContentNode(ngContentIndex: number, nodeExpr: o.Expression) {\n    this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n  }\n\n  getComponent(): o.Expression {\n    return isPresent(this.component) ? this._instances.get(identifierToken(this.component.type)) :\n                                       null;\n  }\n\n  getProviderTokens(): o.Expression[] {\n    return this._resolvedProviders.values().map(\n        (resolvedProvider) => createDiTokenExpression(resolvedProvider.token));\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): CompileQuery[] {\n    var result: CompileQuery[] = [];\n    var currentEl: CompileElement = this;\n    var distance = 0;\n    var queries: CompileQuery[];\n    while (!currentEl.isNull()) {\n      queries = currentEl._queries.get(token);\n      if (isPresent(queries)) {\n        ListWrapper.addAll(result,\n                           queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directives.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl.parent;\n    }\n    queries = this.view.componentView.viewQueries.get(token);\n    if (isPresent(queries)) {\n      ListWrapper.addAll(result, queries);\n    }\n    return result;\n  }\n\n  private _addQuery(queryMeta: CompileQueryMetadata,\n                    directiveInstance: o.Expression): CompileQuery {\n    var propName = `_query_${queryMeta.selectors[0].name}_${this.nodeIndex}_${this._queryCount++}`;\n    var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);\n    var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n    addQueryToTokenMap(this._queries, query);\n    return query;\n  }\n\n  private _getLocalDependency(requestingProviderType: ProviderAstType,\n                              dep: CompileDiDependencyMetadata): o.Expression {\n    var result = null;\n    // constructor content query\n    if (isBlank(result) && isPresent(dep.query)) {\n      result = this._addQuery(dep.query, null).queryList;\n    }\n\n    // constructor view query\n    if (isBlank(result) && isPresent(dep.viewQuery)) {\n      result = createQueryList(\n          dep.viewQuery, null,\n          `_viewQuery_${dep.viewQuery.selectors[0].name}_${this.nodeIndex}_${this._componentConstructorViewQueryLists.length}`,\n          this.view);\n      this._componentConstructorViewQueryLists.push(result);\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtins with special visibility\n      if (isBlank(result)) {\n        if (dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef))) {\n          if (requestingProviderType === ProviderAstType.Component) {\n            return this._compViewExpr.prop('ref');\n          } else {\n            return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n          }\n        }\n      }\n      // access regular providers on the element\n      if (isBlank(result)) {\n        result = this._instances.get(dep.token);\n      }\n    }\n    return result;\n  }\n\n  private _getDependency(requestingProviderType: ProviderAstType,\n                         dep: CompileDiDependencyMetadata): o.Expression {\n    var currElement: CompileElement = this;\n    var result = null;\n    if (dep.isValue) {\n      result = o.literal(dep.value);\n    }\n    if (isBlank(result) && !dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep);\n    }\n    // check parent elements\n    while (isBlank(result) && !currElement.parent.isNull()) {\n      currElement = currElement.parent;\n      result = currElement._getLocalDependency(ProviderAstType.PublicService,\n                                               new CompileDiDependencyMetadata({token: dep.token}));\n    }\n\n    if (isBlank(result)) {\n      result = injectFromViewParentInjector(dep.token, dep.isOptional);\n    }\n    if (isBlank(result)) {\n      result = o.NULL_EXPR;\n    }\n    return getPropertyInView(result, this.view, currElement.view);\n  }\n}\n\nfunction createInjectInternalCondition(nodeIndex: number, childNodeCount: number,\n                                       provider: ProviderAst,\n                                       providerExpr: o.Expression): o.Statement {\n  var indexCondition;\n  if (childNodeCount > 0) {\n    indexCondition = o.literal(nodeIndex)\n                         .lowerEquals(InjectMethodVars.requestNodeIndex)\n                         .and(InjectMethodVars.requestNodeIndex.lowerEquals(\n                             o.literal(nodeIndex + childNodeCount)));\n  } else {\n    indexCondition = o.literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);\n  }\n  return new o.IfStmt(\n      InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition),\n      [new o.ReturnStatement(providerExpr)]);\n}\n\nfunction createProviderProperty(propName: string, provider: ProviderAst,\n                                providerValueExpressions: o.Expression[], isMulti: boolean,\n                                isEager: boolean, compileElement: CompileElement): o.Expression {\n  var view = compileElement.view;\n  var resolvedProviderValueExpr;\n  var type;\n  if (isMulti) {\n    resolvedProviderValueExpr = o.literalArr(providerValueExpressions);\n    type = new o.ArrayType(o.DYNAMIC_TYPE);\n  } else {\n    resolvedProviderValueExpr = providerValueExpressions[0];\n    type = providerValueExpressions[0].type;\n  }\n  if (isBlank(type)) {\n    type = o.DYNAMIC_TYPE;\n  }\n  if (isEager) {\n    view.fields.push(new o.ClassField(propName, type));\n    view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n  } else {\n    var internalField = `_${propName}`;\n    view.fields.push(new o.ClassField(internalField, type));\n    var getter = new CompileMethod(view);\n    getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n    // Note: Equals is important for JS so that it also checks the undefined case!\n    getter.addStmt(\n        new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(),\n                     [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n    getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));\n    view.getters.push(new o.ClassGetter(propName, getter.finish(), type));\n  }\n  return o.THIS_EXPR.prop(propName);\n}\n\nclass _QueryWithRead {\n  public read: CompileTokenMetadata;\n  constructor(public query: CompileQuery, match: CompileTokenMetadata) {\n    this.read = isPresent(query.meta.read) ? query.meta.read : match;\n  }\n}\n\nfunction _convertValueToOutputAst(value: any): o.Expression {\n  return visitValue(value, new _ValueOutputAstTransformer(), null);\n}\n\nclass _ValueOutputAstTransformer extends ValueTransformer {\n  visitArray(arr: any[], context: any): o.Expression {\n    return o.literalArr(arr.map(value => visitValue(value, this, context)));\n  }\n  visitStringMap(map: {[key: string]: any}, context: any): o.Expression {\n    var entries = [];\n    StringMapWrapper.forEach(\n        map, (value, key) => { entries.push([key, visitValue(value, this, context)]); });\n    return o.literalMap(entries);\n  }\n  visitPrimitive(value: any, context: any): o.Expression { return o.literal(value); }\n  visitOther(value: any, context: any): o.Expression {\n    if (value instanceof CompileIdentifierMetadata) {\n      return o.importExpr(value);\n    } else if (value instanceof o.Expression) {\n      return value;\n    } else {\n      throw new BaseException(`Illegal state: Don't now how to compile value ${value}`);\n    }\n  }\n}\n"]}