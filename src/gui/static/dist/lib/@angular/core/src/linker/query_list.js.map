{"version":3,"file":"query_list.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/query_list.ts"],"names":[],"mappings":";AAIE,2BAA0B,6BAA6B,CAAC,CAAA;AAC1D,qBAAgC,uBAAuB,CAAC,CAAA;AACxD,sBAAuC,wBAAwB,CAAC,CAAA;AAGhE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH;IAAA;QACU,WAAM,GAAG,IAAI,CAAC;QACd,aAAQ,GAAa,EAAE,CAAC;QACxB,aAAQ,GAAG,IAAI,oBAAY,EAAE,CAAC;IAoDxC,CAAC;IAlDC,sBAAI,8BAAO;aAAX,cAAiC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IACxD,sBAAI,6BAAM;aAAV,cAAuB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IACrD,sBAAI,4BAAK;aAAT,cAAiB,MAAM,CAAC,wBAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAC3D,sBAAI,2BAAI;aAAR,cAAgB,MAAM,CAAC,wBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAEzD;;OAEG;IACH,uBAAG,GAAH,UAAO,EAAkB,IAAS,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEjE;;OAEG;IACH,0BAAM,GAAN,UAAO,EAAwB,IAAS,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAE1E;;OAEG;IACH,0BAAM,GAAN,UAAU,EAA0B,EAAE,IAAO,IAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAE5F;;OAEG;IACH,2BAAO,GAAP,UAAQ,EAAqB,IAAU,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEnE;;OAEG;IACH,2BAAO,GAAP,cAAiB,MAAM,CAAC,wBAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE3D,oBAAC,wBAAiB,EAAE,CAAC,GAArB,cAA+B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE7E,4BAAQ,GAAR,cAAqB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAEvD;;OAEG;IACH,yBAAK,GAAL,UAAM,GAAqB;QACzB,IAAI,CAAC,QAAQ,GAAG,wBAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,gBAAgB;IAChB,mCAAe,GAAf,cAA0B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAErD,eAAe;IACf,4BAAQ,GAAR,cAAa,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IAGlC,sBAAI,4BAAK;QADT,eAAe;aACf,cAAc,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IACrC,gBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,iBAAS,YAuDrB,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {ListWrapper} from '../../src/facade/collection';\nimport {getSymbolIterator} from '../../src/facade/lang';\nimport {Observable, EventEmitter} from '../../src/facade/async';\n\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link QueryMetadata} and {@link ViewQueryMetadata} provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * @Component({...})\n * class Container {\n *   constructor(@Query(Item) items: QueryList<Item>) {\n *     items.changes.subscribe(_ => console.log(items.length));\n *   }\n * }\n * ```\n */\nexport class QueryList<T> {\n  private _dirty = true;\n  private _results: Array<T> = [];\n  private _emitter = new EventEmitter();\n\n  get changes(): Observable<any> { return this._emitter; }\n  get length(): number { return this._results.length; }\n  get first(): T { return ListWrapper.first(this._results); }\n  get last(): T { return ListWrapper.last(this._results); }\n\n  /**\n   * returns a new array with the passed in function applied to each element.\n   */\n  map<U>(fn: (item: T) => U): U[] { return this._results.map(fn); }\n\n  /**\n   * returns a filtered array.\n   */\n  filter(fn: (item: T) => boolean): T[] { return this._results.filter(fn); }\n\n  /**\n   * returns a reduced value.\n   */\n  reduce<U>(fn: (acc: U, item: T) => U, init: U): U { return this._results.reduce(fn, init); }\n\n  /**\n   * executes function for each element in a query.\n   */\n  forEach(fn: (item: T) => void): void { this._results.forEach(fn); }\n\n  /**\n   * converts QueryList into an array\n   */\n  toArray(): T[] { return ListWrapper.clone(this._results); }\n\n  [getSymbolIterator()](): any { return this._results[getSymbolIterator()](); }\n\n  toString(): string { return this._results.toString(); }\n\n  /**\n   * @internal\n   */\n  reset(res: Array<T | any[]>): void {\n    this._results = ListWrapper.flatten(res);\n    this._dirty = false;\n  }\n\n  /** @internal */\n  notifyOnChanges(): void { this._emitter.emit(this); }\n\n  /** internal */\n  setDirty() { this._dirty = true; }\n\n  /** internal */\n  get dirty() { return this._dirty; }\n}\n"]}