{"version":3,"file":"fake_async.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/fake_async.ts"],"names":[],"mappings":"OAIS,EAAC,aAAa,EAAC,MAAM,UAAU;AAGxC,IAAI,0BAA0B,GAAG,IAAI,CAAC,uBAAuB,CAAC,CAAC;AAE/D;;;;;;;;;;;;;;;GAeG;AACH,0BAA0B,EAAY;IACpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;QACtD,MAAM,IAAI,aAAa,CAAC,qCAAqC,CAAC,CAAC;IACjE,CAAC;IAED,IAAI,qBAAqB,GAAG,IAAI,0BAA0B,EAAE,CAAC;IAC7D,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAE7D,MAAM,CAAC,UAAS,GAAG,IAAI;QACrB,IAAI,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC;YAC1B,IAAI,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACtB,eAAe,EAAE,CAAC;YAClB,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,IAAI,aAAa,CAAC,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,MAAM,GAAG;gBACxD,uCAAuC,CAAC,CAAC;QACnE,CAAC;QAED,EAAE,CAAC,CAAC,qBAAqB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,IAAI,aAAa,CACnB,GAAG,qBAAqB,CAAC,aAAa,CAAC,MAAM,+BAA+B,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC,CAAC;AACJ,CAAC;AAED;IACE,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACzD,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC5F,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC;AAClB,CAAC;AAED;;;;;GAKG;AACH;IACE,cAAc;AAChB,CAAC;AAED;;;;;;;;;;;GAWG;AACH,qBAAqB,MAAM,GAAW,CAAC;IACrC,qBAAqB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC;AAED;;GAEG;AACH;IACE,qBAAqB,EAAE,CAAC,eAAe,EAAE,CAAC;AAC5C,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {BaseException} from '../index';\nimport {getTestInjector} from './test_injector';\n\nlet _FakeAsyncTestZoneSpecType = Zone['FakeAsyncTestZoneSpec'];\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns {Function} The function wrapped to be executed in the fakeAsync zone\n */\nexport function fakeAsync(fn: Function): Function {\n  if (Zone.current.get('FakeAsyncTestZoneSpec') != null) {\n    throw new BaseException('fakeAsync() calls can not be nested');\n  }\n\n  let fakeAsyncTestZoneSpec = new _FakeAsyncTestZoneSpecType();\n  let fakeAsyncZone = Zone.current.fork(fakeAsyncTestZoneSpec);\n\n  return function(...args) {\n    let res = fakeAsyncZone.run(() => {\n      let res = fn(...args);\n      flushMicrotasks();\n      return res;\n    });\n\n    if (fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n      throw new BaseException(`${fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n                              `periodic timer(s) still in the queue.`);\n    }\n\n    if (fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n      throw new BaseException(\n          `${fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n    }\n    return res;\n  };\n}\n\nfunction _getFakeAsyncZoneSpec(): any {\n  let zoneSpec = Zone.current.get('FakeAsyncTestZoneSpec');\n  if (zoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return zoneSpec;\n}\n\n/**\n * Clear the queue of pending timers and microtasks.\n * Tests no longer need to call this explicitly.\n *\n * @deprecated\n */\nexport function clearPendingTimers(): void {\n  // Do nothing.\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @param {number} millis Number of millisecond, defaults to 0\n */\nexport function tick(millis: number = 0): void {\n  _getFakeAsyncZoneSpec().tick(millis);\n}\n\n/**\n * Flush any pending microtasks.\n */\nexport function flushMicrotasks(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n"]}