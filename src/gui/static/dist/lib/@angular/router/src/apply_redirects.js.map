{"version":3,"file":"apply_redirects.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/apply_redirects.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatAll} from 'rxjs/operator/concatAll';\nimport {first} from 'rxjs/operator/first';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {EmptyError} from 'rxjs/util/EmptyError';\n\nimport {Route, Routes, UrlMatchResult} from './config';\nimport {LoadedRouterConfig, RouterConfigLoader} from './router_config_loader';\nimport {NavigationCancelingError, PRIMARY_OUTLET, Params, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {andObservables, forEach, merge, waitForMap, wrapIntoObservable} from './utils/collection';\n\nclass NoMatch {\n  constructor(public segmentGroup: UrlSegmentGroup = null) {}\n}\n\nclass AbsoluteRedirect {\n  constructor(public urlTree: UrlTree) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(new NavigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n\n\nexport function applyRedirects(\n    injector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  private allowRedirects: boolean = true;\n\n  constructor(\n      private injector: Injector, private configLoader: RouterConfigLoader,\n      private urlSerializer: UrlSerializer, private urlTree: UrlTree, private config: Routes) {}\n\n  apply(): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const urlTrees$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                       rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment));\n    return _catch.call(urlTrees$, (e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      } else if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  private match(tree: UrlTree): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);\n    const mapped$ = map.call(\n        expanded$, (rootSegmentGroup: UrlSegmentGroup) =>\n                       this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment));\n    return _catch.call(mapped$, (e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  private noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n\n  private createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n\n  private expandSegmentGroup(\n      injector: Injector, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return map.call(\n          this.expandChildren(injector, routes, segmentGroup),\n          (children: any) => new UrlSegmentGroup([], children));\n    } else {\n      return this.expandSegment(\n          injector, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    }\n  }\n\n  private expandChildren(injector: Injector, routes: Route[], segmentGroup: UrlSegmentGroup):\n      Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(injector, routes, child, childOutlet));\n  }\n\n  private expandSegment(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], segments: UrlSegment[],\n      outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    const routes$ = of (...routes);\n    const processedRoutes$ = map.call(routes$, (r: any) => {\n      const expanded$ = this.expandSegmentAgainstRoute(\n          injector, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return _catch.call(expanded$, (e: any) => {\n        if (e instanceof NoMatch)\n          return of (null);\n        else\n          throw e;\n      });\n    });\n    const concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\n    const first$ = first.call(concattedProcessedRoutes$, (s: any) => !!s);\n    return _catch.call(first$, (e: any, _: any): Observable<UrlSegmentGroup> => {\n      if (e instanceof EmptyError) {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of (new UrlSegmentGroup([], {}));\n        } else {\n          throw new NoMatch(segmentGroup);\n        }\n      } else {\n        throw e;\n      }\n    });\n  }\n\n  private noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n\n  private expandSegmentAgainstRoute(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) return noMatch(segmentGroup);\n    if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))\n      return noMatch(segmentGroup);\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);\n    } else {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          injector, segmentGroup, routes, route, paths, outlet);\n    }\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          injector, routes, route, outlet);\n    } else {\n      return this.expandRegularSegmentAgainstRouteUsingRedirect(\n          injector, segmentGroup, routes, route, segments, outlet);\n    }\n  }\n\n  private expandWildCardWithParamsAgainstRouteUsingRedirect(\n      injector: Injector, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const newTree = this.applyRedirectCommands([], route.redirectTo, {});\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    } else {\n      return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n        const group = new UrlSegmentGroup(newSegments, {});\n        return this.expandSegment(injector, group, routes, newSegments, outlet, false);\n      });\n    }\n  }\n\n  private expandRegularSegmentAgainstRouteUsingRedirect(\n      injector: Injector, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const newTree = this.applyRedirectCommands(\n        consumedSegments, route.redirectTo, <any>positionalParamSegments);\n    if (route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    } else {\n      return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments: UrlSegment[]) => {\n        return this.expandSegment(\n            injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n            false);\n      });\n    }\n  }\n\n  private matchSegmentAgainstRoute(\n      injector: Injector, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return map.call(this.configLoader.load(injector, route.loadChildren), (r: any) => {\n          (<any>route)._loadedConfig = r;\n          return of (new UrlSegmentGroup(segments, {}));\n        });\n      } else {\n        return of (new UrlSegmentGroup(segments, {}));\n      }\n\n    } else {\n      const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n      if (!matched) return noMatch(rawSegmentGroup);\n\n      const rawSlicedSegments = segments.slice(lastChild);\n      const childConfig$ = this.getChildConfig(injector, route);\n      return mergeMap.call(childConfig$, (routerConfig: any) => {\n        const childInjector = routerConfig.injector;\n        const childConfig = routerConfig.routes;\n        const {segmentGroup, slicedSegments} =\n            split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n          const expanded$ = this.expandChildren(childInjector, childConfig, segmentGroup);\n          return map.call(\n              expanded$, (children: any) => new UrlSegmentGroup(consumedSegments, children));\n\n        } else if (childConfig.length === 0 && slicedSegments.length === 0) {\n          return of (new UrlSegmentGroup(consumedSegments, {}));\n\n        } else {\n          const expanded$ = this.expandSegment(\n              childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n          return map.call(\n              expanded$,\n              (cs: any) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\n        }\n      });\n    }\n  }\n\n  private getChildConfig(injector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (route.children) {\n      return of (new LoadedRouterConfig(route.children, injector, null, null));\n    } else if (route.loadChildren) {\n      return mergeMap.call(runGuards(injector, route), (shouldLoad: any) => {\n        if (shouldLoad) {\n          if ((<any>route)._loadedConfig) {\n            return of ((<any>route)._loadedConfig);\n          } else {\n            return map.call(this.configLoader.load(injector, route.loadChildren), (r: any) => {\n              (<any>route)._loadedConfig = r;\n              return r;\n            });\n          }\n        } else {\n          return canLoadFails(route);\n        }\n      });\n    } else {\n      return of (new LoadedRouterConfig([], injector, null, null));\n    }\n  }\n\n  private lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      } else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo);\n      } else {\n        c = c.children[PRIMARY_OUTLET];\n      }\n    }\n  }\n\n  private applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    const t = this.urlSerializer.parse(redirectTo);\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n\n  private applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n\n  private createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      if (v.startsWith(':')) {\n        res[k] = actualParams[v.substring(1)];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  private createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  private createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n\n  private findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n\n  private findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction runGuards(injector: Injector, route: Route): Observable<boolean> {\n  const canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n  const obs = map.call(from(canLoad), (c: any) => {\n    const guard = injector.get(c);\n    if (guard.canLoad) {\n      return wrapIntoObservable(guard.canLoad(route));\n    } else {\n      return wrapIntoObservable(guard(route));\n    }\n  });\n  return andObservables(obs);\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  const noMatch =\n      {matched: false, consumedSegments: <any[]>[], lastChild: 0, positionalParamSegments: {}};\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    } else {\n      return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) return noMatch;\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    positionalParamSegments: res.posParams\n  };\n}\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n\n  } else if (\n      slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n\n  } else {\n    return {segmentGroup, slicedSegments};\n  }\n}\n\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  } else {\n    return s;\n  }\n}\n\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return merge(children, res);\n}\n\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes\n             .filter(\n                 r => emptyPathRedirect(segmentGroup, slicedSegments, r) &&\n                     getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathRedirect(segmentGroup, slicedSegments, r)).length > 0;\n}\n\nfunction emptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')\n    return false;\n  return r.path === '' && r.redirectTo !== undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}