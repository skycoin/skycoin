{"version":3,"file":"http_utils.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/http_utils.ts"],"names":[],"mappings":"OAIS,EAAC,QAAQ,EAAC,MAAM,oBAAoB;OACtC,EAAC,aAAa,EAAC,MAAM,SAAS;OAC9B,EAAC,aAAa,EAAC,MAAM,0BAA0B;AAEtD,oCAAoC,MAA8B;IAChE,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,cAAc,GAAG,MAAM,CAAC;QAC5B,MAAM,GAAY,MAAO;aACX,OAAO,CAAC,YAAY,EAAE,CAAC,EAAU,EAAE,EAAU,EAAE,EAAU,KAC/B,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;QAC7E,MAAM,GAAkC,aAAc,CAAC,MAAM,CAAC,CAAC;QAC/D,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC;YAC7B,MAAM,aAAa,CACf,uCAAuC,cAAc,qBAAqB,CAAC,CAAC;IACpF,CAAC;IACD,MAAM,CAAgB,MAAM,CAAC;AAC/B,CAAC;AAED,OAAO,MAAM,SAAS,GAAG,CAAC,MAAc,KAAc,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;AAEtF,+BAA+B,GAAQ;IACrC,EAAE,CAAC,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;IACD,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;IAChD,CAAC;IACD,MAAM,CAAC;AACT,CAAC;AAED,SAAQ,UAAU,QAAO,oBAAoB,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isString} from '../src/facade/lang';\nimport {RequestMethod} from './enums';\nimport {makeTypeError} from '../src/facade/exceptions';\n\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (isString(method)) {\n    var originalMethod = method;\n    method = (<string>method)\n                 .replace(/(\\w)(\\w*)/g, (g0: string, g1: string, g2: string) =>\n                                            g1.toUpperCase() + g2.toLowerCase());\n    method = <number>(<{[key: string]: any}>RequestMethod)[method];\n    if (typeof method !== 'number')\n      throw makeTypeError(\n          `Invalid request method. The method \"${originalMethod}\" is not supported.`);\n  }\n  return <RequestMethod>method;\n}\n\nexport const isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n\nexport {isJsObject} from '../src/facade/lang';\n"]}