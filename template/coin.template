package main

/*
CODE GENERATED AUTOMATICALLY WITH FIBER COIN CREATOR
AVOID EDITING THIS MANUALLY
*/

import (
	"flag"
	_ "net/http/pprof"
	"os"

	"github.com/skycoin/skycoin/src/readable"
	"github.com/skycoin/skycoin/src/skycoin"
	"github.com/skycoin/skycoin/src/util/logging"
)

var (
	// Version of the node. Can be set by -ldflags
	Version = "0.24.1"
	// Commit ID. Can be set by -ldflags
	Commit = ""
	// Branch name. Can be set by -ldflags
	Branch = ""
	// ConfigMode (possible values are "", "STANDALONE_CLIENT").
	// This is used to change the default configuration.
	// Can be set by -ldflags
	ConfigMode = ""

	logger = logging.MustGetLogger("main")

	// GenesisSignatureStr hex string of genesis signature
	GenesisSignatureStr = "{{.GenesisSignatureStr}}"
	// GenesisAddressStr genesis address string
	GenesisAddressStr = "{{.GenesisAddressStr}}"
	// BlockchainPubkeyStr pubic key string
	BlockchainPubkeyStr = "{{.BlockchainPubkeyStr}}"
	// BlockchainSeckeyStr empty private key string
	BlockchainSeckeyStr = "{{.BlockchainSeckeyStr}}"

	// GenesisTimestamp genesis block create unix time
	GenesisTimestamp uint64 = {{.GenesisTimestamp}}
	// GenesisCoinVolume represents the coin capacity
	GenesisCoinVolume uint64 = {{.GenesisCoinVolume}}

	// DefaultConnections the default trust node addresses
	DefaultConnections = []string{
	{{- range $index, $address := .DefaultConnections}}
		"{{$address -}}",
	{{- end}}
	}

	nodeConfig = skycoin.NewNodeConfig(ConfigMode, skycoin.NodeParameters{
		GenesisSignatureStr: GenesisSignatureStr,
		GenesisAddressStr:   GenesisAddressStr,
		GenesisCoinVolume:   GenesisCoinVolume,
		GenesisTimestamp:    GenesisTimestamp,
		BlockchainPubkeyStr: BlockchainPubkeyStr,
		BlockchainSeckeyStr: BlockchainSeckeyStr,
		DefaultConnections:  DefaultConnections,
		PeerListURL:         "{{.PeerListURL}}",
		Port:                {{.Port}},
		WebInterfacePort:    {{.WebInterfacePort}},
		DataDirectory:       "{{.DataDirectory}}",
	})

	parseFlags = true
)

func init() {
	nodeConfig.RegisterFlags()
}

func main() {
	if parseFlags {
		flag.Parse()
	}

	// create a new fiber coin instance
	coin := skycoin.NewCoin(skycoin.Config{
		Node: nodeConfig,
		Build: readable.BuildInfo{
			Version: Version,
			Commit:  Commit,
			Branch:  Branch,
		},
	}, logger)

	// parse config values
	coin.ParseConfig()

	// run fiber coin node
	if err := coin.Run(); err != nil {
		os.Exit(1)
	}
}
