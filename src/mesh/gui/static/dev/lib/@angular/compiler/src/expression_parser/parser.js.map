{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/expression_parser/parser.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Injectable} from '@angular/core';\nimport {isBlank, isPresent, StringWrapper} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {ListWrapper} from '../../src/facade/collection';\nimport {\n  Lexer,\n  EOF,\n  isIdentifier,\n  isQuote,\n  Token,\n  $PERIOD,\n  $COLON,\n  $SEMICOLON,\n  $LBRACKET,\n  $RBRACKET,\n  $COMMA,\n  $LBRACE,\n  $RBRACE,\n  $LPAREN,\n  $RPAREN,\n  $SLASH\n} from './lexer';\nimport {\n  AST,\n  EmptyExpr,\n  ImplicitReceiver,\n  PropertyRead,\n  PropertyWrite,\n  SafePropertyRead,\n  LiteralPrimitive,\n  Binary,\n  PrefixNot,\n  Conditional,\n  BindingPipe,\n  Chain,\n  KeyedRead,\n  KeyedWrite,\n  LiteralArray,\n  LiteralMap,\n  Interpolation,\n  MethodCall,\n  SafeMethodCall,\n  FunctionCall,\n  TemplateBinding,\n  ASTWithSource,\n  AstVisitor,\n  Quote\n} from './ast';\n\n\nvar _implicitReceiver = new ImplicitReceiver();\n// TODO(tbosch): Cannot make this const/final right now because of the transpiler...\nvar INTERPOLATION_REGEXP = /\\{\\{([\\s\\S]*?)\\}\\}/g;\n\nclass ParseException extends BaseException {\n  constructor(message: string, input: string, errLocation: string, ctxLocation?: any) {\n    super(`Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`);\n  }\n}\n\nexport class SplitInterpolation {\n  constructor(public strings: string[], public expressions: string[]) {}\n}\n\nexport class TemplateBindingParseResult {\n  constructor(public templateBindings: TemplateBinding[], public warnings: string[]) {}\n}\nexport class Parser {\n  constructor(/** @internal */\n              public _lexer: Lexer) {}\n\n  parseAction(input: string, location: any): ASTWithSource {\n    this._checkNoInterpolation(input, location);\n    var tokens = this._lexer.tokenize(this._stripComments(input));\n    var ast = new _ParseAST(input, location, tokens, true).parseChain();\n    return new ASTWithSource(ast, input, location);\n  }\n\n  parseBinding(input: string, location: any): ASTWithSource {\n    var ast = this._parseBindingAst(input, location);\n    return new ASTWithSource(ast, input, location);\n  }\n\n  parseSimpleBinding(input: string, location: string): ASTWithSource {\n    var ast = this._parseBindingAst(input, location);\n    if (!SimpleExpressionChecker.check(ast)) {\n      throw new ParseException(\n          'Host binding expression can only contain field access and constants', input, location);\n    }\n    return new ASTWithSource(ast, input, location);\n  }\n\n  private _parseBindingAst(input: string, location: string): AST {\n    // Quotes expressions use 3rd-party expression language. We don't want to use\n    // our lexer or parser for that, so we check for that ahead of time.\n    var quote = this._parseQuote(input, location);\n\n    if (isPresent(quote)) {\n      return quote;\n    }\n\n    this._checkNoInterpolation(input, location);\n    var tokens = this._lexer.tokenize(this._stripComments(input));\n    return new _ParseAST(input, location, tokens, false).parseChain();\n  }\n\n  private _parseQuote(input: string, location: any): AST {\n    if (isBlank(input)) return null;\n    var prefixSeparatorIndex = input.indexOf(':');\n    if (prefixSeparatorIndex == -1) return null;\n    var prefix = input.substring(0, prefixSeparatorIndex).trim();\n    if (!isIdentifier(prefix)) return null;\n    var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n    return new Quote(prefix, uninterpretedExpression, location);\n  }\n\n  parseTemplateBindings(input: string, location: any): TemplateBindingParseResult {\n    var tokens = this._lexer.tokenize(input);\n    return new _ParseAST(input, location, tokens, false).parseTemplateBindings();\n  }\n\n  parseInterpolation(input: string, location: any): ASTWithSource {\n    let split = this.splitInterpolation(input, location);\n    if (split == null) return null;\n\n    let expressions = [];\n\n    for (let i = 0; i < split.expressions.length; ++i) {\n      var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));\n      var ast = new _ParseAST(input, location, tokens, false).parseChain();\n      expressions.push(ast);\n    }\n\n    return new ASTWithSource(new Interpolation(split.strings, expressions), input, location);\n  }\n\n  splitInterpolation(input: string, location: string): SplitInterpolation {\n    var parts = StringWrapper.split(input, INTERPOLATION_REGEXP);\n    if (parts.length <= 1) {\n      return null;\n    }\n    var strings = [];\n    var expressions = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      var part: string = parts[i];\n      if (i % 2 === 0) {\n        // fixed string\n        strings.push(part);\n      } else if (part.trim().length > 0) {\n        expressions.push(part);\n      } else {\n        throw new ParseException('Blank expressions are not allowed in interpolated strings', input,\n                                 `at column ${this._findInterpolationErrorColumn(parts, i)} in`,\n                                 location);\n      }\n    }\n    return new SplitInterpolation(strings, expressions);\n  }\n\n  wrapLiteralPrimitive(input: string, location: any): ASTWithSource {\n    return new ASTWithSource(new LiteralPrimitive(input), input, location);\n  }\n\n  private _stripComments(input: string): string {\n    let i = this._commentStart(input);\n    return isPresent(i) ? input.substring(0, i).trim() : input;\n  }\n\n  private _commentStart(input: string): number {\n    var outerQuote = null;\n    for (var i = 0; i < input.length - 1; i++) {\n      let char = StringWrapper.charCodeAt(input, i);\n      let nextChar = StringWrapper.charCodeAt(input, i + 1);\n\n      if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote)) return i;\n\n      if (outerQuote === char) {\n        outerQuote = null;\n      } else if (isBlank(outerQuote) && isQuote(char)) {\n        outerQuote = char;\n      }\n    }\n    return null;\n  }\n\n  private _checkNoInterpolation(input: string, location: any): void {\n    var parts = StringWrapper.split(input, INTERPOLATION_REGEXP);\n    if (parts.length > 1) {\n      throw new ParseException('Got interpolation ({{}}) where expression was expected', input,\n                               `at column ${this._findInterpolationErrorColumn(parts, 1)} in`,\n                               location);\n    }\n  }\n\n  private _findInterpolationErrorColumn(parts: string[], partInErrIdx: number): number {\n    var errLocation = '';\n    for (var j = 0; j < partInErrIdx; j++) {\n      errLocation += j % 2 === 0 ? parts[j] : `{{${parts[j]}}}`;\n    }\n\n    return errLocation.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Lexer, },\n];\n}\n\nexport class _ParseAST {\n  index: number = 0;\n  constructor(public input: string, public location: any, public tokens: any[],\n              public parseAction: boolean) {}\n\n  peek(offset: number): Token {\n    var i = this.index + offset;\n    return i < this.tokens.length ? this.tokens[i] : EOF;\n  }\n\n  get next(): Token { return this.peek(0); }\n\n  get inputIndex(): number {\n    return (this.index < this.tokens.length) ? this.next.index : this.input.length;\n  }\n\n  advance() { this.index++; }\n\n  optionalCharacter(code: number): boolean {\n    if (this.next.isCharacter(code)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  peekKeywordLet(): boolean { return this.next.isKeywordLet(); }\n\n  peekDeprecatedKeywordVar(): boolean { return this.next.isKeywordDeprecatedVar(); }\n\n  peekDeprecatedOperatorHash(): boolean { return this.next.isOperator('#'); }\n\n  expectCharacter(code: number) {\n    if (this.optionalCharacter(code)) return;\n    this.error(`Missing expected ${StringWrapper.fromCharCode(code)}`);\n  }\n\n\n  optionalOperator(op: string): boolean {\n    if (this.next.isOperator(op)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  expectOperator(operator: string) {\n    if (this.optionalOperator(operator)) return;\n    this.error(`Missing expected operator ${operator}`);\n  }\n\n  expectIdentifierOrKeyword(): string {\n    var n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword()) {\n      this.error(`Unexpected token ${n}, expected identifier or keyword`);\n    }\n    this.advance();\n    return n.toString();\n  }\n\n  expectIdentifierOrKeywordOrString(): string {\n    var n = this.next;\n    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n      this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\n    }\n    this.advance();\n    return n.toString();\n  }\n\n  parseChain(): AST {\n    var exprs = [];\n    while (this.index < this.tokens.length) {\n      var expr = this.parsePipe();\n      exprs.push(expr);\n\n      if (this.optionalCharacter($SEMICOLON)) {\n        if (!this.parseAction) {\n          this.error(\"Binding expression cannot contain chained expression\");\n        }\n        while (this.optionalCharacter($SEMICOLON)) {\n        }  // read all semicolons\n      } else if (this.index < this.tokens.length) {\n        this.error(`Unexpected token '${this.next}'`);\n      }\n    }\n    if (exprs.length == 0) return new EmptyExpr();\n    if (exprs.length == 1) return exprs[0];\n    return new Chain(exprs);\n  }\n\n  parsePipe(): AST {\n    var result = this.parseExpression();\n    if (this.optionalOperator(\"|\")) {\n      if (this.parseAction) {\n        this.error(\"Cannot have a pipe in an action expression\");\n      }\n\n      do {\n        var name = this.expectIdentifierOrKeyword();\n        var args = [];\n        while (this.optionalCharacter($COLON)) {\n          args.push(this.parseExpression());\n        }\n        result = new BindingPipe(result, name, args);\n      } while (this.optionalOperator(\"|\"));\n    }\n\n    return result;\n  }\n\n  parseExpression(): AST { return this.parseConditional(); }\n\n  parseConditional(): AST {\n    var start = this.inputIndex;\n    var result = this.parseLogicalOr();\n\n    if (this.optionalOperator('?')) {\n      var yes = this.parsePipe();\n      if (!this.optionalCharacter($COLON)) {\n        var end = this.inputIndex;\n        var expression = this.input.substring(start, end);\n        this.error(`Conditional expression ${expression} requires all 3 expressions`);\n      }\n      var no = this.parsePipe();\n      return new Conditional(result, yes, no);\n    } else {\n      return result;\n    }\n  }\n\n  parseLogicalOr(): AST {\n    // '||'\n    var result = this.parseLogicalAnd();\n    while (this.optionalOperator('||')) {\n      result = new Binary('||', result, this.parseLogicalAnd());\n    }\n    return result;\n  }\n\n  parseLogicalAnd(): AST {\n    // '&&'\n    var result = this.parseEquality();\n    while (this.optionalOperator('&&')) {\n      result = new Binary('&&', result, this.parseEquality());\n    }\n    return result;\n  }\n\n  parseEquality(): AST {\n    // '==','!=','===','!=='\n    var result = this.parseRelational();\n    while (true) {\n      if (this.optionalOperator('==')) {\n        result = new Binary('==', result, this.parseRelational());\n      } else if (this.optionalOperator('===')) {\n        result = new Binary('===', result, this.parseRelational());\n      } else if (this.optionalOperator('!=')) {\n        result = new Binary('!=', result, this.parseRelational());\n      } else if (this.optionalOperator('!==')) {\n        result = new Binary('!==', result, this.parseRelational());\n      } else {\n        return result;\n      }\n    }\n  }\n\n  parseRelational(): AST {\n    // '<', '>', '<=', '>='\n    var result = this.parseAdditive();\n    while (true) {\n      if (this.optionalOperator('<')) {\n        result = new Binary('<', result, this.parseAdditive());\n      } else if (this.optionalOperator('>')) {\n        result = new Binary('>', result, this.parseAdditive());\n      } else if (this.optionalOperator('<=')) {\n        result = new Binary('<=', result, this.parseAdditive());\n      } else if (this.optionalOperator('>=')) {\n        result = new Binary('>=', result, this.parseAdditive());\n      } else {\n        return result;\n      }\n    }\n  }\n\n  parseAdditive(): AST {\n    // '+', '-'\n    var result = this.parseMultiplicative();\n    while (true) {\n      if (this.optionalOperator('+')) {\n        result = new Binary('+', result, this.parseMultiplicative());\n      } else if (this.optionalOperator('-')) {\n        result = new Binary('-', result, this.parseMultiplicative());\n      } else {\n        return result;\n      }\n    }\n  }\n\n  parseMultiplicative(): AST {\n    // '*', '%', '/'\n    var result = this.parsePrefix();\n    while (true) {\n      if (this.optionalOperator('*')) {\n        result = new Binary('*', result, this.parsePrefix());\n      } else if (this.optionalOperator('%')) {\n        result = new Binary('%', result, this.parsePrefix());\n      } else if (this.optionalOperator('/')) {\n        result = new Binary('/', result, this.parsePrefix());\n      } else {\n        return result;\n      }\n    }\n  }\n\n  parsePrefix(): AST {\n    if (this.optionalOperator('+')) {\n      return this.parsePrefix();\n    } else if (this.optionalOperator('-')) {\n      return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());\n    } else if (this.optionalOperator('!')) {\n      return new PrefixNot(this.parsePrefix());\n    } else {\n      return this.parseCallChain();\n    }\n  }\n\n  parseCallChain(): AST {\n    var result = this.parsePrimary();\n    while (true) {\n      if (this.optionalCharacter($PERIOD)) {\n        result = this.parseAccessMemberOrMethodCall(result, false);\n\n      } else if (this.optionalOperator('?.')) {\n        result = this.parseAccessMemberOrMethodCall(result, true);\n\n      } else if (this.optionalCharacter($LBRACKET)) {\n        var key = this.parsePipe();\n        this.expectCharacter($RBRACKET);\n        if (this.optionalOperator(\"=\")) {\n          var value = this.parseConditional();\n          result = new KeyedWrite(result, key, value);\n        } else {\n          result = new KeyedRead(result, key);\n        }\n\n      } else if (this.optionalCharacter($LPAREN)) {\n        var args = this.parseCallArguments();\n        this.expectCharacter($RPAREN);\n        result = new FunctionCall(result, args);\n\n      } else {\n        return result;\n      }\n    }\n  }\n\n  parsePrimary(): AST {\n    if (this.optionalCharacter($LPAREN)) {\n      let result = this.parsePipe();\n      this.expectCharacter($RPAREN);\n      return result;\n    } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {\n      this.advance();\n      return new LiteralPrimitive(null);\n\n    } else if (this.next.isKeywordTrue()) {\n      this.advance();\n      return new LiteralPrimitive(true);\n\n    } else if (this.next.isKeywordFalse()) {\n      this.advance();\n      return new LiteralPrimitive(false);\n\n    } else if (this.optionalCharacter($LBRACKET)) {\n      var elements = this.parseExpressionList($RBRACKET);\n      this.expectCharacter($RBRACKET);\n      return new LiteralArray(elements);\n\n    } else if (this.next.isCharacter($LBRACE)) {\n      return this.parseLiteralMap();\n\n    } else if (this.next.isIdentifier()) {\n      return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);\n\n    } else if (this.next.isNumber()) {\n      var value = this.next.toNumber();\n      this.advance();\n      return new LiteralPrimitive(value);\n\n    } else if (this.next.isString()) {\n      var literalValue = this.next.toString();\n      this.advance();\n      return new LiteralPrimitive(literalValue);\n\n    } else if (this.index >= this.tokens.length) {\n      this.error(`Unexpected end of expression: ${this.input}`);\n\n    } else {\n      this.error(`Unexpected token ${this.next}`);\n    }\n    // error() throws, so we don't reach here.\n    throw new BaseException(\"Fell through all cases in parsePrimary\");\n  }\n\n  parseExpressionList(terminator: number): any[] {\n    var result = [];\n    if (!this.next.isCharacter(terminator)) {\n      do {\n        result.push(this.parsePipe());\n      } while (this.optionalCharacter($COMMA));\n    }\n    return result;\n  }\n\n  parseLiteralMap(): LiteralMap {\n    var keys = [];\n    var values = [];\n    this.expectCharacter($LBRACE);\n    if (!this.optionalCharacter($RBRACE)) {\n      do {\n        var key = this.expectIdentifierOrKeywordOrString();\n        keys.push(key);\n        this.expectCharacter($COLON);\n        values.push(this.parsePipe());\n      } while (this.optionalCharacter($COMMA));\n      this.expectCharacter($RBRACE);\n    }\n    return new LiteralMap(keys, values);\n  }\n\n  parseAccessMemberOrMethodCall(receiver: AST, isSafe: boolean = false): AST {\n    let id = this.expectIdentifierOrKeyword();\n\n    if (this.optionalCharacter($LPAREN)) {\n      let args = this.parseCallArguments();\n      this.expectCharacter($RPAREN);\n      return isSafe ? new SafeMethodCall(receiver, id, args) : new MethodCall(receiver, id, args);\n\n    } else {\n      if (isSafe) {\n        if (this.optionalOperator(\"=\")) {\n          this.error(\"The '?.' operator cannot be used in the assignment\");\n        } else {\n          return new SafePropertyRead(receiver, id);\n        }\n      } else {\n        if (this.optionalOperator(\"=\")) {\n          if (!this.parseAction) {\n            this.error(\"Bindings cannot contain assignments\");\n          }\n\n          let value = this.parseConditional();\n          return new PropertyWrite(receiver, id, value);\n        } else {\n          return new PropertyRead(receiver, id);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  parseCallArguments(): BindingPipe[] {\n    if (this.next.isCharacter($RPAREN)) return [];\n    var positionals = [];\n    do {\n      positionals.push(this.parsePipe());\n    } while (this.optionalCharacter($COMMA));\n    return positionals;\n  }\n\n  parseBlockContent(): AST {\n    if (!this.parseAction) {\n      this.error(\"Binding expression cannot contain chained expression\");\n    }\n    var exprs = [];\n    while (this.index < this.tokens.length && !this.next.isCharacter($RBRACE)) {\n      var expr = this.parseExpression();\n      exprs.push(expr);\n\n      if (this.optionalCharacter($SEMICOLON)) {\n        while (this.optionalCharacter($SEMICOLON)) {\n        }  // read all semicolons\n      }\n    }\n    if (exprs.length == 0) return new EmptyExpr();\n    if (exprs.length == 1) return exprs[0];\n\n    return new Chain(exprs);\n  }\n\n\n  /**\n   * An identifier, a keyword, a string with an optional `-` inbetween.\n   */\n  expectTemplateBindingKey(): string {\n    var result = '';\n    var operatorFound = false;\n    do {\n      result += this.expectIdentifierOrKeywordOrString();\n      operatorFound = this.optionalOperator('-');\n      if (operatorFound) {\n        result += '-';\n      }\n    } while (operatorFound);\n\n    return result.toString();\n  }\n\n  parseTemplateBindings(): TemplateBindingParseResult {\n    var bindings: TemplateBinding[] = [];\n    var prefix = null;\n    var warnings: string[] = [];\n    while (this.index < this.tokens.length) {\n      var keyIsVar: boolean = this.peekKeywordLet();\n      if (!keyIsVar && this.peekDeprecatedKeywordVar()) {\n        keyIsVar = true;\n        warnings.push(`\"var\" inside of expressions is deprecated. Use \"let\" instead!`);\n      }\n      if (!keyIsVar && this.peekDeprecatedOperatorHash()) {\n        keyIsVar = true;\n        warnings.push(`\"#\" inside of expressions is deprecated. Use \"let\" instead!`);\n      }\n      if (keyIsVar) {\n        this.advance();\n      }\n      var key = this.expectTemplateBindingKey();\n      if (!keyIsVar) {\n        if (prefix == null) {\n          prefix = key;\n        } else {\n          key = prefix + key[0].toUpperCase() + key.substring(1);\n        }\n      }\n      this.optionalCharacter($COLON);\n      var name = null;\n      var expression = null;\n      if (keyIsVar) {\n        if (this.optionalOperator(\"=\")) {\n          name = this.expectTemplateBindingKey();\n        } else {\n          name = '\\$implicit';\n        }\n      } else if (this.next !== EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() &&\n                 !this.peekDeprecatedOperatorHash()) {\n        var start = this.inputIndex;\n        var ast = this.parsePipe();\n        var source = this.input.substring(start, this.inputIndex);\n        expression = new ASTWithSource(ast, source, this.location);\n      }\n      bindings.push(new TemplateBinding(key, keyIsVar, name, expression));\n      if (!this.optionalCharacter($SEMICOLON)) {\n        this.optionalCharacter($COMMA);\n      }\n    }\n    return new TemplateBindingParseResult(bindings, warnings);\n  }\n\n  error(message: string, index: number = null) {\n    if (isBlank(index)) index = this.index;\n\n    var location = (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\n                                                  `at the end of the expression`;\n\n    throw new ParseException(message, this.input, location, this.location);\n  }\n}\n\nclass SimpleExpressionChecker implements AstVisitor {\n  static check(ast: AST): boolean {\n    var s = new SimpleExpressionChecker();\n    ast.visit(s);\n    return s.simple;\n  }\n\n  simple = true;\n\n  visitImplicitReceiver(ast: ImplicitReceiver, context: any) {}\n\n  visitInterpolation(ast: Interpolation, context: any) { this.simple = false; }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive, context: any) {}\n\n  visitPropertyRead(ast: PropertyRead, context: any) {}\n\n  visitPropertyWrite(ast: PropertyWrite, context: any) { this.simple = false; }\n\n  visitSafePropertyRead(ast: SafePropertyRead, context: any) { this.simple = false; }\n\n  visitMethodCall(ast: MethodCall, context: any) { this.simple = false; }\n\n  visitSafeMethodCall(ast: SafeMethodCall, context: any) { this.simple = false; }\n\n  visitFunctionCall(ast: FunctionCall, context: any) { this.simple = false; }\n\n  visitLiteralArray(ast: LiteralArray, context: any) { this.visitAll(ast.expressions); }\n\n  visitLiteralMap(ast: LiteralMap, context: any) { this.visitAll(ast.values); }\n\n  visitBinary(ast: Binary, context: any) { this.simple = false; }\n\n  visitPrefixNot(ast: PrefixNot, context: any) { this.simple = false; }\n\n  visitConditional(ast: Conditional, context: any) { this.simple = false; }\n\n  visitPipe(ast: BindingPipe, context: any) { this.simple = false; }\n\n  visitKeyedRead(ast: KeyedRead, context: any) { this.simple = false; }\n\n  visitKeyedWrite(ast: KeyedWrite, context: any) { this.simple = false; }\n\n  visitAll(asts: any[]): any[] {\n    var res = ListWrapper.createFixedSize(asts.length);\n    for (var i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  visitChain(ast: Chain, context: any) { this.simple = false; }\n\n  visitQuote(ast: Quote, context: any) { this.simple = false; }\n}\n"]}