{"version":3,"file":"xhr_cache.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser-dynamic/src/xhr/xhr_cache.ts"],"names":[],"mappings":";;;;;;AAIE,yBAAkB,mBAAmB,CAAC,CAAA;AACxC,2BAA4B,6BAA6B,CAAC,CAAA;AAC1D,qBAAqB,uBAAuB,CAAC,CAAA;AAC7C,wBAA6B,0BAA0B,CAAC,CAAA;AAExD;;;;;;GAMG;AACH;IAA+B,6BAAG;IAGhC;QACE,iBAAO,CAAC;QACR,IAAI,CAAC,MAAM,GAAS,aAAO,CAAC,cAAc,CAAC;QAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,0BAAa,CAAC,4DAA4D,CAAC,CAAC;QACxF,CAAC;IACH,CAAC;IAED,uBAAG,GAAH,UAAI,GAAW;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,wBAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,wBAAc,CAAC,MAAM,CAAC,8CAA8C,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;IACH,gBAAC;AAAD,CAAC,AAlBD,CAA+B,cAAG,GAkBjC;AAlBY,iBAAS,YAkBrB,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {XHR} from '@angular/compiler';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {global} from '../../src/facade/lang';\nimport {PromiseWrapper} from '../../src/facade/promise';\n\n/**\n * An implementation of XHR that uses a template cache to avoid doing an actual\n * XHR.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n */\nexport class CachedXHR extends XHR {\n  private _cache: {[url: string]: string};\n\n  constructor() {\n    super();\n    this._cache = (<any>global).$templateCache;\n    if (this._cache == null) {\n      throw new BaseException('CachedXHR: Template cache was not found in $templateCache.');\n    }\n  }\n\n  get(url: string): Promise<string> {\n    if (this._cache.hasOwnProperty(url)) {\n      return PromiseWrapper.resolve(this._cache[url]);\n    } else {\n      return PromiseWrapper.reject('CachedXHR: Did not find cached template for ' + url, null);\n    }\n  }\n}\n"]}