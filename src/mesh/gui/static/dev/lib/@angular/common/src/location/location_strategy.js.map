{"version":3,"file":"location_strategy.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/location/location_strategy.ts"],"names":[],"mappings":";AAIE,qBAA0B,eAAe,CAAC,CAAA;AAG5C;;;;;;;;;;;;;;;GAeG;AACH;IAAA;IASA,CAAC;IAAD,uBAAC;AAAD,CAAC,AATD,IASC;AATqB,wBAAgB,mBASrC,CAAA;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACU,qBAAa,GAAmC,IAAI,kBAAW,CAAC,aAAa,CAAC,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {OpaqueToken} from '@angular/core';\nimport {UrlChangeListener} from './platform_location';\n\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).\n *\n * This is used under the hood of the {@link Location} service.\n *\n * Applications should use the {@link Router} or {@link Location} services to\n * interact with application route state.\n *\n * For instance, {@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n *\n * See these two classes for more.\n */\nexport abstract class LocationStrategy {\n  abstract path(): string;\n  abstract prepareExternalUrl(internal: string): string;\n  abstract pushState(state: any, title: string, url: string, queryParams: string): void;\n  abstract replaceState(state: any, title: string, url: string, queryParams: string): void;\n  abstract forward(): void;\n  abstract back(): void;\n  abstract onPopState(fn: UrlChangeListener): void;\n  abstract getBaseHref(): string;\n}\n\n\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {@link PathLocationStrategy}.\n *\n * If you're using {@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n *\n * ### Example\n *\n * ```\n * import {Component} from '@angular/core';\n * import {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from '@angular/router';\n * import {APP_BASE_HREF} from '@angular/common';\n *\n * @Component({directives: [ROUTER_DIRECTIVES]})\n * @RouteConfig([\n *  {...},\n * ])\n * class AppCmp {\n *   // ...\n * }\n *\n * bootstrap(AppCmp, [\n *   ROUTER_PROVIDERS,\n *   provide(APP_BASE_HREF, {useValue: '/my/app'})\n * ]);\n * ```\n */\nexport const APP_BASE_HREF: OpaqueToken = /*@ts2dart_const*/ new OpaqueToken('appBaseHref');\n"]}