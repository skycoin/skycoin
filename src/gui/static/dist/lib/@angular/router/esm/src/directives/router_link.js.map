{"version":3,"file":"router_link.js","sourceRoot":"","sources":["../../../../../../modules/@angular/router/src/directives/router_link.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  ResolvedReflectiveProvider,\n  Directive,\n  DynamicComponentLoader,\n  ViewContainerRef,\n  Attribute,\n  ComponentRef,\n  ComponentFactory,\n  ReflectiveInjector,\n  OnInit,\n  HostListener,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Optional\n} from '@angular/core';\nimport {RouterOutletMap, Router} from '../router';\nimport {RouteSegment, UrlSegment, Tree} from '../segments';\nimport {isString, isArray, isPresent} from '../facade/lang';\nimport {ObservableWrapper} from '../facade/async';\nexport class RouterLink implements OnDestroy { target: string;\n  private _commands: any[] = [];\n  private _subscription: any; href: string; isActive: boolean = false;\n\n  constructor( private _routeSegment: RouteSegment, private _router: Router) {\n    // because auxiliary links take existing primary and auxiliary routes into account,\n    // we need to update the link whenever params or other routes change.\n    this._subscription =\n        ObservableWrapper.subscribe(_router.changes, (_) => { this._updateTargetUrlAndHref(); });\n  }\n\n  ngOnDestroy() { ObservableWrapper.dispose(this._subscription); }\n  set routerLink(data: any[]|any) {\n    if (isArray(data)) {\n      this._commands = <any[]>data;\n    } else {\n      this._commands = [data];\n    }\n    this._updateTargetUrlAndHref();\n  }\n  onClick(): boolean {\n    // If no target, or if target is _self, prevent default browser behavior\n    if (!isString(this.target) || this.target == '_self') {\n      this._router.navigate(this._commands, this._routeSegment);\n      return false;\n    }\n    return true;\n  }\n\n  private _updateTargetUrlAndHref(): void {\n    let tree = this._router.createUrlTree(this._commands, this._routeSegment);\n    if (isPresent(tree)) {\n      this.href = this._router.serializeUrl(tree);\n      this.isActive = this._router.urlTree.contains(tree);\n    } else {\n      this.isActive = false;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[routerLink]'}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: RouteSegment, decorators: [{ type: Optional }, ]},\n{type: Router, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'target': [{ type: Input },],\n'href': [{ type: HostBinding },],\n'isActive': [{ type: HostBinding, args: ['class.router-link-active', ] },],\n'routerLink': [{ type: Input },],\n'onClick': [{ type: HostListener, args: [\"click\", ] },],\n};\n}\n"]}