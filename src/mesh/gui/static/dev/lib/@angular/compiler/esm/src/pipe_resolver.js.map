{"version":3,"file":"pipe_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/pipe_resolver.ts"],"names":[],"mappings":"OAIS,EAAC,iBAAiB,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAC,MAAM,eAAe;OAE/E,EAAC,eAAe,EAAC,MAAM,iBAAiB;OAExC,EAAO,SAAS,EAAE,SAAS,EAAC,MAAM,oBAAoB;OACtD,EAAC,aAAa,EAAC,MAAM,0BAA0B;AAEtD,yBAAyB,IAAS;IAChC,MAAM,CAAC,IAAI,YAAY,YAAY,CAAC;AACtC,CAAC;AACD;IAEE,YAAY,UAA4B;QACtC,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC/B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC9B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAU;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7C,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,UAAU,CAAC;YACpB,CAAC;QACH,CAAC;QACD,MAAM,IAAI,aAAa,CAAC,8BAA8B,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3E,CAAC;AAOH,CAAC;AANM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACK,2BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,CACA;AAED,OAAO,IAAI,qBAAqB,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {resolveForwardRef, Injectable, PipeMetadata, reflector} from '@angular/core';\n\nimport {ReflectorReader} from '../core_private';\n\nimport {Type, isPresent, stringify} from '../src/facade/lang';\nimport {BaseException} from '../src/facade/exceptions';\n\nfunction _isPipeMetadata(type: any): boolean {\n  return type instanceof PipeMetadata;\n}\nexport class PipeResolver {\n  private _reflector: ReflectorReader;\n  constructor(_reflector?: ReflectorReader) {\n    if (isPresent(_reflector)) {\n      this._reflector = _reflector;\n    } else {\n      this._reflector = reflector;\n    }\n  }\n\n  /**\n   * Return {@link PipeMetadata} for a given `Type`.\n   */\n  resolve(type: Type): PipeMetadata {\n    var metas = this._reflector.annotations(resolveForwardRef(type));\n    if (isPresent(metas)) {\n      var annotation = metas.find(_isPipeMetadata);\n      if (isPresent(annotation)) {\n        return annotation;\n      }\n    }\n    throw new BaseException(`No Pipe decorator found on ${stringify(type)}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n\nexport var CODEGEN_PIPE_RESOLVER = new PipeResolver(reflector);\n"]}