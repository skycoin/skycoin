{"version":3,"file":"exceptions.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/facade/exceptions.ts"],"names":[],"mappings":";;;;;;AAIE,uCAAmC,0BAA0B,CAAC,CAAA;AAChE,kCAA+B,qBAAqB,CAAC,CAAA;AAErD,kCAA+B,qBAAqB,CAAC;AAA7C,gEAA6C;AAErD;IAAmC,iCAAK;IAEtC,uBAAmB,OAAsB;QAA7B,uBAA6B,GAA7B,cAA6B;QACvC,kBAAM,OAAO,CAAC,CAAC;QADE,YAAO,GAAP,OAAO,CAAe;QAEvC,IAAI,CAAC,KAAK,GAAG,CAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/C,CAAC;IAED,gCAAQ,GAAR,cAAqB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,oBAAC;AAAD,CAAC,AARD,CAAmC,KAAK,GAQvC;AARY,qBAAa,gBAQzB,CAAA;AAED;;GAEG;AACH;IAAsC,oCAAoB;IAGxD,0BAAoB,eAAuB,EAAU,kBAAkB,EAAU,cAAe,EAC5E,QAAS;QAC3B,kBAAM,eAAe,CAAC,CAAC;QAFL,oBAAe,GAAf,eAAe,CAAQ;QAAU,uBAAkB,GAAlB,kBAAkB,CAAA;QAAU,mBAAc,GAAd,cAAc,CAAC;QAC5E,aAAQ,GAAR,QAAQ,CAAC;QAE3B,IAAI,CAAC,aAAa,GAAG,CAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC;IAED,sBAAI,4CAAc;aAAlB,cAA+B,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;;;OAAA;IAE7D,sBAAI,0CAAY;aAAhB,cAA0B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;;;OAAA;IAGtD,sBAAI,+CAAiB;aAArB,cAA+B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;;;OAAA;IAEhE,sBAAI,2CAAa;aAAjB,cAA2B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;;;OAAA;IAGxD,sBAAI,qCAAO;aAAX,cAAqB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IAE5C,sBAAI,qCAAO;aAAX,cAAwB,MAAM,CAAC,oCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAE1E,mCAAQ,GAAR,cAAqB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,uBAAC;AAAD,CAAC,AAxBD,CAAsC,6CAAoB,GAwBzD;AAxBY,wBAAgB,mBAwB5B,CAAA;AAED,uBAA8B,OAAgB;IAC5C,MAAM,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC;AAFe,qBAAa,gBAE5B,CAAA;AAED;IACE,MAAM,IAAI,aAAa,CAAC,eAAe,CAAC,CAAC;AAC3C,CAAC;AAFe,qBAAa,gBAE5B,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {BaseWrappedException} from './base_wrapped_exception';\nimport {ExceptionHandler} from './exception_handler';\n\nexport {ExceptionHandler} from './exception_handler';\n\nexport class BaseException extends Error {\n  public stack: any;\n  constructor(public message: string = \"--\") {\n    super(message);\n    this.stack = (<any>new Error(message)).stack;\n  }\n\n  toString(): string { return this.message; }\n}\n\n/**\n * Wraps an exception and provides additional context or information.\n */\nexport class WrappedException extends BaseWrappedException {\n  private _wrapperStack: any;\n\n  constructor(private _wrapperMessage: string, private _originalException, private _originalStack?,\n              private _context?) {\n    super(_wrapperMessage);\n    this._wrapperStack = (<any>new Error(_wrapperMessage)).stack;\n  }\n\n  get wrapperMessage(): string { return this._wrapperMessage; }\n\n  get wrapperStack(): any { return this._wrapperStack; }\n\n\n  get originalException(): any { return this._originalException; }\n\n  get originalStack(): any { return this._originalStack; }\n\n\n  get context(): any { return this._context; }\n\n  get message(): string { return ExceptionHandler.exceptionToString(this); }\n\n  toString(): string { return this.message; }\n}\n\nexport function makeTypeError(message?: string): Error {\n  return new TypeError(message);\n}\n\nexport function unimplemented(): any {\n  throw new BaseException('unimplemented');\n}\n"]}