{"version":3,"file":"profile.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/profile/profile.ts"],"names":[],"mappings":";AAMA,IAAY,IAAI,WAAM,YAAY,CAAC,CAAA;AAEnC,6EAA6E;AAE7E;;GAEG;AACQ,kBAAU,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AAEzC,mBAAmB,IAAU,EAAE,IAAU;IACvC,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACQ,sBAAc,GACrB,kBAAU,GAAG,IAAI,CAAC,WAAW,GAAG,UAAC,SAAiB,EAAE,KAAW,IAAK,OAAA,SAAS,EAAT,CAAS,CAAC;AAElF;;;;;;;GAOG;AACQ,gBAAQ,GACf,kBAAU,GAAG,IAAI,CAAC,KAAK,GAAG,UAAC,CAAM,EAAE,CAAO,IAAK,OAAA,CAAC,EAAD,CAAC,CAAC;AAErD;;;;;;;;;;;GAWG;AACQ,yBAAiB,GACxB,kBAAU,GAAG,IAAI,CAAC,cAAc,GAAG,UAAC,SAAiB,EAAE,MAAc,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC;AAEnF;;;;GAIG;AACQ,uBAAe,GAAyB,kBAAU,GAAG,IAAI,CAAC,YAAY,GAAG,UAAC,CAAM;IACH,OAAA,IAAI;AAAJ,CAAI,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  export {WtfScopeFn} from './wtf_impl';\n\nimport * as impl from './wtf_impl';\n\n// Change exports to const once https://github.com/angular/ts2dart/issues/150\n\n/**\n * True if WTF is enabled.\n */\nexport var wtfEnabled = impl.detectWTF();\n\nfunction noopScope(arg0?: any, arg1?: any): any {\n  return null;\n}\n\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n */\nexport var wtfCreateScope: (signature: string, flags?: any) => impl.WtfScopeFn =\n    wtfEnabled ? impl.createScope : (signature: string, flags?: any) => noopScope;\n\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n */\nexport var wtfLeave:<T>(scope: any, returnValue?: T) => T =\n    wtfEnabled ? impl.leave : (s: any, r?: any) => r;\n\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n */\nexport var wtfStartTimeRange: (rangeType: string, action: string) => any =\n    wtfEnabled ? impl.startTimeRange : (rangeType: string, action: string) => null;\n\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n */\nexport var wtfEndTimeRange: (range: any) => void = wtfEnabled ? impl.endTimeRange : (r: any) =>\n                                                                                        null;\n"]}