{"version":3,"file":"link.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/link.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Tree, TreeNode, UrlSegment, RouteSegment, rootNode, UrlTree, RouteTree} from './segments';\nimport {isBlank, isPresent, isString, isStringMap} from './facade/lang';\nimport {BaseException} from './facade/exceptions';\nimport {ListWrapper} from './facade/collection';\n\n// TODO: vsavkin: should reuse segments\nexport function link(segment: RouteSegment, routeTree: RouteTree, urlTree: UrlTree, commands: any[]): UrlTree {\n  if (commands.length === 0) return urlTree;\n\n  let normalizedCommands = _normalizeCommands(commands);\n  if (_navigateToRoot(normalizedCommands)) {\n    return new UrlTree(new TreeNode<UrlSegment>(urlTree.root, []));\n  }\n\n  let startingNode = _findStartingNode(normalizedCommands, urlTree, segment, routeTree);\n  let updated = normalizedCommands.commands.length > 0 ?\n    _updateMany(ListWrapper.clone(startingNode.children), normalizedCommands.commands) : [];\n  let newRoot = _constructNewTree(rootNode(urlTree), startingNode, updated);\n\n  return new UrlTree(newRoot);\n}\n\nfunction _navigateToRoot(normalizedChange:_NormalizedNavigationCommands):boolean {\n  return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == \"/\";\n}\n\nclass _NormalizedNavigationCommands {\n  constructor(public isAbsolute: boolean,\n              public numberOfDoubleDots: number,\n              public commands: any[]) {}\n}\n\nfunction _normalizeCommands(commands: any[]): _NormalizedNavigationCommands {;''\n  if (isString(commands[0]) && commands.length === 1 && commands[0] == \"/\") {\n    return new _NormalizedNavigationCommands(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n  let res = [];\n\n  for (let i = 0; i < commands.length; ++i) {\n    let c = commands[i];\n\n    if (!isString(c)) {\n      res.push(c);\n      continue;\n    }\n\n    let parts = c.split('/');\n    for (let j = 0; j < parts.length; ++j) {\n      let cc = parts[j];\n\n      // first exp is treated in a special way\n      if (i == 0) {\n        if (j == 0 && cc == \".\") { //  './a'\n          // skip it\n        } else if (j == 0 && cc == \"\") { //  '/a'\n          isAbsolute = true;\n        } else if (cc == \"..\") { //  '../a'\n          numberOfDoubleDots++;\n        } else if (cc != '') {\n          res.push(cc);\n        }\n\n      } else {\n        if (cc != ''){\n          res.push(cc);\n        }\n      }\n    }\n  }\n\n  return new _NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);\n}\n\nfunction _findUrlSegment(segment: RouteSegment, routeTree: RouteTree, urlTree: UrlTree, numberOfDoubleDots: number): UrlSegment {\n  let s = segment;\n  while (s.urlSegments.length === 0) {\n    s = routeTree.parent(s);\n  }\n  let urlSegment = ListWrapper.last(s.urlSegments);\n  let path = urlTree.pathFromRoot(urlSegment);\n  if (path.length <= numberOfDoubleDots) {\n    throw new BaseException(\"Invalid number of '../'\");\n  }\n  return path[path.length - 1 - numberOfDoubleDots];\n}\n\nfunction _findStartingNode(normalizedChange:_NormalizedNavigationCommands, urlTree:UrlTree, segment:RouteSegment, routeTree:RouteTree):TreeNode<UrlSegment> {\n  if (normalizedChange.isAbsolute) {\n    return rootNode(urlTree);\n  } else {\n    let urlSegment = _findUrlSegment(segment, routeTree, urlTree, normalizedChange.numberOfDoubleDots);\n    return _findMatchingNode(urlSegment, rootNode(urlTree));\n  }\n}\n\nfunction _findMatchingNode(segment: UrlSegment, node: TreeNode<UrlSegment>): TreeNode<UrlSegment> {\n  if (node.value === segment) return node;\n  for (var c of node.children) {\n    let r = _findMatchingNode(segment, c);\n    if (isPresent(r)) return r;\n  }\n  return null;\n}\n\nfunction _constructNewTree(node: TreeNode<UrlSegment>, original: TreeNode<UrlSegment>,\n                           updated: TreeNode<UrlSegment>[]): TreeNode<UrlSegment> {\n  if (node === original) {\n    return new TreeNode<UrlSegment>(node.value, updated);\n  } else {\n    return new TreeNode<UrlSegment>(\n        node.value, node.children.map(c => _constructNewTree(c, original, updated)));\n  }\n}\n\nfunction _update(node: TreeNode<UrlSegment>, commands: any[]): TreeNode<UrlSegment> {\n  let rest = commands.slice(1);\n  let next = rest.length === 0 ? null : rest[0];\n  let outlet = _outlet(commands);\n  let segment = _segment(commands);\n\n  // reach the end of the tree => create new tree nodes.\n  if (isBlank(node) && !isStringMap(next)) {\n    let urlSegment = new UrlSegment(segment, {}, outlet);\n    let children = rest.length === 0 ? [] : [_update(null, rest)];\n    return new TreeNode<UrlSegment>(urlSegment, children);\n\n  } else if (isBlank(node) && isStringMap(next)) {\n    let urlSegment = new UrlSegment(segment, next, outlet);\n    return _recurse(urlSegment, node, rest.slice(1));\n    \n  // different outlet => preserve the subtree\n  } else if (outlet != node.value.outlet) {\n    return node;\n\n  // params command\n  } else if (isStringMap(segment)) {\n    let newSegment = new UrlSegment(node.value.segment, segment, node.value.outlet);\n    return _recurse(newSegment, node, rest);\n\n  // next one is a params command\n  } else if (isStringMap(next)) {\n    let urlSegment = new UrlSegment(segment, next, outlet);\n    return _recurse(urlSegment, node, rest.slice(1));\n\n  // next one is not a params command\n  } else {\n    let urlSegment = new UrlSegment(segment, {}, outlet);\n    return _recurse(urlSegment, node, rest);\n  }\n}\n\nfunction _recurse(urlSegment: UrlSegment, node: TreeNode<UrlSegment>, rest: any[]): TreeNode<UrlSegment> {\n  if (rest.length === 0) {\n    return new TreeNode<UrlSegment>(urlSegment, []);\n  }\n  return new TreeNode<UrlSegment>(urlSegment, _updateMany(ListWrapper.clone(node.children), rest));\n}\n\nfunction _updateMany(nodes: TreeNode<UrlSegment>[], commands: any[]): TreeNode<UrlSegment>[] {\n  let outlet = _outlet(commands);\n  let nodesInRightOutlet = nodes.filter(c => c.value.outlet == outlet);\n  if (nodesInRightOutlet.length > 0) {\n    let nodeRightOutlet = nodesInRightOutlet[0];  // there can be only one\n    nodes[nodes.indexOf(nodeRightOutlet)] = _update(nodeRightOutlet, commands);\n  } else {\n    nodes.push(_update(null, commands));\n  }\n\n  return nodes;\n}\n\nfunction _segment(commands: any[]): any {\n  if (!isString(commands[0])) return commands[0];\n  let parts = commands[0].toString().split(\":\");\n  return parts.length > 1 ? parts[1] : commands[0];\n}\n\nfunction _outlet(commands: any[]): string {\n  if (!isString(commands[0])) return null;\n  let parts = commands[0].toString().split(\":\");\n  return parts.length > 1 ? parts[0] : null;\n}\n"]}