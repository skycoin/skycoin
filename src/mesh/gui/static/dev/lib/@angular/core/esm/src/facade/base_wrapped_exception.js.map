{"version":3,"file":"base_wrapped_exception.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/facade/base_wrapped_exception.ts"],"names":[],"mappings":"AAIE;;;;EAIC;AACH,0CAA0C,KAAK;IAC7C,YAAY,OAAe;QAAI,MAAM,OAAO,CAAC,CAAC;IAAC,CAAC;IAEhD,IAAI,cAAc,KAAa,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,IAAI,YAAY,KAAU,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,IAAI,iBAAiB,KAAU,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7C,IAAI,aAAa,KAAU,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACzC,IAAI,OAAO,KAAU,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACnC,IAAI,OAAO,KAAa,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACtC,CAAC;AAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  /**\n * A base class for the WrappedException that can be used to identify\n * a WrappedException from ExceptionHandler without adding circular\n * dependency.\n */\nexport class BaseWrappedException extends Error {\n  constructor(message: string) { super(message); }\n\n  get wrapperMessage(): string { return ''; }\n  get wrapperStack(): any { return null; }\n  get originalException(): any { return null; }\n  get originalStack(): any { return null; }\n  get context(): any { return null; }\n  get message(): string { return ''; }\n}\n"]}