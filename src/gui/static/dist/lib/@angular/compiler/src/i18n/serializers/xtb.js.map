{"version":3,"file":"xtb.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/xtb.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ml from '../../ml_parser/ast';\nimport {HtmlParser} from '../../ml_parser/html_parser';\nimport {InterpolationConfig} from '../../ml_parser/interpolation_config';\nimport {XmlParser} from '../../ml_parser/xml_parser';\nimport {ParseError} from '../../parse_util';\nimport * as i18n from '../i18n_ast';\nimport {MessageBundle} from '../message_bundle';\nimport {I18nError} from '../parse_util';\n\nimport {Serializer, extractPlaceholderToIds, extractPlaceholders} from './serializer';\n\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG = 'ph';\n\nexport class Xtb implements Serializer {\n  constructor(private _htmlParser: HtmlParser, private _interpolationConfig: InterpolationConfig) {}\n\n  write(messageMap: {[id: string]: i18n.Message}): string { throw new Error('Unsupported'); }\n\n  load(content: string, url: string, messageBundle: MessageBundle): {[id: string]: ml.Node[]} {\n    // Parse the xtb file into xml nodes\n    const result = new XmlParser().parse(content, url);\n\n    if (result.errors.length) {\n      throw new Error(`xtb parse errors:\\n${result.errors.join('\\n')}`);\n    }\n\n    // Replace the placeholders, messages are now string\n    const {messages, errors} = new _Visitor().parse(result.rootNodes, messageBundle);\n\n    if (errors.length) {\n      throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n    }\n\n    // Convert the string messages to html ast\n    // TODO(vicb): map error message back to the original message in xtb\n    const messageMap: {[id: string]: ml.Node[]} = {};\n    const parseErrors: ParseError[] = [];\n\n    Object.keys(messages).forEach((id) => {\n      const res = this._htmlParser.parse(messages[id], url, true, this._interpolationConfig);\n      parseErrors.push(...res.errors);\n      messageMap[id] = res.rootNodes;\n    });\n\n    if (parseErrors.length) {\n      throw new Error(`xtb parse errors:\\n${parseErrors.join('\\n')}`);\n    }\n\n    return messageMap;\n  }\n}\n\nclass _Visitor implements ml.Visitor {\n  private _messageNodes: [string, ml.Node[]][];\n  private _translatedMessages: {[id: string]: string};\n  private _bundleDepth: number;\n  private _translationDepth: number;\n  private _errors: I18nError[];\n  private _placeholders: {[name: string]: string};\n  private _placeholderToIds: {[name: string]: string};\n\n  parse(nodes: ml.Node[], messageBundle: MessageBundle):\n      {messages: {[k: string]: string}, errors: I18nError[]} {\n    this._messageNodes = [];\n    this._translatedMessages = {};\n    this._bundleDepth = 0;\n    this._translationDepth = 0;\n    this._errors = [];\n\n    // Find all messages\n    ml.visitAll(this, nodes, null);\n\n    const messageMap = messageBundle.getMessageMap();\n    const placeholders = extractPlaceholders(messageBundle);\n    const placeholderToIds = extractPlaceholderToIds(messageBundle);\n\n    this._messageNodes\n        .filter(message => {\n          // Remove any messages that is not present in the source message bundle.\n          return messageMap.hasOwnProperty(message[0]);\n        })\n        .sort((a, b) => {\n          // Because there could be no ICU placeholders inside an ICU message,\n          // we do not need to take into account the `placeholderToMsgIds` of the referenced\n          // messages, those would always be empty\n          // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()\n          if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {\n            return -1;\n          }\n\n          if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {\n            return 1;\n          }\n\n          return 0;\n        })\n        .forEach(message => {\n          const id = message[0];\n          this._placeholders = placeholders[id] || {};\n          this._placeholderToIds = placeholderToIds[id] || {};\n          // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`\n          this._translatedMessages[id] = ml.visitAll(this, message[1]).join('');\n        });\n\n    return {messages: this._translatedMessages, errors: this._errors};\n  }\n\n  visitElement(element: ml.Element, context: any): any {\n    switch (element.name) {\n      case _TRANSLATIONS_TAG:\n        this._bundleDepth++;\n        if (this._bundleDepth > 1) {\n          this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n        }\n        ml.visitAll(this, element.children, null);\n        this._bundleDepth--;\n        break;\n\n      case _TRANSLATION_TAG:\n        this._translationDepth++;\n        if (this._translationDepth > 1) {\n          this._addError(element, `<${_TRANSLATION_TAG}> elements can not be nested`);\n        }\n        const idAttr = element.attrs.find((attr) => attr.name === 'id');\n        if (!idAttr) {\n          this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n        } else {\n          // ICU placeholders are reference to other messages.\n          // The referenced message might not have been decoded yet.\n          // We need to have all messages available to make sure deps are decoded first.\n          // TODO(vicb): report an error on duplicate id\n          this._messageNodes.push([idAttr.value, element.children]);\n        }\n        this._translationDepth--;\n        break;\n\n      case _PLACEHOLDER_TAG:\n        const nameAttr = element.attrs.find((attr) => attr.name === 'name');\n        if (!nameAttr) {\n          this._addError(element, `<${_PLACEHOLDER_TAG}> misses the \"name\" attribute`);\n        } else {\n          const name = nameAttr.value;\n          if (this._placeholders.hasOwnProperty(name)) {\n            return this._placeholders[name];\n          }\n          if (this._placeholderToIds.hasOwnProperty(name) &&\n              this._translatedMessages.hasOwnProperty(this._placeholderToIds[name])) {\n            return this._translatedMessages[this._placeholderToIds[name]];\n          }\n          // TODO(vicb): better error message for when\n          // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[name])\n          this._addError(\n              element, `The placeholder \"${name}\" does not exists in the source message`);\n        }\n        break;\n\n      default:\n        this._addError(element, 'Unexpected tag');\n    }\n  }\n\n  visitAttribute(attribute: ml.Attribute, context: any): any {\n    throw new Error('unreachable code');\n  }\n\n  visitText(text: ml.Text, context: any): any { return text.value; }\n\n  visitComment(comment: ml.Comment, context: any): any { return ''; }\n\n  visitExpansion(expansion: ml.Expansion, context: any): any {\n    const strCases = expansion.cases.map(c => c.visit(this, null));\n\n    return `{${expansion.switchValue}, ${expansion.type}, strCases.join(' ')}`;\n  }\n\n  visitExpansionCase(expansionCase: ml.ExpansionCase, context: any): any {\n    return `${expansionCase.value} {${ml.visitAll(this, expansionCase.expression, null)}}`;\n  }\n\n  private _addError(node: ml.Node, message: string): void {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}