{"version":3,"file":"control_value_accessor.js","sourceRoot":"","sources":["../../../../../modules/@angular/forms/src/directives/control_value_accessor.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,WAAW,EAAC,MAAM,eAAe;AAqCzC;;;;;GAKG;AACH,OAAO,IAAM,iBAAiB,GAAgB,IAAI,WAAW,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OpaqueToken} from '@angular/core';\n\n/**\n * A bridge between a control and a native element.\n *\n * A `ControlValueAccessor` abstracts the operations of writing a new value to a\n * DOM element representing an input control.\n *\n * Please see {@link DefaultValueAccessor} for more information.\n *\n * @stable\n */\nexport interface ControlValueAccessor {\n  /**\n   * Write a new value to the element.\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * Set the function to be called when the control receives a change event.\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * Set the function to be called when the control receives a touch event.\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * This function is called when the control status changes to or from \"DISABLED\".\n   * Depending on the value, it will enable or disable the appropriate DOM element.\n   *\n   * @param isDisabled\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n\n/**\n * Used to provide a {@link ControlValueAccessor} for form controls.\n *\n * See {@link DefaultValueAccessor} for how to implement one.\n * @stable\n */\nexport const NG_VALUE_ACCESSOR: OpaqueToken = new OpaqueToken('NgValueAccessor');\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}