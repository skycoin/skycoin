{"version":3,"file":"abstract_control_directive.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms/directives/abstract_control_directive.ts"],"names":[],"mappings":"OAKO,EAAC,SAAS,EAAC,MAAM,0BAA0B;OAC3C,EAAC,aAAa,EAAC,MAAM,gCAAgC;AAE5D;;;;GAIG;AACH;IACE,IAAI,OAAO,KAAsB,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAE1D,IAAI,KAAK,KAAU,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IAEhF,IAAI,KAAK,KAAc,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IAEpF,IAAI,MAAM;QACR,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAC9D,CAAC;IAED,IAAI,QAAQ,KAAc,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;IAE1F,IAAI,KAAK,KAAc,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IAEpF,IAAI,OAAO,KAAc,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;IAExF,IAAI,SAAS,KAAc,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;IAE5F,IAAI,IAAI,KAAe,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AACvC,CAAC;AAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {AbstractControl} from '../model';\nimport {isPresent} from '../../../src/facade/lang';\nimport {unimplemented} from '../../../src/facade/exceptions';\n\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n */\nexport abstract class AbstractControlDirective {\n  get control(): AbstractControl { return unimplemented(); }\n\n  get value(): any { return isPresent(this.control) ? this.control.value : null; }\n\n  get valid(): boolean { return isPresent(this.control) ? this.control.valid : null; }\n\n  get errors(): {[key: string]: any} {\n    return isPresent(this.control) ? this.control.errors : null;\n  }\n\n  get pristine(): boolean { return isPresent(this.control) ? this.control.pristine : null; }\n\n  get dirty(): boolean { return isPresent(this.control) ? this.control.dirty : null; }\n\n  get touched(): boolean { return isPresent(this.control) ? this.control.touched : null; }\n\n  get untouched(): boolean { return isPresent(this.control) ? this.control.untouched : null; }\n\n  get path(): string[] { return null; }\n}\n"]}