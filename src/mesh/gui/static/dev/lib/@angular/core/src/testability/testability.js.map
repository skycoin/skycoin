{"version":3,"file":"testability.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/testability/testability.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Map, MapWrapper} from '../../src/facade/collection';\nimport {scheduleMicroTask} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {NgZone} from '../zone/ng_zone';\nimport {ObservableWrapper} from '../../src/facade/async';\nimport {Injectable} from '../di/decorators';\nexport class Testability {\n  /** @internal */\n  _pendingCount: number = 0;\n  /** @internal */\n  _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  _didWork: boolean = false;\n  /** @internal */\n  _callbacks: Function[] = [];\n  constructor(private _ngZone: NgZone) { this._watchAngularEvents(); }\n\n  /** @internal */\n  _watchAngularEvents(): void {\n    ObservableWrapper.subscribe(this._ngZone.onUnstable, (_) => {\n      this._didWork = true;\n      this._isZoneStable = false;\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      ObservableWrapper.subscribe(this._ngZone.onStable, (_) => {\n        NgZone.assertNotInAngularZone();\n        scheduleMicroTask(() => {\n          this._isZoneStable = true;\n          this._runCallbacksIfReady();\n        });\n      });\n    });\n  }\n\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new BaseException('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  /** @internal */\n  _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          (this._callbacks.pop())(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Not Ready\n      this._didWork = true;\n    }\n  }\n\n  whenStable(callback: Function): void {\n    this._callbacks.push(callback);\n    this._runCallbacksIfReady();\n  }\n\n  getPendingRequestCount(): number { return this._pendingCount; }\n\n  findBindings(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: NgZone, },\n];\n}\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  constructor() { _testabilityGetter.addToWindow(this); }\n\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  getTestability(elem: any): Testability { return this._applications.get(elem); }\n\n  getAllTestabilities(): Testability[] { return MapWrapper.values(this._applications); }\n\n  getAllRootElements(): any[] { return MapWrapper.keys(this._applications); }\n\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any,\n                        findInAncestors: boolean): Testability;\n}\n\n/* @ts2dart_const */\nclass _NoopGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {}\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any,\n                        findInAncestors: boolean): Testability {\n    return null;\n  }\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nvar _testabilityGetter: GetTestability = /*@ts2dart_const*/ new _NoopGetTestability();\n"]}