{"version":3,"file":"error_handler.js","sourceRoot":"","sources":["../../../../modules/@angular/core/src/error_handler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {WrappedError} from './facade/errors';\n\n/**\n * @whatItDoes Provides a hook for centralized exception handling.\n *\n * @description\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @stable\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  /**\n   * @internal\n   */\n  rethrowError: boolean;\n\n  constructor(rethrowError: boolean = true) { this.rethrowError = rethrowError; }\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n    const originalStack = this._findOriginalStack(error);\n    const context = this._findContext(error);\n\n    this._console.error(`EXCEPTION: ${this._extractMessage(error)}`);\n\n    if (originalError) {\n      this._console.error(`ORIGINAL EXCEPTION: ${this._extractMessage(originalError)}`);\n    }\n\n    if (originalStack) {\n      this._console.error('ORIGINAL STACKTRACE:');\n      this._console.error(originalStack);\n    }\n\n    if (context) {\n      this._console.error('ERROR CONTEXT:');\n      this._console.error(context);\n    }\n\n    // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n    // when an error happens. If we do not rethrow, bootstrap will always succeed.\n    if (this.rethrowError) throw error;\n  }\n\n  /** @internal */\n  _extractMessage(error: any): string {\n    return error instanceof Error ? error.message : error.toString();\n  }\n\n  /** @internal */\n  _findContext(error: any): any {\n    if (error) {\n      return error.context ? error.context :\n                             this._findContext((error as WrappedError).originalError);\n    }\n\n    return null;\n  }\n\n  /** @internal */\n  _findOriginalError(error: any): any {\n    let e = (error as WrappedError).originalError;\n    while (e && (e as WrappedError).originalError) {\n      e = (e as WrappedError).originalError;\n    }\n\n    return e;\n  }\n\n  /** @internal */\n  _findOriginalStack(error: any): string {\n    if (!(error instanceof Error)) return null;\n\n    let e: any = error;\n    let stack: string = e.stack;\n    while (e instanceof Error && (e as WrappedError).originalError) {\n      e = (e as WrappedError).originalError;\n      if (e instanceof Error && e.stack) {\n        stack = e.stack;\n      }\n    }\n\n    return stack;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}