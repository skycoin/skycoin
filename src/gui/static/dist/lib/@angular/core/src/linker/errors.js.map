{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/errors.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAC,aAAa,EAAC,MAAM,2CAA2C;OAChE,EAAC,SAAS,EAAE,YAAY,EAAC,MAAM,kBAAkB;AAMxD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IAAiE,+DAAS;IACxE,qDAAY,QAAa,EAAE,SAAc;QACvC,IAAI,GAAG,GACH,mEAAiE,QAAQ,2BAAsB,SAAS,OAAI,CAAC;QACjH,EAAE,CAAC,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC;YAC/B,GAAG;gBACC,qGAAqG;oBACrG,mDAAmD,CAAC;QAC1D,CAAC;QACD,kBAAM,GAAG,CAAC,CAAC;IACb,CAAC;IACH,kDAAC;AAAD,CAAC,AAXD,CAAiE,SAAS,GAWzE;AAED;;;;;;GAMG;AACH;IAAsC,oCAAY;IAMhD,0BAAY,aAAkB,EAAE,OAAqB;QACnD,kBAAM,cAAY,OAAO,CAAC,MAAQ,EAAE,aAAa,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IACH,uBAAC;AAAD,CAAC,AAVD,CAAsC,YAAY,GAUjD;AAED;;;;;;;GAOG;AACH;IAAwC,sCAAS;IAC/C,4BAAY,OAAe;QAAI,kBAAM,sCAAoC,OAAS,CAAC,CAAC;IAAC,CAAC;IACxF,yBAAC;AAAD,CAAC,AAFD,CAAwC,SAAS,GAEhD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UNINITIALIZED} from '../change_detection/change_detection_util';\nimport {BaseError, WrappedError} from '../facade/errors';\n\nimport {DebugContext} from './debug_context';\n\n\n\n/**\n * An error thrown if application changes model breaking the top-down data flow.\n *\n * This exception is only thrown in dev mode.\n *\n * <!-- TODO: Add a link once the dev mode option is configurable -->\n *\n * ### Example\n *\n * ```typescript\n * @Component({\n *   selector: 'parent',\n *   template: '<child [prop]=\"parentProp\"></child>',\n * })\n * class Parent {\n *   parentProp = 'init';\n * }\n *\n * @Directive({selector: 'child', inputs: ['prop']})\n * class Child {\n *   constructor(public parent: Parent) {}\n *\n *   set prop(v) {\n *     // this updates the parent property, which is disallowed during change detection\n *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n *     this.parent.parentProp = 'updated';\n *   }\n * }\n * ```\n * @stable\n */\nexport class ExpressionChangedAfterItHasBeenCheckedError extends BaseError {\n  constructor(oldValue: any, currValue: any) {\n    let msg =\n        `Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (oldValue === UNINITIALIZED) {\n      msg +=\n          ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n          ` Has it been created in a change detection hook ?`;\n    }\n    super(msg);\n  }\n}\n\n/**\n * Thrown when an exception was raised during view creation, change detection or destruction.\n *\n * This error wraps the original exception to attach additional contextual information that can\n * be useful for debugging.\n * @stable\n */\nexport class ViewWrappedError extends WrappedError {\n  /**\n   * DebugContext\n   */\n  context: DebugContext;\n\n  constructor(originalError: any, context: DebugContext) {\n    super(`Error in ${context.source}`, originalError);\n    this.context = context;\n  }\n}\n\n/**\n * Thrown when a destroyed view is used.\n *\n * This error indicates a bug in the framework.\n *\n * This is an internal Angular error.\n * @stable\n */\nexport class ViewDestroyedError extends BaseError {\n  constructor(details: string) { super(`Attempt to use a destroyed view: ${details}`); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}