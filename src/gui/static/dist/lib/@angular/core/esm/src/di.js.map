{"version":3,"file":"di.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di.ts"],"names":[],"mappings":"AAIE;;;;EAIC;AAEH,SACE,cAAc,EACd,gBAAgB,EAChB,kBAAkB,EAClB,YAAY,EACZ,YAAY,EACZ,gBAAgB,EAChB,kBAAkB,QACb,eAAe,CAAC;AAEvB,+EAA+E;AAC/E,cAAc,iBAAiB,CAAC;AAEhC,SAAQ,UAAU,EAAE,iBAAiB,QAAqB,kBAAkB,CAAC;AAE7E,SAAQ,QAAQ,QAAO,eAAe,CAAC;AACvC,SAAQ,kBAAkB,QAAO,0BAA0B,CAAC;AAC5D,SACE,OAAO,EACP,eAAe,EACf,IAAI,EAEJ,QAAQ,EACR,OAAO,QACF,eAAe,CAAC;AACvB,SAEE,yBAAyB,EACzB,oBAAoB,QAGf,0BAA0B,CAAC;AAClC,SAAQ,aAAa,QAAO,qBAAqB,CAAC;AAClD,SACE,eAAe,EACf,qBAAqB,EACrB,qBAAqB,EACrB,kBAAkB,EAClB,oBAAoB,EACpB,iBAAiB,EACjB,gBAAgB,QACX,4BAA4B,CAAC;AACpC,SAAQ,WAAW,QAAO,mBAAmB,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  /**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\nexport {\n  InjectMetadata,\n  OptionalMetadata,\n  InjectableMetadata,\n  SelfMetadata,\n  HostMetadata,\n  SkipSelfMetadata,\n  DependencyMetadata\n} from './di/metadata';\n\n// we have to reexport * because Dart and TS export two different sets of types\nexport * from './di/decorators';\n\nexport {forwardRef, resolveForwardRef, ForwardRefFn} from './di/forward_ref';\n\nexport {Injector} from './di/injector';\nexport {ReflectiveInjector} from './di/reflective_injector';\nexport {\n  Binding,\n  ProviderBuilder,\n  bind,\n\n  Provider,\n  provide\n} from './di/provider';\nexport {\n  ResolvedReflectiveBinding,\n  ResolvedReflectiveFactory,\n  ReflectiveDependency,\n\n  ResolvedReflectiveProvider\n} from './di/reflective_provider';\nexport {ReflectiveKey} from './di/reflective_key';\nexport {\n  NoProviderError,\n  AbstractProviderError,\n  CyclicDependencyError,\n  InstantiationError,\n  InvalidProviderError,\n  NoAnnotationError,\n  OutOfBoundsError\n} from './di/reflective_exceptions';\nexport {OpaqueToken} from './di/opaque_token';\n"]}