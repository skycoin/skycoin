{"version":3,"sources":["app/angular2/zone.js/lib/zone-spec/fake-async-test.ts"],"names":[],"mappings":"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","file":"fake-async-test.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n(function(global: any) {\n  interface ScheduledFunction {\n    endTime: number;\n    id: number;\n    func: Function;\n    args: any[];\n    delay: number;\n  }\n\n  class Scheduler {\n    // Next scheduler id.\n    public nextId: number = 0;\n\n    // Scheduler queue with the tuple of end time and callback function - sorted by end time.\n    private _schedulerQueue: ScheduledFunction[] = [];\n    // Current simulated time in millis.\n    private _currentTime: number = 0;\n\n    constructor() {}\n\n    scheduleFunction(cb: Function, delay: number, args: any[] = [], id: number = -1): number {\n      let currentId: number = id < 0 ? this.nextId++ : id;\n      let endTime = this._currentTime + delay;\n\n      // Insert so that scheduler queue remains sorted by end time.\n      let newEntry:\n          ScheduledFunction = {endTime: endTime, id: currentId, func: cb, args: args, delay: delay};\n      let i = 0;\n      for (; i < this._schedulerQueue.length; i++) {\n        let currentEntry = this._schedulerQueue[i];\n        if (newEntry.endTime < currentEntry.endTime) {\n          break;\n        }\n      }\n      this._schedulerQueue.splice(i, 0, newEntry);\n      return currentId;\n    }\n\n    removeScheduledFunctionWithId(id: number): void {\n      for (let i = 0; i < this._schedulerQueue.length; i++) {\n        if (this._schedulerQueue[i].id == id) {\n          this._schedulerQueue.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    tick(millis: number = 0): void {\n      let finalTime = this._currentTime + millis;\n      while (this._schedulerQueue.length > 0) {\n        let current = this._schedulerQueue[0];\n        if (finalTime < current.endTime) {\n          // Done processing the queue since it's sorted by endTime.\n          break;\n        } else {\n          // Time to run scheduled function. Remove it from the head of queue.\n          let current = this._schedulerQueue.shift();\n          this._currentTime = current.endTime;\n          let retval = current.func.apply(global, current.args);\n          if (!retval) {\n            // Uncaught exception in the current scheduled function. Stop processing the queue.\n            break;\n          }\n        }\n      }\n      this._currentTime = finalTime;\n    }\n  }\n\n  class FakeAsyncTestZoneSpec implements ZoneSpec {\n    static assertInZone(): void {\n      if (Zone.current.get('FakeAsyncTestZoneSpec') == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n      }\n    }\n\n    private _scheduler: Scheduler = new Scheduler();\n    private _microtasks: Function[] = [];\n    private _lastError: Error = null;\n    private _uncaughtPromiseErrors: {rejection: any}[] =\n        Promise[Zone['__symbol__']('uncaughtPromiseErrors')];\n\n    pendingPeriodicTimers: number[] = [];\n    pendingTimers: number[] = [];\n\n    constructor(namePrefix: string) {\n      this.name = 'fakeAsyncTestZone for ' + namePrefix;\n    }\n\n    private _fnAndFlush(fn: Function, completers: {onSuccess?: Function, onError?: Function}):\n        Function {\n      return (...args): boolean => {\n        fn.apply(global, args);\n\n        if (this._lastError === null) {  // Success\n          if (completers.onSuccess != null) {\n            completers.onSuccess.apply(global);\n          }\n          // Flush microtasks only on success.\n          this.flushMicrotasks();\n        } else {  // Failure\n          if (completers.onError != null) {\n            completers.onError.apply(global);\n          }\n        }\n        // Return true if there were no errors, false otherwise.\n        return this._lastError === null;\n      };\n    }\n\n    private static _removeTimer(timers: number[], id: number): void {\n      let index = timers.indexOf(id);\n      if (index > -1) {\n        timers.splice(index, 1);\n      }\n    }\n\n    private _dequeueTimer(id: number): Function {\n      return () => {\n        FakeAsyncTestZoneSpec._removeTimer(this.pendingTimers, id);\n      };\n    }\n\n    private _requeuePeriodicTimer(fn: Function, interval: number, args: any[], id: number):\n        Function {\n      return () => {\n        // Requeue the timer callback if it's not been canceled.\n        if (this.pendingPeriodicTimers.indexOf(id) !== -1) {\n          this._scheduler.scheduleFunction(fn, interval, args, id);\n        }\n      };\n    }\n\n    private _dequeuePeriodicTimer(id: number): Function {\n      return () => {\n        FakeAsyncTestZoneSpec._removeTimer(this.pendingPeriodicTimers, id);\n      };\n    }\n\n    private _setTimeout(fn: Function, delay: number, args: any[]): number {\n      let removeTimerFn = this._dequeueTimer(this._scheduler.nextId);\n      // Queue the callback and dequeue the timer on success and error.\n      let cb = this._fnAndFlush(fn, {onSuccess: removeTimerFn, onError: removeTimerFn});\n      let id = this._scheduler.scheduleFunction(cb, delay, args);\n      this.pendingTimers.push(id);\n      return id;\n    }\n\n    private _clearTimeout(id: number): void {\n      FakeAsyncTestZoneSpec._removeTimer(this.pendingTimers, id);\n      this._scheduler.removeScheduledFunctionWithId(id);\n    }\n\n    private _setInterval(fn: Function, interval: number, ...args): number {\n      let id = this._scheduler.nextId;\n      let completers = {onSuccess: null, onError: this._dequeuePeriodicTimer(id)};\n      let cb = this._fnAndFlush(fn, completers);\n\n      // Use the callback created above to requeue on success.\n      completers.onSuccess = this._requeuePeriodicTimer(cb, interval, args, id);\n\n      // Queue the callback and dequeue the periodic timer only on error.\n      this._scheduler.scheduleFunction(cb, interval, args);\n      this.pendingPeriodicTimers.push(id);\n      return id;\n    }\n\n    private _clearInterval(id: number): void {\n      FakeAsyncTestZoneSpec._removeTimer(this.pendingPeriodicTimers, id);\n      this._scheduler.removeScheduledFunctionWithId(id);\n    }\n\n    private _resetLastErrorAndThrow(): void {\n      let error = this._lastError || this._uncaughtPromiseErrors[0];\n      this._uncaughtPromiseErrors.length = 0;\n      this._lastError = null;\n      throw error;\n    }\n\n    tick(millis: number = 0): void {\n      FakeAsyncTestZoneSpec.assertInZone();\n      this.flushMicrotasks();\n      this._scheduler.tick(millis);\n      if (this._lastError !== null) {\n        this._resetLastErrorAndThrow();\n      }\n    }\n\n    flushMicrotasks(): void {\n      FakeAsyncTestZoneSpec.assertInZone();\n      const flushErrors = () => {\n        if (this._lastError !== null || this._uncaughtPromiseErrors.length) {\n          // If there is an error stop processing the microtask queue and rethrow the error.\n          this._resetLastErrorAndThrow();\n        }\n      };\n      while (this._microtasks.length > 0) {\n        let microtask = this._microtasks.shift();\n        microtask();\n      }\n      flushErrors();\n    }\n\n    // ZoneSpec implementation below.\n\n    name: string;\n\n    properties: {[key: string]: any} = {'FakeAsyncTestZoneSpec': this};\n\n    onScheduleTask(delegate: ZoneDelegate, current: Zone, target: Zone, task: Task): Task {\n      switch (task.type) {\n        case 'microTask':\n          this._microtasks.push(task.invoke);\n          break;\n        case 'macroTask':\n          switch (task.source) {\n            case 'setTimeout':\n              task.data['handleId'] =\n                  this._setTimeout(task.invoke, task.data['delay'], task.data['args']);\n              break;\n            case 'setInterval':\n              task.data['handleId'] =\n                  this._setInterval(task.invoke, task.data['delay'], task.data['args']);\n              break;\n            case 'XMLHttpRequest.send':\n              throw new Error('Cannot make XHRs from within a fake async test.');\n            default:\n              task = delegate.scheduleTask(target, task);\n          }\n          break;\n        case 'eventTask':\n          task = delegate.scheduleTask(target, task);\n          break;\n      }\n      return task;\n    }\n\n    onCancelTask(delegate: ZoneDelegate, current: Zone, target: Zone, task: Task): any {\n      switch (task.source) {\n        case 'setTimeout':\n          return this._clearTimeout(task.data['handleId']);\n        case 'setInterval':\n          return this._clearInterval(task.data['handleId']);\n        default:\n          return delegate.cancelTask(target, task);\n      }\n    }\n\n    onHandleError(\n        parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone,\n        error: any): boolean {\n      this._lastError = error;\n      return false;  // Don't propagate error to parent zone.\n    }\n  }\n\n  // Export the class so that new instances can be created with proper\n  // constructor params.\n  Zone['FakeAsyncTestZoneSpec'] = FakeAsyncTestZoneSpec;\n})(typeof window === 'object' && window || typeof self === 'object' && self || global);\n"]}