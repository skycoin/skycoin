{"version":3,"file":"upgrade_adapter.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/upgrade_adapter.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  provide,\n  ApplicationRef,\n  ComponentResolver,\n  Injector,\n  NgZone,\n  PlatformRef,\n  ReflectiveInjector,\n  ComponentFactory,\n  Provider,\n  Type,\n  Testability\n} from '@angular/core';\nimport {BROWSER_APP_DYNAMIC_PROVIDERS} from '@angular/platform-browser-dynamic';\nimport {browserPlatform} from '@angular/platform-browser';\nimport {getComponentInfo, ComponentInfo} from './metadata';\nimport {onError, controllerKey} from './util';\nimport {\n  NG1_COMPILE,\n  NG1_INJECTOR,\n  NG1_PARSE,\n  NG1_ROOT_SCOPE,\n  NG1_TESTABILITY,\n  NG2_COMPILER,\n  NG2_INJECTOR,\n  NG2_COMPONENT_FACTORY_REF_MAP,\n  NG2_ZONE,\n  REQUIRE_INJECTOR\n} from './constants';\nimport {DowngradeNg2ComponentAdapter} from './downgrade_ng2_adapter';\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\nimport * as angular from './angular_js';\n\nvar upgradeCount: number = 0;\n\n/**\n * Use `UpgradeAdapter` to allow AngularJS v1 and Angular v2 to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular v2 component from AngularJS v1 component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS v1 directive from Angular v2 component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS v1 directives always execute inside AngularJS v1 framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular v2 components always execute inside Angular v2 framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS v1 component can be upgraded to an Angular v2 component. This creates an\n *    Angular v2 directive, which bootstraps the AngularJS v1 component directive in that location.\n * 6. An Angular v2 component can be downgraded to an AngularJS v1 component directive. This creates\n *    an AngularJS v1 directive, which bootstraps the Angular v2 component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular v2 syntax.\n * 8. AngularJS v1 is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular v2 zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * var adapter = new UpgradeAdapter();\n * var module = angular.module('myExample', []);\n * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n *\n * module.directive('ng1', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * @Component({\n *   selector: 'ng2',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)',\n *   directives: [adapter.upgradeNg1Component('ng1')]\n * })\n * class Ng2 {\n * }\n *\n * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * ```\n */\nexport class UpgradeAdapter {\n  /* @internal */\n  private idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\n  /* @internal */\n  private upgradedComponents: Type[] = [];\n  /* @internal */\n  private downgradedComponents: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\n  /* @internal */\n  private providers: Array<Type | Provider | any[]> = [];\n\n  /**\n   * Allows Angular v2 Component to be used from AngularJS v1.\n   *\n   * Use `downgradeNg2Component` to create an AngularJS v1 Directive Definition Factory from\n   * Angular v2 Component. The adapter will bootstrap Angular v2 component from within the\n   * AngularJS v1 template.\n   *\n   * ## Mental Model\n   *\n   * 1. The component is instantiated by being listed in AngularJS v1 template. This means that the\n   *    host element is controlled by AngularJS v1, but the component's view will be controlled by\n   *    Angular v2.\n   * 2. Even thought the component is instantiated in AngularJS v1, it will be using Angular v2\n   *    syntax. This has to be done, this way because we must follow Angular v2 components do not\n   *    declare how the attributes should be interpreted.\n   *\n   * ## Supported Features\n   *\n   * - Bindings:\n   *   - Attribute: `<comp name=\"World\">`\n   *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n   *   - Expression:  `<comp [name]=\"username\">`\n   *   - Event:  `<comp (close)=\"doSomething()\">`\n   * - Content projection: yes\n   *\n   * ### Example\n   *\n   * ```\n   * var adapter = new UpgradeAdapter();\n   * var module = angular.module('myExample', []);\n   * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n   *\n   * @Component({\n   *   selector: 'greet',\n   *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n   * })\n   * class Greeter {\n   *   @Input() salutation: string;\n   *   @Input() name: string;\n   * }\n   *\n   * document.body.innerHTML =\n   *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n   * });\n   * ```\n   */\n  downgradeNg2Component(type: Type): Function {\n    this.upgradedComponents.push(type);\n    var info: ComponentInfo = getComponentInfo(type);\n    return ng1ComponentDirective(info, `${this.idPrefix}${info.selector}_c`);\n  }\n\n  /**\n   * Allows AngularJS v1 Component to be used from Angular v2.\n   *\n   * Use `upgradeNg1Component` to create an Angular v2 component from AngularJS v1 Component\n   * directive. The adapter will bootstrap AngularJS v1 component from within the Angular v2\n   * template.\n   *\n   * ## Mental Model\n   *\n   * 1. The component is instantiated by being listed in Angular v2 template. This means that the\n   *    host element is controlled by Angular v2, but the component's view will be controlled by\n   *    AngularJS v1.\n   *\n   * ## Supported Features\n   *\n   * - Bindings:\n   *   - Attribute: `<comp name=\"World\">`\n   *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n   *   - Expression:  `<comp [name]=\"username\">`\n   *   - Event:  `<comp (close)=\"doSomething()\">`\n   * - Transclusion: yes\n   * - Only some of the features of\n   *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n   *   supported:\n   *   - `compile`: not supported because the host element is owned by Angular v2, which does\n   *     not allow modifying DOM structure during compilation.\n   *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n   *   - `controllerAs': supported.\n   *   - `bindToController': supported.\n   *   - `link': supported. (NOTE: only pre-link function is supported.)\n   *   - `name': supported.\n   *   - `priority': ignored.\n   *   - `replace': not supported.\n   *   - `require`: supported.\n   *   - `restrict`: must be set to 'E'.\n   *   - `scope`: supported.\n   *   - `template`: supported.\n   *   - `templateUrl`: supported.\n   *   - `terminal`: ignored.\n   *   - `transclude`: supported.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * var adapter = new UpgradeAdapter();\n   * var module = angular.module('myExample', []);\n   *\n   * module.directive('greet', function() {\n   *   return {\n   *     scope: {salutation: '=', name: '=' },\n   *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n   *   };\n   * });\n   *\n   * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n   *\n   * @Component({\n   *   selector: 'ng2',\n   *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n   *   directives: [adapter.upgradeNg1Component('greet')]\n   * })\n   * class Ng2 {\n   * }\n   *\n   * document.body.innerHTML = '<ng2></ng2>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n   * });\n   * ```\n   */\n  upgradeNg1Component(name: string): Type {\n    if ((<any>this.downgradedComponents).hasOwnProperty(name)) {\n      return this.downgradedComponents[name].type;\n    } else {\n      return (this.downgradedComponents[name] = new UpgradeNg1ComponentAdapterBuilder(name)).type;\n    }\n  }\n\n  /**\n   * Bootstrap a hybrid AngularJS v1 / Angular v2 application.\n   *\n   * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS v1\n   * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n   * AngularJS v1, this bootstrap is asynchronous.\n   *\n   * ### Example\n   *\n   * ```\n   * var adapter = new UpgradeAdapter();\n   * var module = angular.module('myExample', []);\n   * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n   *\n   * module.directive('ng1', function() {\n   *   return {\n   *      scope: { title: '=' },\n   *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n   *   };\n   * });\n   *\n   *\n   * @Component({\n   *   selector: 'ng2',\n   *   inputs: ['name'],\n   *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)',\n   *   directives: [adapter.upgradeNg1Component('ng1')]\n   * })\n   * class Ng2 {\n   * }\n   *\n   * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\n   *       \"ng2[ng1[Hello World!](transclude)](project)\");\n   * });\n   * ```\n   */\n  bootstrap(element: Element, modules?: any[],\n            config?: angular.IAngularBootstrapConfig): UpgradeAdapterRef {\n    var upgrade = new UpgradeAdapterRef();\n    var ng1Injector: angular.IInjectorService = null;\n    var platformRef: PlatformRef = browserPlatform();\n    var applicationRef: ApplicationRef =\n        ReflectiveInjector.resolveAndCreate(\n                              [\n                                BROWSER_APP_DYNAMIC_PROVIDERS,\n                                provide(NG1_INJECTOR, {useFactory: () => ng1Injector}),\n                                provide(NG1_COMPILE,\n                                        {useFactory: () => ng1Injector.get(NG1_COMPILE)}),\n                                this.providers\n                              ],\n                              platformRef.injector)\n            .get(ApplicationRef);\n    var injector: Injector = applicationRef.injector;\n    var ngZone: NgZone = injector.get(NgZone);\n    var compiler: ComponentResolver = injector.get(ComponentResolver);\n    var delayApplyExps: Function[] = [];\n    var original$applyFn: Function;\n    var rootScopePrototype: any;\n    var rootScope: angular.IRootScopeService;\n    var componentFactoryRefMap: ComponentFactoryRefMap = {};\n    var ng1Module = angular.module(this.idPrefix, modules);\n    var ng1BootstrapPromise: Promise<any> = null;\n    var ng1compilePromise: Promise<any> = null;\n    ng1Module.value(NG2_INJECTOR, injector)\n        .value(NG2_ZONE, ngZone)\n        .value(NG2_COMPILER, compiler)\n        .value(NG2_COMPONENT_FACTORY_REF_MAP, componentFactoryRefMap)\n        .config([\n          '$provide',\n          (provide) => {\n            provide.decorator(NG1_ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error(\"Failed to find '$apply' on '$rootScope'!\");\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            provide.decorator(NG1_TESTABILITY, [\n              '$delegate',\n              function(testabilityDelegate: angular.ITestabilityService) {\n                var ng2Testability: Testability = injector.get(Testability);\n\n                var origonalWhenStable: Function = testabilityDelegate.whenStable;\n                var newWhenStable = (callback: Function): void => {\n                  var whenStableContext: any = this;\n                  origonalWhenStable.call(this, function() {\n                    if (ng2Testability.isStable()) {\n                      callback.apply(this, arguments);\n                    } else {\n                      ng2Testability.whenStable(newWhenStable.bind(whenStableContext, callback));\n                    }\n                  });\n                };\n\n                testabilityDelegate.whenStable = newWhenStable;\n                return testabilityDelegate;\n              }\n            ]);\n          }\n        ]);\n\n    ng1compilePromise = new Promise((resolve, reject) => {\n      ng1Module.run([\n        '$injector',\n        '$rootScope',\n        (injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n          ng1Injector = injector;\n          ngZone.onMicrotaskEmpty.subscribe(\n              {next: (_) => ngZone.runOutsideAngular(() => rootScope.$apply())});\n          UpgradeNg1ComponentAdapterBuilder.resolve(this.downgradedComponents, injector)\n              .then(resolve, reject);\n        }\n      ]);\n    });\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    var windowAngular = window['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    angular.element(element).data(controllerKey(NG2_INJECTOR), injector);\n    ngZone.run(() => { angular.bootstrap(element, [this.idPrefix], config); });\n    ng1BootstrapPromise = new Promise((resolve, reject) => {\n      if (windowAngular.resumeBootstrap) {\n        var originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([\n             this.compileNg2Components(compiler, componentFactoryRefMap),\n             ng1BootstrapPromise,\n             ng1compilePromise\n           ])\n        .then(() => {\n          ngZone.run(() => {\n            if (rootScopePrototype) {\n              rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n              while (delayApplyExps.length) {\n                rootScope.$apply(delayApplyExps.shift());\n              }\n              (<any>upgrade)._bootstrapDone(applicationRef, ng1Injector);\n              rootScopePrototype = null;\n            }\n          });\n        }, onError);\n    return upgrade;\n  }\n\n  /**\n   * Adds a provider to the top level environment of a hybrid AngularJS v1 / Angular v2 application.\n   *\n   * In hybrid AngularJS v1 / Angular v2 application, there is no one root Angular v2 component,\n   * for this reason we provide an application global way of registering providers which is\n   * consistent with single global injection in AngularJS v1.\n   *\n   * ### Example\n   *\n   * ```\n   * class Greeter {\n   *   greet(name) {\n   *     alert('Hello ' + name + '!');\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: ''\n   * })\n   * class App {\n   *   constructor(greeter: Greeter) {\n   *     this.greeter('World');\n   *   }\n   * }\n   *\n   * var adapter = new UpgradeAdapter();\n   * adapter.addProvider(Greeter);\n   *\n   * var module = angular.module('myExample', []);\n   * module.directive('app', adapter.downgradeNg2Component(App));\n   *\n   * document.body.innerHTML = '<app></app>'\n   * adapter.bootstrap(document.body, ['myExample']);\n   *```\n   */\n  public addProvider(provider: Type | Provider | any[]): void { this.providers.push(provider); }\n\n  /**\n   * Allows AngularJS v1 service to be accessible from Angular v2.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * class Login { ... }\n   * class Server { ... }\n   *\n   * @Injectable()\n   * class Example {\n   *   constructor(@Inject('server') server, login: Login) {\n   *     ...\n   *   }\n   * }\n   *\n   * var module = angular.module('myExample', []);\n   * module.service('server', Server);\n   * module.service('login', Login);\n   *\n   * var adapter = new UpgradeAdapter();\n   * adapter.upgradeNg1Provider('server');\n   * adapter.upgradeNg1Provider('login', {asToken: Login});\n   * adapter.addProvider(Example);\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n   *   var example: Example = ref.ng2Injector.get(Example);\n   * });\n   *\n   * ```\n   */\n  public upgradeNg1Provider(name: string, options?: {asToken: any}) {\n    var token = options && options.asToken || name;\n    this.providers.push(provide(token, {\n      useFactory: (ng1Injector: angular.IInjectorService) => ng1Injector.get(name),\n      deps: [NG1_INJECTOR]\n    }));\n  }\n\n  /**\n   * Allows Angular v2 service to be accessible from AngularJS v1.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * class Example {\n   * }\n   *\n   * var adapter = new UpgradeAdapter();\n   * adapter.addProvider(Example);\n   *\n   * var module = angular.module('myExample', []);\n   * module.factory('example', adapter.downgradeNg2Provider(Example));\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n   *   var example: Example = ref.ng1Injector.get('example');\n   * });\n   *\n   * ```\n   */\n  public downgradeNg2Provider(token: any): Function {\n    var factory = function(injector: Injector) { return injector.get(token); };\n    (<any>factory).$inject = [NG2_INJECTOR];\n    return factory;\n  }\n\n  /* @internal */\n  private compileNg2Components(compiler: ComponentResolver,\n                               componentFactoryRefMap: ComponentFactoryRefMap):\n      Promise<ComponentFactoryRefMap> {\n    var promises: Array<Promise<ComponentFactory<any>>> = [];\n    var types = this.upgradedComponents;\n    for (var i = 0; i < types.length; i++) {\n      promises.push(compiler.resolveComponent(types[i]));\n    }\n    return Promise.all(promises).then((componentFactories: Array<ComponentFactory<any>>) => {\n      var types = this.upgradedComponents;\n      for (var i = 0; i < componentFactories.length; i++) {\n        componentFactoryRefMap[getComponentInfo(types[i]).selector] = componentFactories[i];\n      }\n      return componentFactoryRefMap;\n    }, onError);\n  }\n}\n\ninterface ComponentFactoryRefMap {\n  [selector: string]: ComponentFactory<any>;\n}\n\nfunction ng1ComponentDirective(info: ComponentInfo, idPrefix: string): Function {\n  (<any>directiveFactory).$inject = [NG2_COMPONENT_FACTORY_REF_MAP, NG1_PARSE];\n  function directiveFactory(componentFactoryRefMap: ComponentFactoryRefMap,\n                            parse: angular.IParseService): angular.IDirective {\n    var componentFactory: ComponentFactory<any> = componentFactoryRefMap[info.selector];\n    if (!componentFactory) throw new Error('Expecting ComponentFactory for: ' + info.selector);\n    var idCount = 0;\n    return {\n      restrict: 'E',\n      require: REQUIRE_INJECTOR,\n      link: {\n        post: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n               parentInjector: any, transclude: angular.ITranscludeFunction): void => {\n          var domElement = <any>element[0];\n          var facade =\n              new DowngradeNg2ComponentAdapter(idPrefix + (idCount++), info, element, attrs, scope,\n                                               <Injector>parentInjector, parse, componentFactory);\n          facade.setupInputs();\n          facade.bootstrapNg2();\n          facade.projectContent();\n          facade.setupOutputs();\n          facade.registerCleanup();\n        }\n      }\n    };\n  }\n  return directiveFactory;\n}\n\n/**\n * Use `UgradeAdapterRef` to control a hybrid AngularJS v1 / Angular v2 application.\n */\nexport class UpgradeAdapterRef {\n  /* @internal */\n  private _readyFn: (upgradeAdapterRef?: UpgradeAdapterRef) => void = null;\n\n  public ng1RootScope: angular.IRootScopeService = null;\n  public ng1Injector: angular.IInjectorService = null;\n  public ng2ApplicationRef: ApplicationRef = null;\n  public ng2Injector: Injector = null;\n\n  /* @internal */\n  private _bootstrapDone(applicationRef: ApplicationRef, ng1Injector: angular.IInjectorService) {\n    this.ng2ApplicationRef = applicationRef;\n    this.ng2Injector = applicationRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get(NG1_ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n\n  /**\n   * Register a callback function which is notified upon successful hybrid AngularJS v1 / Angular v2\n   * application has been bootstrapped.\n   *\n   * The `ready` callback function is invoked inside the Angular v2 zone, therefore it does not\n   * require a call to `$apply()`.\n   */\n  public ready(fn: (upgradeAdapterRef?: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n\n  /**\n   * Dispose of running hybrid AngularJS v1 / Angular v2 application.\n   */\n  public dispose() {\n    this.ng1Injector.get(NG1_ROOT_SCOPE).$destroy();\n    this.ng2ApplicationRef.dispose();\n  }\n}\n"]}