{"version":3,"file":"reflective_key.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/reflective_key.ts"],"names":[],"mappings":"OAIS,EAAC,SAAS,EAAE,OAAO,EAAC,MAAM,uBAAuB;OACnD,EAAC,aAAa,EAAC,MAAM,6BAA6B;OAClD,EAAC,iBAAiB,EAAC,MAAM,eAAe;AAE/C;;;;;;;;;;;;;;GAcG;AACH;IACE;;OAEG;IACH,YAAmB,KAAa,EAAS,EAAU;QAAhC,UAAK,GAAL,KAAK,CAAQ;QAAS,OAAE,GAAF,EAAE,CAAQ;QACjD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED;;OAEG;IACH,IAAI,WAAW,KAAa,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE3D;;OAEG;IACH,OAAO,GAAG,CAAC,KAAa;QACtB,MAAM,CAAC,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,WAAW,YAAY,KAAa,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;AAC/E,CAAC;AAED;;GAEG;AACH;IAAA;QACU,aAAQ,GAAG,IAAI,GAAG,EAAyB,CAAC;IAetD,CAAC;IAbC,GAAG,CAAC,KAAa;QACf,EAAE,CAAC,CAAC,KAAK,YAAY,aAAa,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAEjD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,MAAM,GAAG,IAAI,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,IAAI,YAAY,KAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED,IAAI,kBAAkB,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {stringify, isBlank} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {resolveForwardRef} from './forward_ref';\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n */\nexport class ReflectiveKey {\n  /**\n   * Private\n   */\n  constructor(public token: Object, public id: number) {\n    if (isBlank(token)) {\n      throw new BaseException('Token must be defined!');\n    }\n  }\n\n  /**\n   * Returns a stringified token.\n   */\n  get displayName(): string { return stringify(this.token); }\n\n  /**\n   * Retrieves a `Key` for a token.\n   */\n  static get(token: Object): ReflectiveKey {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n\n  /**\n   * @returns the number of keys registered in the system.\n   */\n  static get numberOfKeys(): number { return _globalKeyRegistry.numberOfKeys; }\n}\n\n/**\n * @internal\n */\nexport class KeyRegistry {\n  private _allKeys = new Map<Object, ReflectiveKey>();\n\n  get(token: Object): ReflectiveKey {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n\n    var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n\n  get numberOfKeys(): number { return this._allKeys.size; }\n}\n\nvar _globalKeyRegistry = new KeyRegistry();\n"]}