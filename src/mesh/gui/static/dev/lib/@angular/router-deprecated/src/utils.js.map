{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../modules/@angular/router-deprecated/src/utils.ts"],"names":[],"mappings":";AAAA,qBAAiC,oBAAoB,CAAC,CAAA;AACtD,2BAA+B,0BAA0B,CAAC,CAAA;AAE1D;IAIE,kBAAY,GAAyB;QAJvC,iBAwBC;QAvBC,QAAG,GAA4B,EAAE,CAAC;QAClC,SAAI,GAA6B,EAAE,CAAC;QAGlC,EAAE,CAAC,CAAC,gBAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,6BAAgB,CAAC,OAAO,CAAC,GAAG,EAAE,UAAC,KAAK,EAAE,GAAG;gBACvC,KAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,gBAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC;gBAC3D,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,sBAAG,GAAH,UAAI,GAAW;QACb,6BAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,4BAAS,GAAT;QAAA,iBAKC;QAJC,IAAI,MAAM,GAAyB,EAAE,CAAC;QACtC,IAAI,IAAI,GAAG,6BAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,GAAG,CAAC,GAAG,6BAAgB,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAjD,CAAiD,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH,eAAC;AAAD,CAAC,AAxBD,IAwBC;AAxBY,gBAAQ,WAwBpB,CAAA;AAGD,yBAAgC,GAAQ;IACtC,EAAE,CAAC,CAAC,cAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;AACH,CAAC;AANe,uBAAe,kBAM9B,CAAA","sourcesContent":["import {isPresent, isBlank} from '../src/facade/lang';\nimport {StringMapWrapper} from '../src/facade/collection';\n\nexport class TouchMap {\n  map: {[key: string]: string} = {};\n  keys: {[key: string]: boolean} = {};\n\n  constructor(map: {[key: string]: any}) {\n    if (isPresent(map)) {\n      StringMapWrapper.forEach(map, (value, key) => {\n        this.map[key] = isPresent(value) ? value.toString() : null;\n        this.keys[key] = true;\n      });\n    }\n  }\n\n  get(key: string): string {\n    StringMapWrapper.delete(this.keys, key);\n    return this.map[key];\n  }\n\n  getUnused(): {[key: string]: any} {\n    var unused: {[key: string]: any} = {};\n    var keys = StringMapWrapper.keys(this.keys);\n    keys.forEach(key => unused[key] = StringMapWrapper.get(this.map, key));\n    return unused;\n  }\n}\n\n\nexport function normalizeString(obj: any): string {\n  if (isBlank(obj)) {\n    return null;\n  } else {\n    return obj.toString();\n  }\n}\n"]}