{"version":3,"file":"angular_js.js","sourceRoot":"","sources":["../../../../modules/@angular/upgrade/src/angular_js.ts"],"names":[],"mappings":";AA0HA;IACE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;AACnD,CAAC;AAED,IAAI,OAAO,GAOE;IACP,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,IAAI;IACZ,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,IAAI;IACb,eAAe,EAAE,IAAI;IACrB,cAAc,EAAE,IAAI;CACrB,CAAC;AAGN,IAAI,CAAC;IACH,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACrC,OAAO,GAAS,MAAO,CAAC,OAAO,CAAC;IAClC,CAAC;AACH,CAAE;AAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEb,CAAC;AAEU,iBAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AAC9B,cAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACxB,eAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC1B,eAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAC1B,uBAAe,GAAG,OAAO,CAAC,eAAe,CAAC;AAC1C,sBAAc,GAAG,OAAO,CAAC,cAAc,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  export interface IModule {\n  config(fn: any): IModule;\n  directive(selector: string, factory: any): IModule;\n  component(selector: string, component: IComponent): IModule;\n  controller(name: string, type: any): IModule;\n  factory(key: string, factoryFn: any): IModule;\n  value(key: string, value: any): IModule;\n  run(a: any): void;\n}\nexport interface ICompileService {\n  (element: Element | NodeList | string, transclude?: Function): ILinkFn;\n}\nexport interface ILinkFn {\n  (scope: IScope, cloneAttachFn?: Function, options?: ILinkFnOptions): void;\n}\nexport interface ILinkFnOptions {\n  parentBoundTranscludeFn?: Function;\n  transcludeControllers?: {[key: string]: any};\n  futureParentElement?: Node;\n}\nexport interface IRootScopeService {\n  $new(isolate?: boolean): IScope;\n  $id: string;\n  $watch(expr: any, fn?: (a1?: any, a2?: any) => void): Function;\n  $destroy(): any;\n  $apply(): any;\n  $apply(exp: string): any;\n  $apply(exp: Function): any;\n  $$childTail: IScope;\n  $$childHead: IScope;\n  $$nextSibling: IScope;\n}\nexport interface IScope extends IRootScopeService {}\nexport interface IAngularBootstrapConfig {}\nexport interface IDirective {\n  compile?: IDirectiveCompileFn;\n  controller?: any;\n  controllerAs?: string;\n  bindToController?: boolean | Object;\n  link?: IDirectiveLinkFn | IDirectivePrePost;\n  name?: string;\n  priority?: number;\n  replace?: boolean;\n  require?: any;\n  restrict?: string;\n  scope?: any;\n  template?: any;\n  templateUrl?: any;\n  terminal?: boolean;\n  transclude?: any;\n}\nexport interface IDirectiveCompileFn {\n  (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n   transclude: ITranscludeFunction): IDirectivePrePost;\n}\nexport interface IDirectivePrePost {\n  pre?: IDirectiveLinkFn;\n  post?: IDirectiveLinkFn;\n}\nexport interface IDirectiveLinkFn {\n  (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n   controller: any, transclude: ITranscludeFunction): void;\n}\nexport interface IComponent {\n  bindings?: Object;\n  controller?: any;\n  controllerAs?: string;\n  require?: any;\n  template?: any;\n  templateUrl?: any;\n  transclude?: any;\n}\nexport interface IAttributes { $observe(attr: string, fn: (v: string) => void): void; }\nexport interface ITranscludeFunction {\n  // If the scope is provided, then the cloneAttachFn must be as well.\n  (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n  // If one argument is provided, then it's assumed to be the cloneAttachFn.\n  (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n}\nexport interface ICloneAttachFunction {\n  // Let's hint but not force cloneAttachFn's signature\n  (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n}\nexport interface IAugmentedJQuery {\n  bind(name: string, fn: () => void): void;\n  data(name: string, value?: any): any;\n  inheritedData(name: string, value?: any): any;\n  contents(): IAugmentedJQuery;\n  parent(): IAugmentedJQuery;\n  length: number;\n  [index: number]: Node;\n}\nexport interface IParseService { (expression: string): ICompiledExpression; }\nexport interface ICompiledExpression { assign(context: any, value: any): any; }\nexport interface IHttpBackendService {\n  (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n   withCredentials?: boolean): void;\n}\nexport interface ICacheObject {\n  put<T>(key: string, value?: T): T;\n  get(key: string): any;\n}\nexport interface ITemplateCacheService extends ICacheObject {}\nexport interface IControllerService {\n  (controllerConstructor: Function, locals?: any, later?: any, ident?: any): any;\n  (controllerName: string, locals?: any): any;\n}\n\nexport interface IInjectorService { get(key: string): any; }\n\nexport interface ITestabilityService {\n  findBindings(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  findModels(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  getLocation(): string;\n  setLocation(url: string): void;\n  whenStable(callback: Function): void;\n}\n\nfunction noNg() {\n  throw new Error('AngularJS v1.x is not loaded!');\n}\n\nvar angular:\n    {\n      bootstrap: (e: Element, modules: string[], config: IAngularBootstrapConfig) => void,\n      module: (prefix: string, dependencies?: string[]) => IModule,\n      element: (e: Element) => IAugmentedJQuery,\n      version: {major: number}, resumeBootstrap?: () => void,\n      getTestability: (e: Element) => ITestabilityService\n    } = <any>{\n      bootstrap: noNg,\n      module: noNg,\n      element: noNg,\n      version: noNg,\n      resumeBootstrap: noNg,\n      getTestability: noNg\n    };\n\n\ntry {\n  if (window.hasOwnProperty('angular')) {\n    angular = (<any>window).angular;\n  }\n} catch (e) {\n  // ignore in CJS mode.\n}\n\nexport var bootstrap = angular.bootstrap;\nexport var module = angular.module;\nexport var element = angular.element;\nexport var version = angular.version;\nexport var resumeBootstrap = angular.resumeBootstrap;\nexport var getTestability = angular.getTestability;\n"]}