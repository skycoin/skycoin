{"version":3,"sources":["app/angular2/zone.js/lib/zone-spec/async-test.ts"],"names":[],"mappings":"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","file":"async-test.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass AsyncTestZoneSpec implements ZoneSpec {\n  _finishCallback: Function;\n  _failCallback: Function;\n  _pendingMicroTasks: boolean = false;\n  _pendingMacroTasks: boolean = false;\n  _alreadyErrored: boolean = false;\n  runZone = Zone.current;\n\n  constructor(finishCallback: Function, failCallback: Function, namePrefix: string) {\n    this._finishCallback = finishCallback;\n    this._failCallback = failCallback;\n    this.name = 'asyncTestZone for ' + namePrefix;\n  }\n\n  _finishCallbackIfDone() {\n    if (!(this._pendingMicroTasks || this._pendingMacroTasks)) {\n      // We do this because we would like to catch unhandled rejected promises.\n      this.runZone.run(() => {\n        setTimeout(() => {\n          if (!this._alreadyErrored && !(this._pendingMicroTasks || this._pendingMacroTasks)) {\n            this._finishCallback();\n          }\n        }, 0);\n      });\n    }\n  }\n\n  // ZoneSpec implementation below.\n\n  name: string;\n\n  // Note - we need to use onInvoke at the moment to call finish when a test is\n  // fully synchronous. TODO(juliemr): remove this when the logic for\n  // onHasTask changes and it calls whenever the task queues are dirty.\n  onInvoke(\n      parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, delegate: Function,\n      applyThis: any, applyArgs: any[], source: string): any {\n    try {\n      return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);\n    } finally {\n      this._finishCallbackIfDone();\n    }\n  }\n\n  onHandleError(parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, error: any):\n      boolean {\n    // Let the parent try to handle the error.\n    const result = parentZoneDelegate.handleError(targetZone, error);\n    if (result) {\n      this._failCallback(error);\n      this._alreadyErrored = true;\n    }\n    return false;\n  }\n\n  onScheduleTask(delegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, task: Task): Task {\n    if (task.type == 'macroTask' && task.source == 'setInterval') {\n      this._failCallback('Cannot use setInterval from within an async zone test.');\n      return;\n    }\n\n    return delegate.scheduleTask(targetZone, task);\n  }\n\n  onHasTask(delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) {\n    delegate.hasTask(target, hasTaskState);\n    if (hasTaskState.change == 'microTask') {\n      this._pendingMicroTasks = hasTaskState.microTask;\n      this._finishCallbackIfDone();\n    } else if (hasTaskState.change == 'macroTask') {\n      this._pendingMacroTasks = hasTaskState.macroTask;\n      this._finishCallbackIfDone();\n    }\n  }\n}\n\n// Export the class so that new instances can be created with proper\n// constructor params.\nZone['AsyncTestZoneSpec'] = AsyncTestZoneSpec;\n"]}