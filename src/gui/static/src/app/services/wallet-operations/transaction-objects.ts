/**
 * This file contains the objects used to represent the transactions and its parts in the app.
 */
import BigNumber from 'bignumber.js';

import { WalletBase } from './wallet-objects';

/**
 * Object with the properties of an input.
 */
export interface Input {
  hash: string;
  address: string;
  coins: BigNumber;
  hours: BigNumber;
}

/**
 * Object with the properties of an output.
 */
export interface Output {
  hash: string;
  address: string;
  coins: BigNumber;
  hours: BigNumber;
}

/**
 * Base transaction object, from which other transaction objects inherit.
 */
export interface TransactionBase {
  /**
   * Input list.
   */
  inputs: Input[];
  /**
   * Output list.
   */
  outputs: Output[];
  /**
   * Amount of hours burned by the transaction.
   */
  hoursBurned: BigNumber;
  /**
   * Local note set by the user to identify the transaction.
   */
  note?: string;
}

/**
 * Transaction generated by the app to be sent to the node.
 */
export interface GeneratedTransaction extends TransactionBase {
  /**
   * Indicates the wallet or addresses sending the transaction.
   */
  from: string;
  /**
   * List of addresses to were the transaction is sent.
   */
  to: string;
  /**
   * Encoded transaction.
   */
  encoded: string;
  /**
   * Inner hash of the transaction.
   */
  innerHash: string;
  /**
   * Wallet used to create the transaction, if an specific wallet was used.
   */
  wallet?: WalletBase;
  /**
   * How many coins the transaction is going to send.
   */
  coinsToSend: BigNumber;
  /**
   * How many hours the transaction is going to send.
   */
  hoursToSend: BigNumber;
}

/**
 * Old transaction from the transactions history.
 */
export interface OldTransaction extends TransactionBase {
  /**
   * How many coins were received or sent (if the number is negative).
   */
  balance: BigNumber;
  /**
   * How many hours were received or sent (if the number is negative).
   */
  hoursBalance: BigNumber;
  /**
   * The addresses which sent the coins o the ones which received them, depending on
   * whether the transaction was for sending or receiving coins.
   */
  relevantAddresses: string[];
  /**
   * Id of the transaction.
   */
  id: string;
  /**
   * Block were the transaction was included.
   */
  block: number;
  /**
   * Transaction timestamp, in Unix time.
   */
  timestamp: number;
  /**
   * If the transaction has been already confirmed by the network.
   */
  confirmed: boolean;
  /**
   * If true, the transaction was not for sending coins to external wallets or for receiving
   * coins from external wallets, but just for moving coins between addresses from the same
   * wallet.
   */
  coinsMovedInternally?: boolean;
}

/**
 * Object for a decoded raw transactions.
 */
 export interface DecodedTransaction extends TransactionBase {
  /**
   * Id of the transaction.
   */
  id: string;
  /**
   * If the backend was able to return the complete information about the inputs.
   */
  inputsInformationObtained: boolean;
}
