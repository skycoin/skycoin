{"version":3,"file":"render_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/render_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SecurityContext} from '@angular/core';\n\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {EMPTY_STATE as EMPTY_ANIMATION_STATE} from '../private_import_core';\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType} from '../template_parser/template_ast';\n\nimport {createEnumExpression} from './identifier_util';\n\nexport function writeToRenderer(\n    view: o.Expression, boundProp: BoundElementPropertyAst, renderElement: o.Expression,\n    renderValue: o.Expression, logBindingUpdate: boolean,\n    securityContextExpression?: o.Expression): o.Statement[] {\n  const updateStmts: o.Statement[] = [];\n  const renderer = view.prop('renderer');\n  renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);\n  switch (boundProp.type) {\n    case PropertyBindingType.Property:\n      if (logBindingUpdate) {\n        updateStmts.push(\n            o.importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo))\n                .callFn([renderer, renderElement, o.literal(boundProp.name), renderValue])\n                .toStmt());\n      }\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementProperty', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Attribute:\n      renderValue =\n          renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod('toString', []));\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementAttribute', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Class:\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementClass', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Style:\n      let strValue: o.Expression = renderValue.callMethod('toString', []);\n      if (isPresent(boundProp.unit)) {\n        strValue = strValue.plus(o.literal(boundProp.unit));\n      }\n\n      renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementStyle', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Animation:\n      throw new Error('Illegal state: Should not come here!');\n  }\n  return updateStmts;\n}\n\nfunction sanitizedValue(\n    view: o.Expression, boundProp: BoundElementPropertyAst, renderValue: o.Expression,\n    securityContextExpression?: o.Expression): o.Expression {\n  if (boundProp.securityContext === SecurityContext.NONE) {\n    return renderValue;  // No sanitization needed.\n  }\n  if (!boundProp.needsRuntimeSecurityContext) {\n    securityContextExpression =\n        createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);\n  }\n  if (!securityContextExpression) {\n    throw new Error(`internal error, no SecurityContext given ${boundProp.name}`);\n  }\n  const ctx = view.prop('viewUtils').prop('sanitizer');\n  const args = [securityContextExpression, renderValue];\n  return ctx.callMethod('sanitize', args);\n}\n\nexport function triggerAnimation(\n    view: o.Expression, componentView: o.Expression, boundProp: BoundElementPropertyAst,\n    eventListener: o.Expression, renderElement: o.Expression, renderValue: o.Expression,\n    lastRenderValue: o.Expression) {\n  const detachStmts: o.Statement[] = [];\n  const updateStmts: o.Statement[] = [];\n\n  const animationName = boundProp.name;\n\n  const animationFnExpr =\n      componentView.prop('componentType').prop('animations').key(o.literal(animationName));\n\n  // it's important to normalize the void value as `void` explicitly\n  // so that the styles data can be obtained from the stringmap\n  const emptyStateValue = o.literal(EMPTY_ANIMATION_STATE);\n  const unitializedValue = o.importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));\n  const animationTransitionVar = o.variable('animationTransition_' + animationName);\n\n  updateStmts.push(\n      animationTransitionVar\n          .set(animationFnExpr.callFn([\n            view, renderElement,\n            lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue),\n            renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)\n          ]))\n          .toDeclStmt());\n\n  detachStmts.push(\n      animationTransitionVar\n          .set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue]))\n          .toDeclStmt());\n\n  const registerStmts = [\n    animationTransitionVar\n        .callMethod(\n            'onStart',\n            [eventListener.callMethod(\n                o.BuiltinMethod.Bind,\n                [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])\n        .toStmt(),\n    animationTransitionVar\n        .callMethod(\n            'onDone',\n            [eventListener.callMethod(\n                o.BuiltinMethod.Bind,\n                [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])\n        .toStmt(),\n\n  ];\n\n  updateStmts.push(...registerStmts);\n  detachStmts.push(...registerStmts);\n\n  return {updateStmts, detachStmts};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}