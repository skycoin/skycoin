{"version":3,"file":"view_ref.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/view_ref.ts"],"names":[],"mappings":";;;;;;AAIE,2BAA4B,6BAA6B,CAAC,CAAA;AAG5D,0BAAsC,+BAA+B,CAAC,CAAA;AAEtE;IAAA;IAIA,CAAC;IAHC,sBAAI,8BAAS;aAAb,cAA2B,MAAM,CAAU,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAG/D,cAAC;AAAD,CAAC,AAJD,IAIC;AAJqB,eAAO,UAI5B,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AACH;IAAiD,mCAAO;IAAxD;QAAiD,8BAAO;IASxD,CAAC;IARC,sBAAI,oCAAO;aAAX,cAAmB,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAE5C,sBAAI,sCAAS;aAAb,cAAyB,MAAM,CAAQ,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;;IAM3D,sBAAC;AAAD,CAAC,AATD,CAAiD,OAAO,GASvD;AATqB,uBAAe,kBASpC,CAAA;AAED;IACE,kBAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAAC,CAAC;IAE9D,sBAAI,kCAAY;aAAhB,cAAiC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAErD,sBAAI,+BAAS;aAAb,cAAyB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;;;OAAA;IAE3D,sBAAI,6BAAO;aAAX,cAAgB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAE5C,sBAAI,+BAAS;aAAb,cAA2B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;;;OAAA;IAEzD,+BAAY,GAAZ,cAAuB,IAAI,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAChE,yBAAM,GAAN,cAAiB,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,mCAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxE,gCAAa,GAAb,cAAwB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1D,iCAAc,GAAd,cAAyB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1D,2BAAQ,GAAR;QACE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,mCAAuB,CAAC,WAAW,CAAC;QACxD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,4BAAS,GAAT,UAAU,QAAkB,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAExE,0BAAO,GAAP,cAAY,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACrC,eAAC;AAAD,CAAC,AAvBD,IAuBC;AAvBY,gBAAQ,WAuBpB,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {unimplemented} from '../../src/facade/exceptions';\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {AppView} from './view';\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\n\nexport abstract class ViewRef {\n  get destroyed(): boolean { return <boolean>unimplemented(); }\n\n  abstract onDestroy(callback: Function);\n}\n\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * ... we have two {@link TemplateRef}s:\n *\n * Outer {@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <template ngFor let-item [ngForOf]=\"items\"></template>\n * </ul>\n * ```\n *\n * Inner {@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {@link TemplateRef}s.\n *\n * The outer/inner {@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <template view-container-ref></template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n  get context(): C { return unimplemented(); }\n\n  get rootNodes(): any[] { return <any[]>unimplemented(); };\n\n  /**\n   * Destroys the view and all of the data structures associated with it.\n   */\n  abstract destroy();\n}\n\nexport class ViewRef_<C> implements EmbeddedViewRef<C>, ChangeDetectorRef {\n  constructor(private _view: AppView<C>) { this._view = _view; }\n\n  get internalView(): AppView<C> { return this._view; }\n\n  get rootNodes(): any[] { return this._view.flatRootNodes; }\n\n  get context() { return this._view.context; }\n\n  get destroyed(): boolean { return this._view.destroyed; }\n\n  markForCheck(): void { this._view.markPathToRootAsCheckOnce(); }\n  detach(): void { this._view.cdMode = ChangeDetectionStrategy.Detached; }\n  detectChanges(): void { this._view.detectChanges(false); }\n  checkNoChanges(): void { this._view.detectChanges(true); }\n  reattach(): void {\n    this._view.cdMode = ChangeDetectionStrategy.CheckAlways;\n    this.markForCheck();\n  }\n\n  onDestroy(callback: Function) { this._view.disposables.push(callback); }\n\n  destroy() { this._view.destroy(); }\n}\n"]}