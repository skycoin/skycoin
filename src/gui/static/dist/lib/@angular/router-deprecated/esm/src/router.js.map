{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../../../modules/@angular/router-deprecated/src/router.ts"],"names":[],"mappings":"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","sourcesContent":["import {PromiseWrapper, EventEmitter, ObservableWrapper} from '../src/facade/async';\nimport {Map, StringMapWrapper} from '../src/facade/collection';\nimport {isBlank, isPresent, Type} from '../src/facade/lang';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Location} from '@angular/common';\nimport {RouteRegistry, ROUTER_PRIMARY_COMPONENT} from './route_registry';\nimport {ComponentInstruction, Instruction} from './instruction';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {getCanActivateHook} from './lifecycle/route_lifecycle_reflector';\nimport {RouteDefinition} from './route_config/route_config_impl';\nimport {Injectable, Inject} from '@angular/core';\n\nlet _resolveToTrue = PromiseWrapper.resolve(true);\nlet _resolveToFalse = PromiseWrapper.resolve(false);\n\n/**\n * The `Router` is responsible for mapping URLs to components.\n *\n * You can see the state of the router by inspecting the read-only field `router.navigating`.\n * This may be useful for showing a spinner, for instance.\n *\n * ## Concepts\n *\n * Routers and component instances have a 1:1 correspondence.\n *\n * The router holds reference to a number of {@link RouterOutlet}.\n * An outlet is a placeholder that the router dynamically fills in depending on the current URL.\n *\n * When the router navigates from a URL, it must first recognize it and serialize it into an\n * `Instruction`.\n * The router uses the `RouteRegistry` to get an `Instruction`.\n */\n@Injectable()\nexport class Router {\n  navigating: boolean = false;\n  lastNavigationAttempt: string;\n  /**\n   * The current `Instruction` for the router\n   */\n  public currentInstruction: Instruction = null;\n\n  private _currentNavigation: Promise<any> = _resolveToTrue;\n  private _outlet: RouterOutlet = null;\n\n  private _auxRouters = new Map<string, Router>();\n  private _childRouter: Router;\n\n  private _subject: EventEmitter<any> = new EventEmitter();\n\n\n  constructor(public registry: RouteRegistry, public parent: Router, public hostComponent: any,\n              public root?: Router) {}\n\n  /**\n   * Constructs a child router. You probably don't need to use this unless you're writing a reusable\n   * component.\n   */\n  childRouter(hostComponent: any): Router {\n    return this._childRouter = new ChildRouter(this, hostComponent);\n  }\n\n\n  /**\n   * Constructs a child router. You probably don't need to use this unless you're writing a reusable\n   * component.\n   */\n  auxRouter(hostComponent: any): Router { return new ChildRouter(this, hostComponent); }\n\n  /**\n   * Register an outlet to be notified of primary route changes.\n   *\n   * You probably don't need to use this unless you're writing a reusable component.\n   */\n  registerPrimaryOutlet(outlet: RouterOutlet): Promise<any> {\n    if (isPresent(outlet.name)) {\n      throw new BaseException(`registerPrimaryOutlet expects to be called with an unnamed outlet.`);\n    }\n\n    if (isPresent(this._outlet)) {\n      throw new BaseException(`Primary outlet is already registered.`);\n    }\n\n    this._outlet = outlet;\n    if (isPresent(this.currentInstruction)) {\n      return this.commit(this.currentInstruction, false);\n    }\n    return _resolveToTrue;\n  }\n\n  /**\n   * Unregister an outlet (because it was destroyed, etc).\n   *\n   * You probably don't need to use this unless you're writing a custom outlet implementation.\n   */\n  unregisterPrimaryOutlet(outlet: RouterOutlet): void {\n    if (isPresent(outlet.name)) {\n      throw new BaseException(`registerPrimaryOutlet expects to be called with an unnamed outlet.`);\n    }\n    this._outlet = null;\n  }\n\n\n  /**\n   * Register an outlet to notified of auxiliary route changes.\n   *\n   * You probably don't need to use this unless you're writing a reusable component.\n   */\n  registerAuxOutlet(outlet: RouterOutlet): Promise<any> {\n    var outletName = outlet.name;\n    if (isBlank(outletName)) {\n      throw new BaseException(`registerAuxOutlet expects to be called with an outlet with a name.`);\n    }\n\n    var router = this.auxRouter(this.hostComponent);\n\n    this._auxRouters.set(outletName, router);\n    router._outlet = outlet;\n\n    var auxInstruction;\n    if (isPresent(this.currentInstruction) &&\n        isPresent(auxInstruction = this.currentInstruction.auxInstruction[outletName])) {\n      return router.commit(auxInstruction);\n    }\n    return _resolveToTrue;\n  }\n\n\n  /**\n   * Given an instruction, returns `true` if the instruction is currently active,\n   * otherwise `false`.\n   */\n  isRouteActive(instruction: Instruction): boolean {\n    var router: Router = this;\n\n    if (isBlank(this.currentInstruction)) {\n      return false;\n    }\n\n    // `instruction` corresponds to the root router\n    while (isPresent(router.parent) && isPresent(instruction.child)) {\n      router = router.parent;\n      instruction = instruction.child;\n    }\n\n    if (isBlank(instruction.component) || isBlank(this.currentInstruction.component) ||\n        this.currentInstruction.component.routeName != instruction.component.routeName) {\n      return false;\n    }\n\n    let paramEquals = true;\n\n    if (isPresent(this.currentInstruction.component.params)) {\n      StringMapWrapper.forEach(instruction.component.params, (value, key) => {\n        if (this.currentInstruction.component.params[key] !== value) {\n          paramEquals = false;\n        }\n      });\n    }\n\n    return paramEquals;\n  }\n\n\n  /**\n   * Dynamically update the routing configuration and trigger a navigation.\n   *\n   * ### Usage\n   *\n   * ```\n   * router.config([\n   *   { 'path': '/', 'component': IndexComp },\n   *   { 'path': '/user/:id', 'component': UserComp },\n   * ]);\n   * ```\n   */\n  config(definitions: RouteDefinition[]): Promise<any> {\n    definitions.forEach(\n        (routeDefinition) => { this.registry.config(this.hostComponent, routeDefinition); });\n    return this.renavigate();\n  }\n\n\n  /**\n   * Navigate based on the provided Route Link DSL. It's preferred to navigate with this method\n   * over `navigateByUrl`.\n   *\n   * ### Usage\n   *\n   * This method takes an array representing the Route Link DSL:\n   * ```\n   * ['./MyCmp', {param: 3}]\n   * ```\n   * See the {@link RouterLink} directive for more.\n   */\n  navigate(linkParams: any[]): Promise<any> {\n    var instruction = this.generate(linkParams);\n    return this.navigateByInstruction(instruction, false);\n  }\n\n\n  /**\n   * Navigate to a URL. Returns a promise that resolves when navigation is complete.\n   * It's preferred to navigate with `navigate` instead of this method, since URLs are more brittle.\n   *\n   * If the given URL begins with a `/`, router will navigate absolutely.\n   * If the given URL does not begin with `/`, the router will navigate relative to this component.\n   */\n  navigateByUrl(url: string, _skipLocationChange: boolean = false): Promise<any> {\n    return this._currentNavigation = this._currentNavigation.then((_) => {\n      this.lastNavigationAttempt = url;\n      this._startNavigating();\n      return this._afterPromiseFinishNavigating(this.recognize(url).then((instruction) => {\n        if (isBlank(instruction)) {\n          return false;\n        }\n        return this._navigate(instruction, _skipLocationChange);\n      }));\n    });\n  }\n\n\n  /**\n   * Navigate via the provided instruction. Returns a promise that resolves when navigation is\n   * complete.\n   */\n  navigateByInstruction(instruction: Instruction,\n                        _skipLocationChange: boolean = false): Promise<any> {\n    if (isBlank(instruction)) {\n      return _resolveToFalse;\n    }\n    return this._currentNavigation = this._currentNavigation.then((_) => {\n      this._startNavigating();\n      return this._afterPromiseFinishNavigating(this._navigate(instruction, _skipLocationChange));\n    });\n  }\n\n  /** @internal */\n  _settleInstruction(instruction: Instruction): Promise<any> {\n    return instruction.resolveComponent().then((_) => {\n      var unsettledInstructions: Array<Promise<any>> = [];\n\n      if (isPresent(instruction.component)) {\n        instruction.component.reuse = false;\n      }\n\n      if (isPresent(instruction.child)) {\n        unsettledInstructions.push(this._settleInstruction(instruction.child));\n      }\n\n      StringMapWrapper.forEach(instruction.auxInstruction, (instruction: Instruction, _) => {\n        unsettledInstructions.push(this._settleInstruction(instruction));\n      });\n      return PromiseWrapper.all(unsettledInstructions);\n    });\n  }\n\n  /** @internal */\n  _navigate(instruction: Instruction, _skipLocationChange: boolean): Promise<any> {\n    return this._settleInstruction(instruction)\n        .then((_) => this._routerCanReuse(instruction))\n        .then((_) => this._canActivate(instruction))\n        .then((result: boolean) => {\n          if (!result) {\n            return false;\n          }\n          return this._routerCanDeactivate(instruction)\n              .then((result: boolean) => {\n                if (result) {\n                  return this.commit(instruction, _skipLocationChange)\n                      .then((_) => {\n                        this._emitNavigationFinish(instruction.toRootUrl());\n                        return true;\n                      });\n                }\n              });\n        });\n  }\n\n  private _emitNavigationFinish(url): void { ObservableWrapper.callEmit(this._subject, url); }\n  /** @internal */\n  _emitNavigationFail(url): void { ObservableWrapper.callError(this._subject, url); }\n\n  private _afterPromiseFinishNavigating(promise: Promise<any>): Promise<any> {\n    return PromiseWrapper.catchError(promise.then((_) => this._finishNavigating()), (err) => {\n      this._finishNavigating();\n      throw err;\n    });\n  }\n\n  /*\n   * Recursively set reuse flags\n   */\n  /** @internal */\n  _routerCanReuse(instruction: Instruction): Promise<any> {\n    if (isBlank(this._outlet)) {\n      return _resolveToFalse;\n    }\n    if (isBlank(instruction.component)) {\n      return _resolveToTrue;\n    }\n    return this._outlet.routerCanReuse(instruction.component)\n        .then((result) => {\n          instruction.component.reuse = result;\n          if (result && isPresent(this._childRouter) && isPresent(instruction.child)) {\n            return this._childRouter._routerCanReuse(instruction.child);\n          }\n        });\n  }\n\n  private _canActivate(nextInstruction: Instruction): Promise<boolean> {\n    return canActivateOne(nextInstruction, this.currentInstruction);\n  }\n\n  private _routerCanDeactivate(instruction: Instruction): Promise<boolean> {\n    if (isBlank(this._outlet)) {\n      return _resolveToTrue;\n    }\n    var next: Promise<boolean>;\n    var childInstruction: Instruction = null;\n    var reuse: boolean = false;\n    var componentInstruction: ComponentInstruction = null;\n    if (isPresent(instruction)) {\n      childInstruction = instruction.child;\n      componentInstruction = instruction.component;\n      reuse = isBlank(instruction.component) || instruction.component.reuse;\n    }\n    if (reuse) {\n      next = _resolveToTrue;\n    } else {\n      next = this._outlet.routerCanDeactivate(componentInstruction);\n    }\n    // TODO: aux route lifecycle hooks\n    return next.then<boolean>((result): boolean | Promise<boolean> => {\n      if (result == false) {\n        return false;\n      }\n      if (isPresent(this._childRouter)) {\n        // TODO: ideally, this closure would map to async-await in Dart.\n        // For now, casting to any to suppress an error.\n        return <any>this._childRouter._routerCanDeactivate(childInstruction);\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Updates this router and all descendant routers according to the given instruction\n   */\n  commit(instruction: Instruction, _skipLocationChange: boolean = false): Promise<any> {\n    this.currentInstruction = instruction;\n\n    var next: Promise<any> = _resolveToTrue;\n    if (isPresent(this._outlet) && isPresent(instruction.component)) {\n      var componentInstruction = instruction.component;\n      if (componentInstruction.reuse) {\n        next = this._outlet.reuse(componentInstruction);\n      } else {\n        next =\n            this.deactivate(instruction).then((_) => this._outlet.activate(componentInstruction));\n      }\n      if (isPresent(instruction.child)) {\n        next = next.then((_) => {\n          if (isPresent(this._childRouter)) {\n            return this._childRouter.commit(instruction.child);\n          }\n        });\n      }\n    }\n\n    var promises: Promise<any>[] = [];\n    this._auxRouters.forEach((router, name) => {\n      if (isPresent(instruction.auxInstruction[name])) {\n        promises.push(router.commit(instruction.auxInstruction[name]));\n      }\n    });\n\n    return next.then((_) => PromiseWrapper.all(promises));\n  }\n\n\n  /** @internal */\n  _startNavigating(): void { this.navigating = true; }\n\n  /** @internal */\n  _finishNavigating(): void { this.navigating = false; }\n\n\n  /**\n   * Subscribe to URL updates from the router\n   */\n  subscribe(onNext: (value: any) => void, onError?: (value: any) => void): Object {\n    return ObservableWrapper.subscribe(this._subject, onNext, onError);\n  }\n\n\n  /**\n   * Removes the contents of this router's outlet and all descendant outlets\n   */\n  deactivate(instruction: Instruction): Promise<any> {\n    var childInstruction: Instruction = null;\n    var componentInstruction: ComponentInstruction = null;\n    if (isPresent(instruction)) {\n      childInstruction = instruction.child;\n      componentInstruction = instruction.component;\n    }\n    var next: Promise<any> = _resolveToTrue;\n    if (isPresent(this._childRouter)) {\n      next = this._childRouter.deactivate(childInstruction);\n    }\n    if (isPresent(this._outlet)) {\n      next = next.then((_) => this._outlet.deactivate(componentInstruction));\n    }\n\n    // TODO: handle aux routes\n\n    return next;\n  }\n\n\n  /**\n   * Given a URL, returns an instruction representing the component graph\n   */\n  recognize(url: string): Promise<Instruction> {\n    var ancestorComponents = this._getAncestorInstructions();\n    return this.registry.recognize(url, ancestorComponents);\n  }\n\n  private _getAncestorInstructions(): Instruction[] {\n    var ancestorInstructions: Instruction[] = [this.currentInstruction];\n    var ancestorRouter: Router = this;\n    while (isPresent(ancestorRouter = ancestorRouter.parent)) {\n      ancestorInstructions.unshift(ancestorRouter.currentInstruction);\n    }\n    return ancestorInstructions;\n  }\n\n\n  /**\n   * Navigates to either the last URL successfully navigated to, or the last URL requested if the\n   * router has yet to successfully navigate.\n   */\n  renavigate(): Promise<any> {\n    if (isBlank(this.lastNavigationAttempt)) {\n      return this._currentNavigation;\n    }\n    return this.navigateByUrl(this.lastNavigationAttempt);\n  }\n\n\n  /**\n   * Generate an `Instruction` based on the provided Route Link DSL.\n   */\n  generate(linkParams: any[]): Instruction {\n    var ancestorInstructions = this._getAncestorInstructions();\n    return this.registry.generate(linkParams, ancestorInstructions);\n  }\n}\n\n@Injectable()\nexport class RootRouter extends Router {\n  /** @internal */\n  _location: Location;\n  /** @internal */\n  _locationSub: Object;\n\n  constructor(registry: RouteRegistry, location: Location,\n              @Inject(ROUTER_PRIMARY_COMPONENT) primaryComponent: Type) {\n    super(registry, null, primaryComponent);\n    this.root = this;\n    this._location = location;\n    this._locationSub = this._location.subscribe((change) => {\n      // we call recognize ourselves\n      this.recognize(change['url'])\n          .then((instruction) => {\n            if (isPresent(instruction)) {\n              this.navigateByInstruction(instruction, isPresent(change['pop']))\n                  .then((_) => {\n                    // this is a popstate event; no need to change the URL\n                    if (isPresent(change['pop']) && change['type'] != 'hashchange') {\n                      return;\n                    }\n                    var emitPath = instruction.toUrlPath();\n                    var emitQuery = instruction.toUrlQuery();\n                    if (emitPath.length > 0 && emitPath[0] != '/') {\n                      emitPath = '/' + emitPath;\n                    }\n\n                    // We've opted to use pushstate and popState APIs regardless of whether you\n                    // an app uses HashLocationStrategy or PathLocationStrategy.\n                    // However, apps that are migrating might have hash links that operate outside\n                    // angular to which routing must respond.\n                    // Therefore we know that all hashchange events occur outside Angular.\n                    // To support these cases where we respond to hashchanges and redirect as a\n                    // result, we need to replace the top item on the stack.\n                    if (change['type'] == 'hashchange') {\n                      if (instruction.toRootUrl() != this._location.path()) {\n                        this._location.replaceState(emitPath, emitQuery);\n                      }\n                    } else {\n                      this._location.go(emitPath, emitQuery);\n                    }\n                  });\n            } else {\n              this._emitNavigationFail(change['url']);\n            }\n          });\n    });\n\n    this.registry.configFromComponent(primaryComponent);\n    this.navigateByUrl(location.path());\n  }\n\n  commit(instruction: Instruction, _skipLocationChange: boolean = false): Promise<any> {\n    var emitPath = instruction.toUrlPath();\n    var emitQuery = instruction.toUrlQuery();\n    if (emitPath.length > 0 && emitPath[0] != '/') {\n      emitPath = '/' + emitPath;\n    }\n    var promise = super.commit(instruction);\n    if (!_skipLocationChange) {\n      promise = promise.then((_) => { this._location.go(emitPath, emitQuery); });\n    }\n    return promise;\n  }\n\n  dispose(): void {\n    if (isPresent(this._locationSub)) {\n      ObservableWrapper.dispose(this._locationSub);\n      this._locationSub = null;\n    }\n  }\n}\n\nclass ChildRouter extends Router {\n  constructor(parent: Router, hostComponent) {\n    super(parent.registry, parent, hostComponent, parent.root);\n    this.parent = parent;\n  }\n\n\n  navigateByUrl(url: string, _skipLocationChange: boolean = false): Promise<any> {\n    // Delegate navigation to the root router\n    return this.parent.navigateByUrl(url, _skipLocationChange);\n  }\n\n  navigateByInstruction(instruction: Instruction,\n                        _skipLocationChange: boolean = false): Promise<any> {\n    // Delegate navigation to the root router\n    return this.parent.navigateByInstruction(instruction, _skipLocationChange);\n  }\n}\n\n\nfunction canActivateOne(nextInstruction: Instruction,\n                        prevInstruction: Instruction): Promise<boolean> {\n  var next = _resolveToTrue;\n  if (isBlank(nextInstruction.component)) {\n    return next;\n  }\n  if (isPresent(nextInstruction.child)) {\n    next = canActivateOne(nextInstruction.child,\n                          isPresent(prevInstruction) ? prevInstruction.child : null);\n  }\n  return next.then<boolean>((result: boolean): boolean => {\n    if (result == false) {\n      return false;\n    }\n    if (nextInstruction.component.reuse) {\n      return true;\n    }\n    var hook = getCanActivateHook(nextInstruction.component.componentType);\n    if (isPresent(hook)) {\n      return hook(nextInstruction.component,\n                  isPresent(prevInstruction) ? prevInstruction.component : null);\n    }\n    return true;\n  });\n}\n"]}