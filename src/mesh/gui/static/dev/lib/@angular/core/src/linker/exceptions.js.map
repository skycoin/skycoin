{"version":3,"file":"exceptions.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/exceptions.ts"],"names":[],"mappings":";;;;;;AAIE,2BAA8C,6BAA6B,CAAC,CAAA;AAE9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH;IAAqE,mEAAa;IAChF,yDAAY,QAAa,EAAE,SAAc,EAAE,OAAY;QACrD,kBAAM,+CAA+C;YAC/C,uBAAoB,QAAQ,2BAAsB,SAAS,OAAG,CAAC,CAAC;IACxE,CAAC;IACH,sDAAC;AAAD,CAAC,AALD,CAAqE,0BAAa,GAKjF;AALY,uDAA+C,kDAK3D,CAAA;AAED;;;;;GAKG;AACH;IAA0C,wCAAgB;IACxD,8BAAY,iBAAsB,EAAE,aAAkB,EAAE,OAAY;QAClE,kBAAM,cAAY,OAAO,CAAC,MAAQ,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACjF,CAAC;IACH,2BAAC;AAAD,CAAC,AAJD,CAA0C,6BAAgB,GAIzD;AAJY,4BAAoB,uBAIhC,CAAA;AAED;;;;;;GAMG;AACH;IAA4C,0CAAa;IACvD,gCAAY,OAAe;QAAI,kBAAM,sCAAoC,OAAS,CAAC,CAAC;IAAC,CAAC;IACxF,6BAAC;AAAD,CAAC,AAFD,CAA4C,0BAAa,GAExD;AAFY,8BAAsB,yBAElC,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {BaseException, WrappedException} from '../../src/facade/exceptions';\n\n/**\n * An error thrown if application changes model breaking the top-down data flow.\n *\n * This exception is only thrown in dev mode.\n *\n * <!-- TODO: Add a link once the dev mode option is configurable -->\n *\n * ### Example\n *\n * ```typescript\n * @Component({\n *   selector: 'parent',\n *   template: `\n *     <child [prop]=\"parentProp\"></child>\n *   `,\n *   directives: [forwardRef(() => Child)]\n * })\n * class Parent {\n *   parentProp = \"init\";\n * }\n *\n * @Directive({selector: 'child', inputs: ['prop']})\n * class Child {\n *   constructor(public parent: Parent) {}\n *\n *   set prop(v) {\n *     // this updates the parent property, which is disallowed during change detection\n *     // this will result in ExpressionChangedAfterItHasBeenCheckedException\n *     this.parent.parentProp = \"updated\";\n *   }\n * }\n * ```\n */\nexport class ExpressionChangedAfterItHasBeenCheckedException extends BaseException {\n  constructor(oldValue: any, currValue: any, context: any) {\n    super(`Expression has changed after it was checked. ` +\n          `Previous value: '${oldValue}'. Current value: '${currValue}'`);\n  }\n}\n\n/**\n * Thrown when an exception was raised during view creation, change detection or destruction.\n *\n * This error wraps the original exception to attach additional contextual information that can\n * be useful for debugging.\n */\nexport class ViewWrappedException extends WrappedException {\n  constructor(originalException: any, originalStack: any, context: any) {\n    super(`Error in ${context.source}`, originalException, originalStack, context);\n  }\n}\n\n/**\n * Thrown when a destroyed view is used.\n *\n * This error indicates a bug in the framework.\n *\n * This is an internal Angular error.\n */\nexport class ViewDestroyedException extends BaseException {\n  constructor(details: string) { super(`Attempt to use a destroyed view: ${details}`); }\n}\n"]}