{"version":3,"file":"router_outlet.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/directives/router_outlet.ts"],"names":[],"mappings":";AAIE,qBAUK,eAAe,CAAC,CAAA;AACvB,uBAA8B,WAAW,CAAC,CAAA;AAC1C,0BAAkC,cAAc,CAAC,CAAA;AACjD,qBAAiC,gBAAgB,CAAC,CAAA;AAClD;IAIE,sBAAY,eAAgC,EAAU,SAA2B,EAAE,IAAY;QAAzC,cAAS,GAAT,SAAS,CAAkB;QAC/E,eAAe,CAAC,cAAc,CAAC,cAAO,CAAC,IAAI,CAAC,GAAG,+BAAmB,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC;IACnF,CAAC;IAED,6BAAM,GAAN;QACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAKD,sBAAI,yCAAe;QAHnB;;WAEG;aACH,cAAgC,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAKhG,sBAAI,kCAAQ;QAHZ;;WAEG;aACH,cAA0B,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAE3D;;OAEG;IACH,2BAAI,GAAJ,UAAK,OAA8B,EAAE,SAAuC,EACvE,SAA0B;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,GAAG,GAAG,yBAAkB,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAC7F,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QACvF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,eAAe,EAAC,EAAG,EAAE;KACzD,CAAC;IACK,2BAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,wBAAe,GAAG;QACzB,EAAC,IAAI,EAAE,uBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAG,EAAC;KACvE,CAAC;IACF,mBAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,oBAAY,eAyCxB,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {\n  ResolvedReflectiveProvider,\n  Directive,\n  DynamicComponentLoader,\n  ViewContainerRef,\n  Attribute,\n  ComponentRef,\n  ComponentFactory,\n  ReflectiveInjector,\n  OnInit\n} from '@angular/core';\nimport {RouterOutletMap} from '../router';\nimport {DEFAULT_OUTLET_NAME} from '../constants';\nimport {isPresent, isBlank} from '../facade/lang';\nexport class RouterOutlet {\n  private _loaded: ComponentRef<any>;\n  public outletMap: RouterOutletMap;\n\n  constructor(parentOutletMap: RouterOutletMap, private _location: ViewContainerRef, name: string) {\n    parentOutletMap.registerOutlet(isBlank(name) ? DEFAULT_OUTLET_NAME : name, this);\n  }\n\n  unload(): void {\n    this._loaded.destroy();\n    this._loaded = null;\n  }\n\n  /**\n   * Returns the loaded component.\n   */\n  get loadedComponent(): Object { return isPresent(this._loaded) ? this._loaded.instance : null; }\n\n  /**\n   * Returns true is the outlet is not empty.\n   */\n  get isLoaded(): boolean { return isPresent(this._loaded); }\n\n  /**\n   * Called by the Router to instantiate a new component.\n   */\n  load(factory: ComponentFactory<any>, providers: ResolvedReflectiveProvider[],\n       outletMap: RouterOutletMap): ComponentRef<any> {\n    this.outletMap = outletMap;\n    let inj = ReflectiveInjector.fromResolvedProviders(providers, this._location.parentInjector);\n    this._loaded = this._location.createComponent(factory, this._location.length, inj, []);\n    return this._loaded;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'router-outlet'}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: RouterOutletMap, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Attribute, args: ['name', ] }, ]},\n];\n}\n"]}