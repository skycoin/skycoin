{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/model.ts"],"names":[],"mappings":"OAIS,EAAC,SAAS,EAAE,OAAO,EAAE,aAAa,EAAC,MAAM,uBAAuB;OAClE,EAAa,YAAY,EAAE,iBAAiB,EAAC,MAAM,wBAAwB;OAC3E,EAAC,cAAc,EAAC,MAAM,0BAA0B;OAChD,EAAC,gBAAgB,EAAE,WAAW,EAAC,MAAM,6BAA6B;AAGzE;;GAEG;AACH,OAAO,MAAM,KAAK,GAAG,OAAO,CAAC;AAE7B;;GAEG;AACH,OAAO,MAAM,OAAO,GAAG,SAAS,CAAC;AAEjC;;;GAGG;AACH,OAAO,MAAM,OAAO,GAAG,SAAS,CAAC;AAEjC,0BAA0B,OAAe;IACvC,MAAM,CAAC,OAAO,YAAY,eAAe,CAAC;AAC5C,CAAC;AAED,eAAe,OAAwB,EAAE,IAAoC;IAC3E,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,IAAI,CAAC;IAE/B,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,GAAY,IAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IACD,EAAE,CAAC,CAAC,IAAI,YAAY,KAAK,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,IAAI,CAAC;IAEpE,MAAM,CAA0B,IAAK;SAChC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI;QACd,EAAE,CAAC,CAAC,CAAC,YAAY,YAAY,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QAC/D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,YAAY,CAAC,CAAC,CAAC;YACrC,IAAI,KAAK,GAAW,IAAI,CAAC;YACzB,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC,EAAE,OAAO,CAAC,CAAC;AAClB,CAAC;AAED,sBAAsB,CAAM;IAC1B,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAC5E,CAAC;AAED;;GAEG;AACH;IAaE,YAAmB,SAAsB,EAAS,cAAgC;QAA/D,cAAS,GAAT,SAAS,CAAa;QAAS,mBAAc,GAAd,cAAc,CAAkB;QAL1E,cAAS,GAAY,IAAI,CAAC;QAC1B,aAAQ,GAAY,KAAK,CAAC;IAImD,CAAC;IAEtF,IAAI,KAAK,KAAU,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAExC,IAAI,MAAM,KAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAE7C,IAAI,KAAK,KAAc,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC;IAEvD;;OAEG;IACH,IAAI,MAAM,KAA2B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAE3D,IAAI,QAAQ,KAAc,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAElD,IAAI,KAAK,KAAc,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAE/C,IAAI,OAAO,KAAc,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEhD,IAAI,SAAS,KAAc,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEnD,IAAI,YAAY,KAAsB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IAElE,IAAI,aAAa,KAAsB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IAEpE,IAAI,OAAO,KAAc,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC;IAE1D,aAAa,KAAW,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;IAE/C,WAAW,CAAC,EAAC,QAAQ,EAAC,GAAyB,EAAE;QAC/C,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAED,aAAa,CAAC,EAAC,QAAQ,EAAC,GAAyB,EAAE;QACjD,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAED,SAAS,CAAC,MAAmC,IAAU,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;IAE/E,sBAAsB,CAClB,EAAC,QAAQ,EAAE,SAAS,EAAC,GAA8C,EAAE;QACvE,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QACnC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC;QAEpD,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5D,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAC,CAAC,CAAC;QAClF,CAAC;IACH,CAAC;IAEO,aAAa;QACnB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IACjE,CAAC;IAEO,kBAAkB,CAAC,SAAkB;QAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnC,IAAI,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,4BAA4B,GAAG,iBAAiB,CAAC,SAAS,CAC3D,GAAG,EAAE,CAAC,GAAyB,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC,CAAC,CAAC;QACvF,CAAC;IACH,CAAC;IAEO,2BAA2B;QACjC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC;YACjD,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,SAAS,CAAC,MAA4B,EAAE,EAAC,SAAS,EAAC,GAA0B,EAAE;QAC7E,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAEvC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAED,IAAI,CAAC,IAAoC,IAAqB,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAEzF,QAAQ,CAAC,SAAiB,EAAE,IAAI,GAAa,IAAI;QAC/C,IAAI,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QACrF,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,SAAiB,EAAE,IAAI,GAAa,IAAI;QAC/C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,IAAI;QACN,IAAI,CAAC,GAAoB,IAAI,CAAC;QAE9B,OAAO,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IAED,gBAAgB;IAChB,qBAAqB;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAEvC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,gBAAgB;QACd,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,IAAI,YAAY,EAAE,CAAC;IAC3C,CAAC;IAGO,gBAAgB;QACtB,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC;QAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC;QACzD,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC;QACzD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;AAOH,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACH,6BAA6B,eAAe;IAI1C,YAAY,KAAK,GAAQ,IAAI,EAAE,SAAS,GAAgB,IAAI,EAChD,cAAc,GAAqB,IAAI;QACjD,MAAM,SAAS,EAAE,cAAc,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,sBAAsB,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAChE,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;OAWG;IACH,WAAW,CAAC,KAAU,EAAE,EAAC,QAAQ,EAAE,SAAS,EAAE,qBAAqB,EAAC,GAIhE,EAAE;QACJ,qBAAqB,GAAG,SAAS,CAAC,qBAAqB,CAAC,GAAG,qBAAqB,GAAG,IAAI,CAAC;QACxF,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,qBAAqB,CAAC;YAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpF,IAAI,CAAC,sBAAsB,CAAC,EAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAC,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,YAAY,KAAI,CAAC;IAEjB;;OAEG;IACH,sBAAsB,CAAC,MAAc,IAAa,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAEjE;;OAEG;IACH,gBAAgB,CAAC,EAAY,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;AAC/D,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,kCAAkC,eAAe;IAG/C,YAAmB,QAA0C,EACjD,SAAS,GAA6B,IAAI,EAAE,SAAS,GAAgB,IAAI,EACzE,cAAc,GAAqB,IAAI;QACjD,MAAM,SAAS,EAAE,cAAc,CAAC,CAAC;QAHhB,aAAQ,GAAR,QAAQ,CAAkC;QAI3D,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,EAAE,CAAC;QACxD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,sBAAsB,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,IAAY,EAAE,OAAwB;QAC/C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAC9B,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,IAAY,IAAU,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAEnF;;OAEG;IACH,OAAO,CAAC,WAAmB;QACzB,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,WAAmB;QACzB,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,WAAmB;QAC1B,IAAI,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC9D,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC;IAED,gBAAgB;IAChB,qBAAqB;QACnB,gBAAgB,CAAC,OAAO,CACpB,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAwB,EAAE,IAAY,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/F,CAAC;IAED,gBAAgB;IAChB,YAAY,KAAK,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAErD,gBAAgB;IAChB,sBAAsB,CAAC,MAAc;QACnC,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAwB,EAAE,IAAY;YAC7E,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED,gBAAgB;IAChB,YAAY;QACV,MAAM,CAAC,IAAI,CAAC,eAAe,CACvB,EAAE,EAAE,CAAC,GAAmC,EAAE,OAAwB,EAAE,IAAY;YAC9E,GAAG,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;YAC1B,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;IACT,CAAC;IAED,gBAAgB;IAChB,eAAe,CAAC,SAAc,EAAE,EAAY;QAC1C,IAAI,GAAG,GAAG,SAAS,CAAC;QACpB,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAwB,EAAE,IAAY;YAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED,gBAAgB;IAChB,SAAS,CAAC,WAAmB;QAC3B,IAAI,UAAU,GAAG,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACzE,MAAM,CAAC,CAAC,UAAU,IAAI,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,kCAAkC,eAAe;IAC/C,YAAmB,QAA2B,EAAE,SAAS,GAAgB,IAAI,EACjE,cAAc,GAAqB,IAAI;QACjD,MAAM,SAAS,EAAE,cAAc,CAAC,CAAC;QAFhB,aAAQ,GAAR,QAAQ,CAAmB;QAG5C,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,sBAAsB,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACH,EAAE,CAAC,KAAa,IAAqB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEnE;;OAEG;IACH,IAAI,CAAC,OAAwB;QAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAa,EAAE,OAAwB;QAC5C,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAClD,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,KAAa;QACpB,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,IAAI,MAAM,KAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAErD,gBAAgB;IAChB,YAAY,KAAW,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAErF,gBAAgB;IAChB,sBAAsB,CAAC,MAAc;QACnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;IACrD,CAAC;IAGD,gBAAgB;IAChB,qBAAqB;QACnB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC;AACH,CAAC;AAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent, isBlank, normalizeBool} from '../../src/facade/lang';\nimport {Observable, EventEmitter, ObservableWrapper} from '../../src/facade/async';\nimport {PromiseWrapper} from '../../src/facade/promise';\nimport {StringMapWrapper, ListWrapper} from '../../src/facade/collection';\nimport {ValidatorFn, AsyncValidatorFn} from './directives/validators';\n\n/**\n * Indicates that a Control is valid, i.e. that no errors exist in the input value.\n */\nexport const VALID = \"VALID\";\n\n/**\n * Indicates that a Control is invalid, i.e. that an error exists in the input value.\n */\nexport const INVALID = \"INVALID\";\n\n/**\n * Indicates that a Control is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const PENDING = \"PENDING\";\n\nexport function isControl(control: Object): boolean {\n  return control instanceof AbstractControl;\n}\n\nfunction _find(control: AbstractControl, path: Array<string | number>| string) {\n  if (isBlank(path)) return null;\n\n  if (!(path instanceof Array)) {\n    path = (<string>path).split(\"/\");\n  }\n  if (path instanceof Array && ListWrapper.isEmpty(path)) return null;\n\n  return (<Array<string | number>>path)\n      .reduce((v, name) => {\n        if (v instanceof ControlGroup) {\n          return isPresent(v.controls[name]) ? v.controls[name] : null;\n        } else if (v instanceof ControlArray) {\n          var index = <number>name;\n          return isPresent(v.at(index)) ? v.at(index) : null;\n        } else {\n          return null;\n        }\n      }, control);\n}\n\nfunction toObservable(r: any): Observable<any> {\n  return PromiseWrapper.isPromise(r) ? ObservableWrapper.fromPromise(r) : r;\n}\n\n/**\n *\n */\nexport abstract class AbstractControl {\n  /** @internal */\n  _value: any;\n\n  private _valueChanges: EventEmitter<any>;\n  private _statusChanges: EventEmitter<any>;\n  private _status: string;\n  private _errors: {[key: string]: any};\n  private _pristine: boolean = true;\n  private _touched: boolean = false;\n  private _parent: ControlGroup | ControlArray;\n  private _asyncValidationSubscription: any;\n\n  constructor(public validator: ValidatorFn, public asyncValidator: AsyncValidatorFn) {}\n\n  get value(): any { return this._value; }\n\n  get status(): string { return this._status; }\n\n  get valid(): boolean { return this._status === VALID; }\n\n  /**\n   * Returns the errors of this control.\n   */\n  get errors(): {[key: string]: any} { return this._errors; }\n\n  get pristine(): boolean { return this._pristine; }\n\n  get dirty(): boolean { return !this.pristine; }\n\n  get touched(): boolean { return this._touched; }\n\n  get untouched(): boolean { return !this._touched; }\n\n  get valueChanges(): Observable<any> { return this._valueChanges; }\n\n  get statusChanges(): Observable<any> { return this._statusChanges; }\n\n  get pending(): boolean { return this._status == PENDING; }\n\n  markAsTouched(): void { this._touched = true; }\n\n  markAsDirty({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._pristine = false;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsDirty({onlySelf: onlySelf});\n    }\n  }\n\n  markAsPending({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._status = PENDING;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsPending({onlySelf: onlySelf});\n    }\n  }\n\n  setParent(parent: ControlGroup | ControlArray): void { this._parent = parent; }\n\n  updateValueAndValidity(\n      {onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._updateValue();\n\n    this._errors = this._runValidator();\n    this._status = this._calculateStatus();\n\n    if (this._status == VALID || this._status == PENDING) {\n      this._runAsyncValidator(emitEvent);\n    }\n\n    if (emitEvent) {\n      ObservableWrapper.callEmit(this._valueChanges, this._value);\n      ObservableWrapper.callEmit(this._statusChanges, this._status);\n    }\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.updateValueAndValidity({onlySelf: onlySelf, emitEvent: emitEvent});\n    }\n  }\n\n  private _runValidator(): {[key: string]: any} {\n    return isPresent(this.validator) ? this.validator(this) : null;\n  }\n\n  private _runAsyncValidator(emitEvent: boolean): void {\n    if (isPresent(this.asyncValidator)) {\n      this._status = PENDING;\n      this._cancelExistingSubscription();\n      var obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription = ObservableWrapper.subscribe(\n          obs, (res: {[key: string]: any}) => this.setErrors(res, {emitEvent: emitEvent}));\n    }\n  }\n\n  private _cancelExistingSubscription(): void {\n    if (isPresent(this._asyncValidationSubscription)) {\n      ObservableWrapper.dispose(this._asyncValidationSubscription);\n    }\n  }\n\n  /**\n   * Sets errors on a control.\n   *\n   * This is used when validations are run not automatically, but manually by the user.\n   *\n   * Calling `setErrors` will also update the validity of the parent control.\n   *\n   * ## Usage\n   *\n   * ```\n   * var login = new Control(\"someLogin\");\n   * login.setErrors({\n   *   \"notUnique\": true\n   * });\n   *\n   * expect(login.valid).toEqual(false);\n   * expect(login.errors).toEqual({\"notUnique\": true});\n   *\n   * login.updateValue(\"someOtherLogin\");\n   *\n   * expect(login.valid).toEqual(true);\n   * ```\n   */\n  setErrors(errors: {[key: string]: any}, {emitEvent}: {emitEvent?: boolean} = {}): void {\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._errors = errors;\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      ObservableWrapper.callEmit(this._statusChanges, this._status);\n    }\n\n    if (isPresent(this._parent)) {\n      this._parent._updateControlsErrors();\n    }\n  }\n\n  find(path: Array<string | number>| string): AbstractControl { return _find(this, path); }\n\n  getError(errorCode: string, path: string[] = null): any {\n    var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.find(path) : this;\n    if (isPresent(control) && isPresent(control._errors)) {\n      return StringMapWrapper.get(control._errors, errorCode);\n    } else {\n      return null;\n    }\n  }\n\n  hasError(errorCode: string, path: string[] = null): boolean {\n    return isPresent(this.getError(errorCode, path));\n  }\n\n  get root(): AbstractControl {\n    let x: AbstractControl = this;\n\n    while (isPresent(x._parent)) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n\n  /** @internal */\n  _updateControlsErrors(): void {\n    this._status = this._calculateStatus();\n\n    if (isPresent(this._parent)) {\n      this._parent._updateControlsErrors();\n    }\n  }\n\n  /** @internal */\n  _initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n\n\n  private _calculateStatus(): string {\n    if (isPresent(this._errors)) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _anyControlsHaveStatus(status: string): boolean;\n}\n\n/**\n * Defines a part of a form that cannot be divided into other controls. `Control`s have values and\n * validation state, which is determined by an optional validation function.\n *\n * `Control` is one of the three fundamental building blocks used to define forms in Angular, along\n * with {@link ControlGroup} and {@link ControlArray}.\n *\n * ## Usage\n *\n * By default, a `Control` is created for every `<input>` or other form component.\n * With {@link NgFormControl} or {@link NgFormModel} an existing {@link Control} can be\n * bound to a DOM element instead. This `Control` can be configured with a custom\n * validation function.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n */\nexport class Control extends AbstractControl {\n  /** @internal */\n  _onChange: Function;\n\n  constructor(value: any = null, validator: ValidatorFn = null,\n              asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._value = value;\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n\n  /**\n   * Set the value of the control to `value`.\n   *\n   * If `onlySelf` is `true`, this change will only affect the validation of this `Control`\n   * and not its parent component. If `emitEvent` is `true`, this change will cause a\n   * `valueChanges` event on the `Control` to be emitted. Both of these options default to\n   * `false`.\n   *\n   * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n   * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n   * specified.\n   */\n  updateValue(value: any, {onlySelf, emitEvent, emitModelToViewChange}: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean\n  } = {}): void {\n    emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n    this._value = value;\n    if (isPresent(this._onChange) && emitModelToViewChange) this._onChange(this._value);\n    this.updateValueAndValidity({onlySelf: onlySelf, emitEvent: emitEvent});\n  }\n\n  /**\n   * @internal\n   */\n  _updateValue() {}\n\n  /**\n   * @internal\n   */\n  _anyControlsHaveStatus(status: string): boolean { return false; }\n\n  /**\n   * Register a listener for change events.\n   */\n  registerOnChange(fn: Function): void { this._onChange = fn; }\n}\n\n/**\n * Defines a part of a form, of fixed length, that can contain other controls.\n *\n * A `ControlGroup` aggregates the values of each {@link Control} in the group.\n * The status of a `ControlGroup` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire group is invalid.\n * Similarly, if a control changes its value, the entire group changes as well.\n *\n * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other\n * controls, but is of variable length.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n */\nexport class ControlGroup extends AbstractControl {\n  private _optionals: {[key: string]: boolean};\n\n  constructor(public controls: {[key: string]: AbstractControl},\n              optionals: {[key: string]: boolean} = null, validator: ValidatorFn = null,\n              asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._optionals = isPresent(optionals) ? optionals : {};\n    this._initObservables();\n    this._setParentForControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Add a control to this group.\n   */\n  addControl(name: string, control: AbstractControl): void {\n    this.controls[name] = control;\n    control.setParent(this);\n  }\n\n  /**\n   * Remove a control from this group.\n   */\n  removeControl(name: string): void { StringMapWrapper.delete(this.controls, name); }\n\n  /**\n   * Mark the named control as non-optional.\n   */\n  include(controlName: string): void {\n    StringMapWrapper.set(this._optionals, controlName, true);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Mark the named control as optional.\n   */\n  exclude(controlName: string): void {\n    StringMapWrapper.set(this._optionals, controlName, false);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Check whether there is a control with the given name in the group.\n   */\n  contains(controlName: string): boolean {\n    var c = StringMapWrapper.contains(this.controls, controlName);\n    return c && this._included(controlName);\n  }\n\n  /** @internal */\n  _setParentForControls() {\n    StringMapWrapper.forEach(\n        this.controls, (control: AbstractControl, name: string) => { control.setParent(this); });\n  }\n\n  /** @internal */\n  _updateValue() { this._value = this._reduceValue(); }\n\n  /** @internal */\n  _anyControlsHaveStatus(status: string): boolean {\n    var res = false;\n    StringMapWrapper.forEach(this.controls, (control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && control.status == status);\n    });\n    return res;\n  }\n\n  /** @internal */\n  _reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control.value;\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _reduceChildren(initValue: any, fn: Function) {\n    var res = initValue;\n    StringMapWrapper.forEach(this.controls, (control: AbstractControl, name: string) => {\n      if (this._included(name)) {\n        res = fn(res, control, name);\n      }\n    });\n    return res;\n  }\n\n  /** @internal */\n  _included(controlName: string): boolean {\n    var isOptional = StringMapWrapper.contains(this._optionals, controlName);\n    return !isOptional || StringMapWrapper.get(this._optionals, controlName);\n  }\n}\n\n/**\n * Defines a part of a form, of variable length, that can contain other controls.\n *\n * A `ControlArray` aggregates the values of each {@link Control} in the group.\n * The status of a `ControlArray` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire array is invalid.\n * Similarly, if a control changes its value, the entire array changes as well.\n *\n * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain\n * other controls, but is of fixed length.\n *\n * ## Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `ControlArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `ControlArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n */\nexport class ControlArray extends AbstractControl {\n  constructor(public controls: AbstractControl[], validator: ValidatorFn = null,\n              asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._initObservables();\n    this._setParentForControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Get the {@link AbstractControl} at the given `index` in the array.\n   */\n  at(index: number): AbstractControl { return this.controls[index]; }\n\n  /**\n   * Insert a new {@link AbstractControl} at the end of the array.\n   */\n  push(control: AbstractControl): void {\n    this.controls.push(control);\n    control.setParent(this);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Insert a new {@link AbstractControl} at the given `index` in the array.\n   */\n  insert(index: number, control: AbstractControl): void {\n    ListWrapper.insert(this.controls, index, control);\n    control.setParent(this);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Remove the control at the given `index` in the array.\n   */\n  removeAt(index: number): void {\n    ListWrapper.removeAt(this.controls, index);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number { return this.controls.length; }\n\n  /** @internal */\n  _updateValue(): void { this._value = this.controls.map((control) => control.value); }\n\n  /** @internal */\n  _anyControlsHaveStatus(status: string): boolean {\n    return this.controls.some(c => c.status == status);\n  }\n\n\n  /** @internal */\n  _setParentForControls(): void {\n    this.controls.forEach((control) => { control.setParent(this); });\n  }\n}\n"]}