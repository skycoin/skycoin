{"version":3,"file":"abstract_control_directive.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/directives/abstract_control_directive.ts"],"names":[],"mappings":";AAKA,qBAAwB,0BAA0B,CAAC,CAAA;AACnD,2BAA4B,gCAAgC,CAAC,CAAA;AAE7D;;;;GAIG;AACH;IAAA;IAoBA,CAAC;IAnBC,sBAAI,6CAAO;aAAX,cAAiC,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAE1D,sBAAI,2CAAK;aAAT,cAAmB,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAEhF,sBAAI,2CAAK;aAAT,cAAuB,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAEpF,sBAAI,4CAAM;aAAV;YACE,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QAC9D,CAAC;;;OAAA;IAED,sBAAI,8CAAQ;aAAZ,cAA0B,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAE1F,sBAAI,2CAAK;aAAT,cAAuB,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAEpF,sBAAI,6CAAO;aAAX,cAAyB,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAExF,sBAAI,+CAAS;aAAb,cAA2B,MAAM,CAAC,gBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAE5F,sBAAI,0CAAI;aAAR,cAAuB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IACvC,+BAAC;AAAD,CAAC,AApBD,IAoBC;AApBqB,gCAAwB,2BAoB7C,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {AbstractControl} from '../model';\nimport {isPresent} from '../../../src/facade/lang';\nimport {unimplemented} from '../../../src/facade/exceptions';\n\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n */\nexport abstract class AbstractControlDirective {\n  get control(): AbstractControl { return unimplemented(); }\n\n  get value(): any { return isPresent(this.control) ? this.control.value : null; }\n\n  get valid(): boolean { return isPresent(this.control) ? this.control.valid : null; }\n\n  get errors(): {[key: string]: any} {\n    return isPresent(this.control) ? this.control.errors : null;\n  }\n\n  get pristine(): boolean { return isPresent(this.control) ? this.control.pristine : null; }\n\n  get dirty(): boolean { return isPresent(this.control) ? this.control.dirty : null; }\n\n  get touched(): boolean { return isPresent(this.control) ? this.control.touched : null; }\n\n  get untouched(): boolean { return isPresent(this.control) ? this.control.untouched : null; }\n\n  get path(): string[] { return null; }\n}\n"]}