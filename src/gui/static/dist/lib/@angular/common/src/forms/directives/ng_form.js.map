{"version":3,"file":"ng_form.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms/directives/ng_form.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Directive, forwardRef, Provider, Optional, Inject, Self} from '@angular/core';\nimport {\n  PromiseWrapper,\n  ObservableWrapper,\n  EventEmitter,\n  PromiseCompleter\n} from '../../../src/facade/async';\nimport {ListWrapper} from '../../../src/facade/collection';\nimport {isPresent} from '../../../src/facade/lang';\nimport {NgControl} from './ng_control';\nimport {Form} from './form_interface';\nimport {NgControlGroup} from './ng_control_group';\nimport {ControlContainer} from './control_container';\nimport {AbstractControl, ControlGroup, Control} from '../model';\nimport {setUpControl, setUpControlGroup, composeValidators, composeAsyncValidators} from './shared';\nimport {NG_VALIDATORS, NG_ASYNC_VALIDATORS} from '../validators';\n\nexport const formDirectiveProvider: any =\n    /*@ts2dart_const*/ {provide: ControlContainer, useExisting: forwardRef(() => NgForm)};\nexport class NgForm extends ControlContainer implements Form {\n  form: ControlGroup;\n  ngSubmit = new EventEmitter();\n\n  constructor( validators: any[], asyncValidators: any[]) {\n    super();\n    this.form = new ControlGroup({}, null, composeValidators(validators),\n                                 composeAsyncValidators(asyncValidators));\n  }\n\n  get formDirective(): Form { return this; }\n\n  get control(): ControlGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n\n  addControl(dir: NgControl): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      var ctrl = new Control();\n      setUpControl(ctrl, dir);\n      container.addControl(dir.name, ctrl);\n      ctrl.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  getControl(dir: NgControl): Control { return <Control>this.form.find(dir.path); }\n\n  removeControl(dir: NgControl): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      if (isPresent(container)) {\n        container.removeControl(dir.name);\n        container.updateValueAndValidity({emitEvent: false});\n      }\n    });\n  }\n\n  addControlGroup(dir: NgControlGroup): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      var group = new ControlGroup({});\n      setUpControlGroup(group, dir);\n      container.addControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  removeControlGroup(dir: NgControlGroup): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      if (isPresent(container)) {\n        container.removeControl(dir.name);\n        container.updateValueAndValidity({emitEvent: false});\n      }\n    });\n  }\n\n  getControlGroup(dir: NgControlGroup): ControlGroup {\n    return <ControlGroup>this.form.find(dir.path);\n  }\n\n  updateModel(dir: NgControl, value: any): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var ctrl = <Control>this.form.find(dir.path);\n      ctrl.updateValue(value);\n    });\n  }\n\n  onSubmit(): boolean {\n    ObservableWrapper.callEmit(this.ngSubmit, null);\n    return false;\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): ControlGroup {\n    path.pop();\n    return ListWrapper.isEmpty(path) ? this.form : <ControlGroup>this.form.find(path);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',\n  bindings: [formDirectiveProvider],\n  host: {\n    '(submit)': 'onSubmit()',\n  },\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n"]}