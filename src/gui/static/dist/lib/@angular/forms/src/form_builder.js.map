{"version":3,"file":"form_builder.js","sourceRoot":"","sources":["../../../../modules/@angular/forms/src/form_builder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {isPresent} from './facade/lang';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n\n/**\n * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * @howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `@angular/forms`\n *\n *  * **NgModule**: {@link ReactiveFormsModule}\n *\n * @stable\n */\n\nexport class FormBuilder {\n  /**\n   * Construct a new {@link FormGroup} with the given map of configuration.\n   * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n   *\n   * See the {@link FormGroup} constructor for more details.\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any} = null): FormGroup {\n    const controls = this._reduceControls(controlsConfig);\n    const validator: ValidatorFn = isPresent(extra) ? extra['validator'] : null;\n    const asyncValidator: AsyncValidatorFn = isPresent(extra) ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n  /**\n   * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n   * `asyncValidator`.\n   *\n   * `formState` can either be a standalone value for the form control or an object\n   * that contains both a value and a disabled status.\n   *\n   */\n  control(\n      formState: Object, validator: ValidatorFn|ValidatorFn[] = null,\n      asyncValidator: AsyncValidatorFn|AsyncValidatorFn[] = null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n\n  /**\n   * Construct a {@link FormArray} from the given `controlsConfig` array of\n   * configuration, with the given optional `validator` and `asyncValidator`.\n   */\n  array(\n      controlsConfig: any[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null): FormArray {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const value = controlConfig[0];\n      const validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}