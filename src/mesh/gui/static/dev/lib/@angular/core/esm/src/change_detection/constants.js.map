{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/change_detection/constants.ts"],"names":[],"mappings":"OAIS,EAAC,OAAO,EAAC,MAAM,uBAAuB;AAE/C;;GAEG;AACH,WAAY,mBAmBX;AAnBD,WAAY,mBAAmB;IAC7B;;;OAGG;IACH,6EAAY,CAAA;IAEZ;;;OAGG;IACH,+EAAa,CAAA;IAEb;;;;OAIG;IACH,mEAAO,CAAA;AACT,CAAC,EAnBW,mBAAmB,KAAnB,mBAAmB,QAmB9B;AAGD;;;GAGG;AACH,WAAY,uBAkCX;AAlCD,WAAY,uBAAuB;IACjC;;;OAGG;IACH,+EAAS,CAAA;IAET;;;OAGG;IACH,2EAAO,CAAA;IAEP;;;OAGG;IACH,mFAAW,CAAA;IAEX;;;OAGG;IACH,6EAAQ,CAAA;IAER;;OAEG;IACH,yEAAM,CAAA;IAEN;;OAEG;IACH,2EAAO,CAAA;AACT,CAAC,EAlCW,uBAAuB,KAAvB,uBAAuB,QAkClC;AAED;;GAEG;AACH,OAAO,IAAI,gCAAgC,GAAG;IAC5C,uBAAuB,CAAC,SAAS;IACjC,uBAAuB,CAAC,OAAO;IAC/B,uBAAuB,CAAC,WAAW;IACnC,uBAAuB,CAAC,QAAQ;IAChC,uBAAuB,CAAC,MAAM;IAC9B,uBAAuB,CAAC,OAAO;CAChC,CAAC;AAEF;;GAEG;AACH,OAAO,IAAI,4BAA4B,GAAG;IACxC,mBAAmB,CAAC,YAAY;IAChC,mBAAmB,CAAC,aAAa;IACjC,mBAAmB,CAAC,OAAO;CAC5B,CAAC;AAEF,iDACI,uBAAgD;IAClD,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC;QAChC,uBAAuB,KAAK,uBAAuB,CAAC,OAAO,CAAC;AACrE,CAAC","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isBlank} from '../../src/facade/lang';\n\n/**\n * Describes the current state of the change detector.\n */\nexport enum ChangeDetectorState {\n  /**\n   * `NeverChecked` means that the change detector has not been checked yet, and\n   * initialization methods should be called during detection.\n   */\n  NeverChecked,\n\n  /**\n   * `CheckedBefore` means that the change detector has successfully completed at least\n   * one detection previously.\n   */\n  CheckedBefore,\n\n  /**\n   * `Errored` means that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state will no longer detect changes.\n   */\n  Errored\n}\n\n\n/**\n * Describes within the change detector which strategy will be used the next time change\n * detection is triggered.\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * `CheckedOnce` means that after calling detectChanges the mode of the change detector\n   * will become `Checked`.\n   */\n  CheckOnce,\n\n  /**\n   * `Checked` means that the change detector should be skipped until its mode changes to\n   * `CheckOnce`.\n   */\n  Checked,\n\n  /**\n   * `CheckAlways` means that after calling detectChanges the mode of the change detector\n   * will remain `CheckAlways`.\n   */\n  CheckAlways,\n\n  /**\n   * `Detached` means that the change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached,\n\n  /**\n   * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.\n   */\n  OnPush,\n\n  /**\n   * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.\n   */\n  Default,\n}\n\n/**\n * List of possible {@link ChangeDetectionStrategy} values.\n */\nexport var CHANGE_DETECTION_STRATEGY_VALUES = [\n  ChangeDetectionStrategy.CheckOnce,\n  ChangeDetectionStrategy.Checked,\n  ChangeDetectionStrategy.CheckAlways,\n  ChangeDetectionStrategy.Detached,\n  ChangeDetectionStrategy.OnPush,\n  ChangeDetectionStrategy.Default\n];\n\n/**\n * List of possible {@link ChangeDetectorState} values.\n */\nexport var CHANGE_DETECTOR_STATE_VALUES = [\n  ChangeDetectorState.NeverChecked,\n  ChangeDetectorState.CheckedBefore,\n  ChangeDetectorState.Errored\n];\n\nexport function isDefaultChangeDetectionStrategy(\n    changeDetectionStrategy: ChangeDetectionStrategy): boolean {\n  return isBlank(changeDetectionStrategy) ||\n         changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n"]}