{"version":3,"file":"static_response.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/static_response.ts"],"names":[],"mappings":"OAKO,EAAC,QAAQ,EAAE,IAAI,EAAC,MAAM,oBAAoB;OAC1C,EAAC,aAAa,EAAC,MAAM,0BAA0B;OAG/C,EAAC,UAAU,EAAC,MAAM,cAAc;AAEvC;;;;;;;;;;;;;;;;;GAiBG;AACH;IAkDE,YAAY,eAAgC;QAC1C,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;QACrD,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,UAAU,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,eAAe,CAAC,GAAG,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,yBAAyB;IACzB,IAAI,KAAU,MAAM,IAAI,aAAa,CAAC,wDAAwD,CAAC,CAAC,CAAC,CAAC;IAElG;;OAEG;IACH,IAAI;QACF,IAAI,YAA6B,CAAC;QAClC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAS,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,KAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAEhD;;OAEG;IACH,gCAAgC;IAChC,WAAW;QACT,MAAM,IAAI,aAAa,CAAC,+DAA+D,CAAC,CAAC;IAC3F,CAAC;AACH,CAAC;AAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {ResponseType} from './enums';\nimport {isString, Json} from '../src/facade/lang';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Headers} from './headers';\nimport {ResponseOptions} from './base_response_options';\nimport {isJsObject} from './http_utils';\n\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n */\nexport class Response {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error, or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  bytesLoaded: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  totalBytes: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers;\n  // TODO: Support ArrayBuffer, JSON, FormData, Blob\n  private _body: string | Object;\n  constructor(responseOptions: ResponseOptions) {\n    this._body = responseOptions.body;\n    this.status = responseOptions.status;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type;\n    this.url = responseOptions.url;\n  }\n\n  /**\n   * Not yet implemented\n   */\n  // TODO: Blob return type\n  blob(): any { throw new BaseException('\"blob()\" method not implemented on Response superclass'); }\n\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   */\n  json(): any {\n    var jsonResponse: string | Object;\n    if (isJsObject(this._body)) {\n      jsonResponse = this._body;\n    } else if (isString(this._body)) {\n      jsonResponse = Json.parse(<string>this._body);\n    }\n    return jsonResponse;\n  }\n\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   */\n  text(): string { return this._body.toString(); }\n\n  /**\n   * Not yet implemented\n   */\n  // TODO: ArrayBuffer return type\n  arrayBuffer(): any {\n    throw new BaseException('\"arrayBuffer()\" method not implemented on Response superclass');\n  }\n}\n"]}