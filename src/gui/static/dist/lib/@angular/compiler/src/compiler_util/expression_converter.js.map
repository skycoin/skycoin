{"version":3,"file":"expression_converter.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/expression_converter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport * as cdAst from '../expression_parser/ast';\nimport {isBlank, isPresent} from '../facade/lang';\nimport {Identifiers, resolveIdentifier} from '../identifiers';\nimport {ClassBuilder} from '../output/class_builder';\nimport * as o from '../output/output_ast';\n\nimport {createPureProxy} from './identifier_util';\n\nconst VAL_UNWRAPPER_VAR = o.variable(`valUnwrapper`);\n\nexport interface NameResolver {\n  callPipe(name: string, input: o.Expression, args: o.Expression[]): o.Expression;\n  getLocal(name: string): o.Expression;\n}\n\nexport class EventHandlerVars { static event = o.variable('$event'); }\n\nexport class ConvertPropertyBindingResult {\n  constructor(\n      public stmts: o.Statement[], public currValExpr: o.Expression,\n      public forceUpdate: o.Expression) {}\n}\n\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in a property binding.\n */\nexport function convertPropertyBinding(\n    builder: ClassBuilder, nameResolver: NameResolver, implicitReceiver: o.Expression,\n    expression: cdAst.AST, bindingId: string): ConvertPropertyBindingResult {\n  const currValExpr = createCurrValueExpr(bindingId);\n  const stmts: o.Statement[] = [];\n  if (!nameResolver) {\n    nameResolver = new DefaultNameResolver();\n  }\n  const visitor = new _AstToIrVisitor(\n      builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);\n  const outputExpr: o.Expression = expression.visit(visitor, _Mode.Expression);\n\n  if (!outputExpr) {\n    // e.g. an empty expression was given\n    return null;\n  }\n\n  if (visitor.temporaryCount) {\n    for (let i = 0; i < visitor.temporaryCount; i++) {\n      stmts.push(temporaryDeclaration(bindingId, i));\n    }\n  }\n\n  if (visitor.needsValueUnwrapper) {\n    const initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();\n    stmts.push(initValueUnwrapperStmt);\n  }\n  stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [o.StmtModifier.Final]));\n  if (visitor.needsValueUnwrapper) {\n    return new ConvertPropertyBindingResult(\n        stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));\n  } else {\n    return new ConvertPropertyBindingResult(stmts, currValExpr, null);\n  }\n}\n\nexport class ConvertActionBindingResult {\n  constructor(public stmts: o.Statement[], public preventDefault: o.ReadVarExpr) {}\n}\n\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\nexport function convertActionBinding(\n    builder: ClassBuilder, nameResolver: NameResolver, implicitReceiver: o.Expression,\n    action: cdAst.AST, bindingId: string): ConvertActionBindingResult {\n  if (!nameResolver) {\n    nameResolver = new DefaultNameResolver();\n  }\n  const visitor =\n      new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);\n  const actionStmts: o.Statement[] = [];\n  flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);\n  prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n  const lastIndex = actionStmts.length - 1;\n  let preventDefaultVar: o.ReadVarExpr = null;\n  if (lastIndex >= 0) {\n    const lastStatement = actionStmts[lastIndex];\n    const returnExpr = convertStmtIntoExpression(lastStatement);\n    if (returnExpr) {\n      // Note: We need to cast the result of the method call to dynamic,\n      // as it might be a void method!\n      preventDefaultVar = createPreventDefaultVar(bindingId);\n      actionStmts[lastIndex] =\n          preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false)))\n              .toDeclStmt(null, [o.StmtModifier.Final]);\n    }\n  }\n  return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\n\n/**\n * Creates variables that are shared by multiple calls to `convertActionBinding` /\n * `convertPropertyBinding`\n */\nexport function createSharedBindingVariablesIfNeeded(stmts: o.Statement[]): o.Statement[] {\n  const unwrapperStmts: o.Statement[] = [];\n  const readVars = o.findReadVarNames(stmts);\n  if (readVars.has(VAL_UNWRAPPER_VAR.name)) {\n    unwrapperStmts.push(\n        VAL_UNWRAPPER_VAR\n            .set(o.importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))\n            .toDeclStmt(null, [o.StmtModifier.Final]));\n  }\n  return unwrapperStmts;\n}\n\nfunction temporaryName(bindingId: string, temporaryNumber: number): string {\n  return `tmp_${bindingId}_${temporaryNumber}`;\n}\n\nexport function temporaryDeclaration(bindingId: string, temporaryNumber: number): o.Statement {\n  return new o.DeclareVarStmt(temporaryName(bindingId, temporaryNumber), o.NULL_EXPR);\n}\n\nfunction prependTemporaryDecls(\n    temporaryCount: number, bindingId: string, statements: o.Statement[]) {\n  for (let i = temporaryCount - 1; i >= 0; i--) {\n    statements.unshift(temporaryDeclaration(bindingId, i));\n  }\n}\n\nenum _Mode {\n  Statement,\n  Expression\n}\n\nfunction ensureStatementMode(mode: _Mode, ast: cdAst.AST) {\n  if (mode !== _Mode.Statement) {\n    throw new Error(`Expected a statement, but saw ${ast}`);\n  }\n}\n\nfunction ensureExpressionMode(mode: _Mode, ast: cdAst.AST) {\n  if (mode !== _Mode.Expression) {\n    throw new Error(`Expected an expression, but saw ${ast}`);\n  }\n}\n\nfunction convertToStatementIfNeeded(mode: _Mode, expr: o.Expression): o.Expression|o.Statement {\n  if (mode === _Mode.Statement) {\n    return expr.toStmt();\n  } else {\n    return expr;\n  }\n}\n\nclass _AstToIrVisitor implements cdAst.AstVisitor {\n  private _nodeMap = new Map<cdAst.AST, cdAst.AST>();\n  private _resultMap = new Map<cdAst.AST, o.Expression>();\n  private _currentTemporary: number = 0;\n  public needsValueUnwrapper: boolean = false;\n  public temporaryCount: number = 0;\n\n  constructor(\n      private _builder: ClassBuilder, private _nameResolver: NameResolver,\n      private _implicitReceiver: o.Expression, private _valueUnwrapper: o.ReadVarExpr,\n      private bindingId: string, private isAction: boolean) {}\n\n  visitBinary(ast: cdAst.Binary, mode: _Mode): any {\n    let op: o.BinaryOperator;\n    switch (ast.operation) {\n      case '+':\n        op = o.BinaryOperator.Plus;\n        break;\n      case '-':\n        op = o.BinaryOperator.Minus;\n        break;\n      case '*':\n        op = o.BinaryOperator.Multiply;\n        break;\n      case '/':\n        op = o.BinaryOperator.Divide;\n        break;\n      case '%':\n        op = o.BinaryOperator.Modulo;\n        break;\n      case '&&':\n        op = o.BinaryOperator.And;\n        break;\n      case '||':\n        op = o.BinaryOperator.Or;\n        break;\n      case '==':\n        op = o.BinaryOperator.Equals;\n        break;\n      case '!=':\n        op = o.BinaryOperator.NotEquals;\n        break;\n      case '===':\n        op = o.BinaryOperator.Identical;\n        break;\n      case '!==':\n        op = o.BinaryOperator.NotIdentical;\n        break;\n      case '<':\n        op = o.BinaryOperator.Lower;\n        break;\n      case '>':\n        op = o.BinaryOperator.Bigger;\n        break;\n      case '<=':\n        op = o.BinaryOperator.LowerEquals;\n        break;\n      case '>=':\n        op = o.BinaryOperator.BiggerEquals;\n        break;\n      default:\n        throw new Error(`Unsupported operation ${ast.operation}`);\n    }\n\n    return convertToStatementIfNeeded(\n        mode,\n        new o.BinaryOperatorExpr(\n            op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));\n  }\n\n  visitChain(ast: cdAst.Chain, mode: _Mode): any {\n    ensureStatementMode(mode, ast);\n    return this.visitAll(ast.expressions, mode);\n  }\n\n  visitConditional(ast: cdAst.Conditional, mode: _Mode): any {\n    const value: o.Expression = this.visit(ast.condition, _Mode.Expression);\n    return convertToStatementIfNeeded(\n        mode,\n        value.conditional(\n            this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));\n  }\n\n  visitPipe(ast: cdAst.BindingPipe, mode: _Mode): any {\n    const input = this.visit(ast.exp, _Mode.Expression);\n    const args = this.visitAll(ast.args, _Mode.Expression);\n    const value = this._nameResolver.callPipe(ast.name, input, args);\n    if (!value) {\n      throw new Error(`Illegal state: Pipe ${ast.name} is not allowed here!`);\n    }\n    this.needsValueUnwrapper = true;\n    return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));\n  }\n\n  visitFunctionCall(ast: cdAst.FunctionCall, mode: _Mode): any {\n    return convertToStatementIfNeeded(\n        mode,\n        this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));\n  }\n\n  visitImplicitReceiver(ast: cdAst.ImplicitReceiver, mode: _Mode): any {\n    ensureExpressionMode(mode, ast);\n    return this._implicitReceiver;\n  }\n\n  visitInterpolation(ast: cdAst.Interpolation, mode: _Mode): any {\n    ensureExpressionMode(mode, ast);\n    const args = [o.literal(ast.expressions.length)];\n    for (let i = 0; i < ast.strings.length - 1; i++) {\n      args.push(o.literal(ast.strings[i]));\n      args.push(this.visit(ast.expressions[i], _Mode.Expression));\n    }\n    args.push(o.literal(ast.strings[ast.strings.length - 1]));\n\n    return ast.expressions.length <= 9 ?\n        o.importExpr(resolveIdentifier(Identifiers.inlineInterpolate)).callFn(args) :\n        o.importExpr(resolveIdentifier(Identifiers.interpolate)).callFn([\n          args[0], o.literalArr(args.slice(1))\n        ]);\n  }\n\n  visitKeyedRead(ast: cdAst.KeyedRead, mode: _Mode): any {\n    return convertToStatementIfNeeded(\n        mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));\n  }\n\n  visitKeyedWrite(ast: cdAst.KeyedWrite, mode: _Mode): any {\n    const obj: o.Expression = this.visit(ast.obj, _Mode.Expression);\n    const key: o.Expression = this.visit(ast.key, _Mode.Expression);\n    const value: o.Expression = this.visit(ast.value, _Mode.Expression);\n    return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n  }\n\n  visitLiteralArray(ast: cdAst.LiteralArray, mode: _Mode): any {\n    const parts = this.visitAll(ast.expressions, mode);\n    const literalArr =\n        this.isAction ? o.literalArr(parts) : createCachedLiteralArray(this._builder, parts);\n    return convertToStatementIfNeeded(mode, literalArr);\n  }\n\n  visitLiteralMap(ast: cdAst.LiteralMap, mode: _Mode): any {\n    const parts: any[] = [];\n    for (let i = 0; i < ast.keys.length; i++) {\n      parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);\n    }\n    const literalMap =\n        this.isAction ? o.literalMap(parts) : createCachedLiteralMap(this._builder, parts);\n    return convertToStatementIfNeeded(mode, literalMap);\n  }\n\n  visitLiteralPrimitive(ast: cdAst.LiteralPrimitive, mode: _Mode): any {\n    return convertToStatementIfNeeded(mode, o.literal(ast.value));\n  }\n\n  private _getLocal(name: string): o.Expression {\n    if (this.isAction && name == EventHandlerVars.event.name) {\n      return EventHandlerVars.event;\n    }\n    return this._nameResolver.getLocal(name);\n  }\n\n  visitMethodCall(ast: cdAst.MethodCall, mode: _Mode): any {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      const args = this.visitAll(ast.args, _Mode.Expression);\n      let result: any = null;\n      const receiver = this.visit(ast.receiver, _Mode.Expression);\n      if (receiver === this._implicitReceiver) {\n        const varExpr = this._getLocal(ast.name);\n        if (isPresent(varExpr)) {\n          result = varExpr.callFn(args);\n        }\n      }\n      if (isBlank(result)) {\n        result = receiver.callMethod(ast.name, args);\n      }\n      return convertToStatementIfNeeded(mode, result);\n    }\n  }\n\n  visitPrefixNot(ast: cdAst.PrefixNot, mode: _Mode): any {\n    return convertToStatementIfNeeded(mode, o.not(this.visit(ast.expression, _Mode.Expression)));\n  }\n\n  visitPropertyRead(ast: cdAst.PropertyRead, mode: _Mode): any {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      let result: any = null;\n      const receiver = this.visit(ast.receiver, _Mode.Expression);\n      if (receiver === this._implicitReceiver) {\n        result = this._getLocal(ast.name);\n      }\n      if (isBlank(result)) {\n        result = receiver.prop(ast.name);\n      }\n      return convertToStatementIfNeeded(mode, result);\n    }\n  }\n\n  visitPropertyWrite(ast: cdAst.PropertyWrite, mode: _Mode): any {\n    const receiver: o.Expression = this.visit(ast.receiver, _Mode.Expression);\n    if (receiver === this._implicitReceiver) {\n      const varExpr = this._getLocal(ast.name);\n      if (isPresent(varExpr)) {\n        throw new Error('Cannot assign to a reference or variable!');\n      }\n    }\n    return convertToStatementIfNeeded(\n        mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));\n  }\n\n  visitSafePropertyRead(ast: cdAst.SafePropertyRead, mode: _Mode): any {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n\n  visitSafeMethodCall(ast: cdAst.SafeMethodCall, mode: _Mode): any {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n\n  visitAll(asts: cdAst.AST[], mode: _Mode): any { return asts.map(ast => this.visit(ast, mode)); }\n\n  visitQuote(ast: cdAst.Quote, mode: _Mode): any {\n    throw new Error('Quotes are not supported for evaluation!');\n  }\n\n  private visit(ast: cdAst.AST, mode: _Mode): any {\n    const result = this._resultMap.get(ast);\n    if (result) return result;\n    return (this._nodeMap.get(ast) || ast).visit(this, mode);\n  }\n\n  private convertSafeAccess(\n      ast: cdAst.AST, leftMostSafe: cdAst.SafeMethodCall|cdAst.SafePropertyRead, mode: _Mode): any {\n    // If the expression contains a safe access node on the left it needs to be converted to\n    // an expression that guards the access to the member by checking the receiver for blank. As\n    // execution proceeds from left to right, the left most part of the expression must be guarded\n    // first but, because member access is left associative, the right side of the expression is at\n    // the top of the AST. The desired result requires lifting a copy of the the left part of the\n    // expression up to test it for blank before generating the unguarded version.\n\n    // Consider, for example the following expression: a?.b.c?.d.e\n\n    // This results in the ast:\n    //         .\n    //        / \\\n    //       ?.   e\n    //      /  \\\n    //     .    d\n    //    / \\\n    //   ?.  c\n    //  /  \\\n    // a    b\n\n    // The following tree should be generated:\n    //\n    //        /---- ? ----\\\n    //       /      |      \\\n    //     a   /--- ? ---\\  null\n    //        /     |     \\\n    //       .      .     null\n    //      / \\    / \\\n    //     .  c   .   e\n    //    / \\    / \\\n    //   a   b  ,   d\n    //         / \\\n    //        .   c\n    //       / \\\n    //      a   b\n    //\n    // Notice that the first guard condition is the left hand of the left most safe access node\n    // which comes in as leftMostSafe to this routine.\n\n    let guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);\n    let temporary: o.ReadVarExpr;\n    if (this.needsTemporary(leftMostSafe.receiver)) {\n      // If the expression has method calls or pipes then we need to save the result into a\n      // temporary variable to avoid calling stateful or impure code more than once.\n      temporary = this.allocateTemporary();\n\n      // Preserve the result in the temporary variable\n      guardedExpression = temporary.set(guardedExpression);\n\n      // Ensure all further references to the guarded expression refer to the temporary instead.\n      this._resultMap.set(leftMostSafe.receiver, temporary);\n    }\n    const condition = guardedExpression.isBlank();\n\n    // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n    // leftMostNode with its unguarded version in the call to `this.visit()`.\n    if (leftMostSafe instanceof cdAst.SafeMethodCall) {\n      this._nodeMap.set(\n          leftMostSafe,\n          new cdAst.MethodCall(\n              leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\n    } else {\n      this._nodeMap.set(\n          leftMostSafe,\n          new cdAst.PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\n    }\n\n    // Recursively convert the node now without the guarded member access.\n    const access = this.visit(ast, _Mode.Expression);\n\n    // Remove the mapping. This is not strictly required as the converter only traverses each node\n    // once but is safer if the conversion is changed to traverse the nodes more than once.\n    this._nodeMap.delete(leftMostSafe);\n\n    // If we allcoated a temporary, release it.\n    if (temporary) {\n      this.releaseTemporary(temporary);\n    }\n\n    // Produce the conditional\n    return convertToStatementIfNeeded(mode, condition.conditional(o.literal(null), access));\n  }\n\n  // Given a expression of the form a?.b.c?.d.e the the left most safe node is\n  // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n  // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n  // safe method call as this needs be transform initially to:\n  //   a == null ? null : a.c.b.c?.d.e\n  // then to:\n  //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n  private leftMostSafeNode(ast: cdAst.AST): cdAst.SafePropertyRead|cdAst.SafeMethodCall {\n    const visit = (visitor: cdAst.AstVisitor, ast: cdAst.AST): any => {\n      return (this._nodeMap.get(ast) || ast).visit(visitor);\n    };\n    return ast.visit({\n      visitBinary(ast: cdAst.Binary) { return null; },\n      visitChain(ast: cdAst.Chain) { return null; },\n      visitConditional(ast: cdAst.Conditional) { return null; },\n      visitFunctionCall(ast: cdAst.FunctionCall) { return null; },\n      visitImplicitReceiver(ast: cdAst.ImplicitReceiver) { return null; },\n      visitInterpolation(ast: cdAst.Interpolation) { return null; },\n      visitKeyedRead(ast: cdAst.KeyedRead) { return visit(this, ast.obj); },\n      visitKeyedWrite(ast: cdAst.KeyedWrite) { return null; },\n      visitLiteralArray(ast: cdAst.LiteralArray) { return null; },\n      visitLiteralMap(ast: cdAst.LiteralMap) { return null; },\n      visitLiteralPrimitive(ast: cdAst.LiteralPrimitive) { return null; },\n      visitMethodCall(ast: cdAst.MethodCall) { return visit(this, ast.receiver); },\n      visitPipe(ast: cdAst.BindingPipe) { return null; },\n      visitPrefixNot(ast: cdAst.PrefixNot) { return null; },\n      visitPropertyRead(ast: cdAst.PropertyRead) { return visit(this, ast.receiver); },\n      visitPropertyWrite(ast: cdAst.PropertyWrite) { return null; },\n      visitQuote(ast: cdAst.Quote) { return null; },\n      visitSafeMethodCall(ast: cdAst.SafeMethodCall) { return visit(this, ast.receiver) || ast; },\n      visitSafePropertyRead(ast: cdAst.SafePropertyRead) {\n        return visit(this, ast.receiver) || ast;\n      }\n    });\n  }\n\n  // Returns true of the AST includes a method or a pipe indicating that, if the\n  // expression is used as the target of a safe property or method access then\n  // the expression should be stored into a temporary variable.\n  private needsTemporary(ast: cdAst.AST): boolean {\n    const visit = (visitor: cdAst.AstVisitor, ast: cdAst.AST): boolean => {\n      return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\n    };\n    const visitSome = (visitor: cdAst.AstVisitor, ast: cdAst.AST[]): boolean => {\n      return ast.some(ast => visit(visitor, ast));\n    };\n    return ast.visit({\n      visitBinary(ast: cdAst.Binary):\n          boolean{return visit(this, ast.left) || visit(this, ast.right);},\n      visitChain(ast: cdAst.Chain) { return false; },\n      visitConditional(ast: cdAst.Conditional):\n          boolean{return visit(this, ast.condition) || visit(this, ast.trueExp) ||\n                      visit(this, ast.falseExp);},\n      visitFunctionCall(ast: cdAst.FunctionCall) { return true; },\n      visitImplicitReceiver(ast: cdAst.ImplicitReceiver) { return false; },\n      visitInterpolation(ast: cdAst.Interpolation) { return visitSome(this, ast.expressions); },\n      visitKeyedRead(ast: cdAst.KeyedRead) { return false; },\n      visitKeyedWrite(ast: cdAst.KeyedWrite) { return false; },\n      visitLiteralArray(ast: cdAst.LiteralArray) { return true; },\n      visitLiteralMap(ast: cdAst.LiteralMap) { return true; },\n      visitLiteralPrimitive(ast: cdAst.LiteralPrimitive) { return false; },\n      visitMethodCall(ast: cdAst.MethodCall) { return true; },\n      visitPipe(ast: cdAst.BindingPipe) { return true; },\n      visitPrefixNot(ast: cdAst.PrefixNot) { return visit(this, ast.expression); },\n      visitPropertyRead(ast: cdAst.PropertyRead) { return false; },\n      visitPropertyWrite(ast: cdAst.PropertyWrite) { return false; },\n      visitQuote(ast: cdAst.Quote) { return false; },\n      visitSafeMethodCall(ast: cdAst.SafeMethodCall) { return true; },\n      visitSafePropertyRead(ast: cdAst.SafePropertyRead) { return false; }\n    });\n  }\n\n  private allocateTemporary(): o.ReadVarExpr {\n    const tempNumber = this._currentTemporary++;\n    this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n    return new o.ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n  }\n\n  private releaseTemporary(temporary: o.ReadVarExpr) {\n    this._currentTemporary--;\n    if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n      throw new Error(`Temporary ${temporary.name} released out of order`);\n    }\n  }\n}\n\nfunction flattenStatements(arg: any, output: o.Statement[]) {\n  if (Array.isArray(arg)) {\n    (<any[]>arg).forEach((entry) => flattenStatements(entry, output));\n  } else {\n    output.push(arg);\n  }\n}\n\nfunction createCachedLiteralArray(builder: ClassBuilder, values: o.Expression[]): o.Expression {\n  if (values.length === 0) {\n    return o.importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));\n  }\n  const proxyExpr = o.THIS_EXPR.prop(`_arr_${builder.fields.length}`);\n  const proxyParams: o.FnParam[] = [];\n  const proxyReturnEntries: o.Expression[] = [];\n  for (let i = 0; i < values.length; i++) {\n    const paramName = `p${i}`;\n    proxyParams.push(new o.FnParam(paramName));\n    proxyReturnEntries.push(o.variable(paramName));\n  }\n  createPureProxy(\n      o.fn(\n          proxyParams, [new o.ReturnStatement(o.literalArr(proxyReturnEntries))],\n          new o.ArrayType(o.DYNAMIC_TYPE)),\n      values.length, proxyExpr, builder);\n  return proxyExpr.callFn(values);\n}\n\nfunction createCachedLiteralMap(\n    builder: ClassBuilder, entries: [string, o.Expression][]): o.Expression {\n  if (entries.length === 0) {\n    return o.importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));\n  }\n  const proxyExpr = o.THIS_EXPR.prop(`_map_${builder.fields.length}`);\n  const proxyParams: o.FnParam[] = [];\n  const proxyReturnEntries: [string, o.Expression][] = [];\n  const values: o.Expression[] = [];\n  for (let i = 0; i < entries.length; i++) {\n    const paramName = `p${i}`;\n    proxyParams.push(new o.FnParam(paramName));\n    proxyReturnEntries.push([entries[i][0], o.variable(paramName)]);\n    values.push(<o.Expression>entries[i][1]);\n  }\n  createPureProxy(\n      o.fn(\n          proxyParams, [new o.ReturnStatement(o.literalMap(proxyReturnEntries))],\n          new o.MapType(o.DYNAMIC_TYPE)),\n      entries.length, proxyExpr, builder);\n  return proxyExpr.callFn(values);\n}\n\n\nclass DefaultNameResolver implements NameResolver {\n  callPipe(name: string, input: o.Expression, args: o.Expression[]): o.Expression { return null; }\n  getLocal(name: string): o.Expression { return null; }\n}\n\nfunction createCurrValueExpr(bindingId: string): o.ReadVarExpr {\n  return o.variable(`currVal_${bindingId}`);  // fix syntax highlighting: `\n}\n\nfunction createPreventDefaultVar(bindingId: string): o.ReadVarExpr {\n  return o.variable(`pd_${bindingId}`);\n}\n\nfunction convertStmtIntoExpression(stmt: o.Statement): o.Expression {\n  if (stmt instanceof o.ExpressionStatement) {\n    return stmt.expr;\n  } else if (stmt instanceof o.ReturnStatement) {\n    return stmt.value;\n  }\n  return null;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}