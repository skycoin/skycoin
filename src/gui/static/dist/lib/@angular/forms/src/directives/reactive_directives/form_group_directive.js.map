{"version":3,"file":"form_group_directive.js","sourceRoot":"","sources":["../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_group_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {ListWrapper} from '../../facade/collection';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.\n *\n * @howToUse\n *\n * This directive accepts an existing {@link FormGroup} instance. It will then use this\n * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n * and {@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n * re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `@angular/forms`\n *\n * **NgModule**: {@link ReactiveFormsModule}\n *\n *  @stable\n */\n\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\n  private _submitted: boolean = false;\n  private _oldForm: FormGroup;\n  directives: FormControlName[] = [];\n\n   form: FormGroup = null;\n   ngSubmit = new EventEmitter();\n\n  constructor(\n         private _validators: any[],\n         private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n\n  get submitted(): boolean { return this._submitted; }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: FormControlName): FormControl {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n\n  getControl(dir: FormControlName): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: FormControlName): void { ListWrapper.remove(this.directives, dir); }\n\n  addFormGroup(dir: FormGroupName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormGroup(dir: FormGroupName): void {}\n\n  getFormGroup(dir: FormGroupName): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  addFormArray(dir: FormArrayName): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormArray(dir: FormArrayName): void {}\n\n  getFormArray(dir: FormArrayName): FormArray { return <FormArray>this.form.get(dir.path); }\n\n  updateModel(dir: FormControlName, value: any): void {\n    const ctrl  = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  onSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n\n  /** @internal */\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      if (dir._control !== newCtrl) {\n        cleanUpControl(dir._control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        dir._control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n\n  private _updateValidators() {\n    const sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([this.form.validator, sync]);\n\n    const async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n  }\n\n  private _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formGroup', ] },],\n'ngSubmit': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}