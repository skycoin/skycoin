{"version":3,"file":"dart_emitter.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/dart_emitter.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent, isBlank, isArray} from '../../src/facade/lang';\nimport {BaseException} from '../../src/facade/exceptions';\nimport {CompileIdentifierMetadata} from '../compile_metadata';\nimport * as o from './output_ast';\nimport {\n  OutputEmitter,\n  EmitterVisitorContext,\n  AbstractEmitterVisitor,\n  CATCH_ERROR_VAR,\n  CATCH_STACK_VAR,\n} from './abstract_emitter';\nimport {ImportGenerator} from './path_util';\n\nvar _debugModuleUrl = 'asset://debug/lib';\n\nexport function debugOutputAstAsDart(ast: o.Statement | o.Expression | o.Type | any[]): string {\n  var converter = new _DartEmitterVisitor(_debugModuleUrl);\n  var ctx = EmitterVisitorContext.createRoot([]);\n  var asts: any[];\n  if (isArray(ast)) {\n    asts = <any[]>ast;\n  } else {\n    asts = [ast];\n  }\n  asts.forEach((ast) => {\n    if (ast instanceof o.Statement) {\n      ast.visitStatement(converter, ctx);\n    } else if (ast instanceof o.Expression) {\n      ast.visitExpression(converter, ctx);\n    } else if (ast instanceof o.Type) {\n      ast.visitType(converter, ctx);\n    } else {\n      throw new BaseException(`Don't know how to print debug info for ${ast}`);\n    }\n  });\n  return ctx.toSource();\n}\n\nexport class DartEmitter implements OutputEmitter {\n  constructor(private _importGenerator: ImportGenerator) {}\n  emitStatements(moduleUrl: string, stmts: o.Statement[], exportedVars: string[]): string {\n    var srcParts = [];\n    // Note: We are not creating a library here as Dart does not need it.\n    // Dart analzyer might complain about it though.\n\n    var converter = new _DartEmitterVisitor(moduleUrl);\n    var ctx = EmitterVisitorContext.createRoot(exportedVars);\n    converter.visitAllStatements(stmts, ctx);\n\n    converter.importsWithPrefixes.forEach((prefix, importedModuleUrl) => {\n      srcParts.push(\n          `import '${this._importGenerator.getImportPath(moduleUrl, importedModuleUrl)}' as ${prefix};`);\n    });\n    srcParts.push(ctx.toSource());\n    return srcParts.join('\\n');\n  }\n}\n\nclass _DartEmitterVisitor extends AbstractEmitterVisitor implements o.TypeVisitor {\n  importsWithPrefixes = new Map<string, string>();\n\n  constructor(private _moduleUrl: string) { super(true); }\n\n  visitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext): any {\n    this._visitIdentifier(ast.value, ast.typeParams, ctx);\n    return null;\n  }\n  visitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext): any {\n    if (stmt.hasModifier(o.StmtModifier.Final)) {\n      if (isConstType(stmt.type)) {\n        ctx.print(`const `);\n      } else {\n        ctx.print(`final `);\n      }\n    } else if (isBlank(stmt.type)) {\n      ctx.print(`var `);\n    }\n    if (isPresent(stmt.type)) {\n      stmt.type.visitType(this, ctx);\n      ctx.print(` `);\n    }\n    ctx.print(`${stmt.name} = `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(`;`);\n    return null;\n  }\n  visitCastExpr(ast: o.CastExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`(`);\n    ast.value.visitExpression(this, ctx);\n    ctx.print(` as `);\n    ast.type.visitType(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n  visitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext): any {\n    ctx.pushClass(stmt);\n    ctx.print(`class ${stmt.name}`);\n    if (isPresent(stmt.parent)) {\n      ctx.print(` extends `);\n      stmt.parent.visitExpression(this, ctx);\n    }\n    ctx.println(` {`);\n    ctx.incIndent();\n    stmt.fields.forEach((field) => this._visitClassField(field, ctx));\n    if (isPresent(stmt.constructorMethod)) {\n      this._visitClassConstructor(stmt, ctx);\n    }\n    stmt.getters.forEach((getter) => this._visitClassGetter(getter, ctx));\n    stmt.methods.forEach((method) => this._visitClassMethod(method, ctx));\n    ctx.decIndent();\n    ctx.println(`}`);\n    ctx.popClass();\n    return null;\n  }\n  private _visitClassField(field: o.ClassField, ctx: EmitterVisitorContext) {\n    if (field.hasModifier(o.StmtModifier.Final)) {\n      ctx.print(`final `);\n    } else if (isBlank(field.type)) {\n      ctx.print(`var `);\n    }\n    if (isPresent(field.type)) {\n      field.type.visitType(this, ctx);\n      ctx.print(` `);\n    }\n    ctx.println(`${field.name};`);\n  }\n  private _visitClassGetter(getter: o.ClassGetter, ctx: EmitterVisitorContext) {\n    if (isPresent(getter.type)) {\n      getter.type.visitType(this, ctx);\n      ctx.print(` `);\n    }\n    ctx.println(`get ${getter.name} {`);\n    ctx.incIndent();\n    this.visitAllStatements(getter.body, ctx);\n    ctx.decIndent();\n    ctx.println(`}`);\n  }\n  private _visitClassConstructor(stmt: o.ClassStmt, ctx: EmitterVisitorContext) {\n    ctx.print(`${stmt.name}(`);\n    this._visitParams(stmt.constructorMethod.params, ctx);\n    ctx.print(`)`);\n\n    var ctorStmts = stmt.constructorMethod.body;\n    var superCtorExpr = ctorStmts.length > 0 ? getSuperConstructorCallExpr(ctorStmts[0]) : null;\n    if (isPresent(superCtorExpr)) {\n      ctx.print(`: `);\n      superCtorExpr.visitExpression(this, ctx);\n      ctorStmts = ctorStmts.slice(1);\n    }\n    ctx.println(` {`);\n    ctx.incIndent();\n    this.visitAllStatements(ctorStmts, ctx);\n    ctx.decIndent();\n    ctx.println(`}`);\n  }\n  private _visitClassMethod(method: o.ClassMethod, ctx: EmitterVisitorContext) {\n    if (isPresent(method.type)) {\n      method.type.visitType(this, ctx);\n    } else {\n      ctx.print(`void`);\n    }\n    ctx.print(` ${method.name}(`);\n    this._visitParams(method.params, ctx);\n    ctx.println(`) {`);\n    ctx.incIndent();\n    this.visitAllStatements(method.body, ctx);\n    ctx.decIndent();\n    ctx.println(`}`);\n  }\n\n  visitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`(`);\n    this._visitParams(ast.params, ctx);\n    ctx.println(`) {`);\n    ctx.incIndent();\n    this.visitAllStatements(ast.statements, ctx);\n    ctx.decIndent();\n    ctx.print(`}`);\n    return null;\n  }\n  visitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, ctx: EmitterVisitorContext): any {\n    if (isPresent(stmt.type)) {\n      stmt.type.visitType(this, ctx);\n    } else {\n      ctx.print(`void`);\n    }\n    ctx.print(` ${stmt.name}(`);\n    this._visitParams(stmt.params, ctx);\n    ctx.println(`) {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.statements, ctx);\n    ctx.decIndent();\n    ctx.println(`}`);\n    return null;\n  }\n\n  getBuiltinMethodName(method: o.BuiltinMethod): string {\n    var name;\n    switch (method) {\n      case o.BuiltinMethod.ConcatArray:\n        name = '.addAll';\n        break;\n      case o.BuiltinMethod.SubscribeObservable:\n        name = 'listen';\n        break;\n      case o.BuiltinMethod.bind:\n        name = null;\n        break;\n      default:\n        throw new BaseException(`Unknown builtin method: ${method}`);\n    }\n    return name;\n  }\n  visitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext): any {\n    ctx.println(`try {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.bodyStmts, ctx);\n    ctx.decIndent();\n    ctx.println(`} catch (${CATCH_ERROR_VAR.name}, ${CATCH_STACK_VAR.name}) {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.catchStmts, ctx);\n    ctx.decIndent();\n    ctx.println(`}`);\n    return null;\n  }\n  visitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any {\n    switch (ast.operator) {\n      case o.BinaryOperator.Identical:\n        ctx.print(`identical(`);\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(`, `);\n        ast.rhs.visitExpression(this, ctx);\n        ctx.print(`)`);\n        break;\n      case o.BinaryOperator.NotIdentical:\n        ctx.print(`!identical(`);\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(`, `);\n        ast.rhs.visitExpression(this, ctx);\n        ctx.print(`)`);\n        break;\n      default:\n        super.visitBinaryOperatorExpr(ast, ctx);\n    }\n    return null;\n  }\n  visitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any {\n    if (isConstType(ast.type)) {\n      ctx.print(`const `);\n    }\n    return super.visitLiteralArrayExpr(ast, ctx);\n  }\n  visitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any {\n    if (isConstType(ast.type)) {\n      ctx.print(`const `);\n    }\n    if (isPresent(ast.valueType)) {\n      ctx.print(`<String, `);\n      ast.valueType.visitType(this, ctx);\n      ctx.print(`>`);\n    }\n    return super.visitLiteralMapExpr(ast, ctx);\n  }\n  visitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(isConstType(ast.type) ? `const` : `new`);\n    ctx.print(' ');\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(ast.args, ctx, `,`);\n    ctx.print(`)`);\n    return null;\n  }\n  visitBuiltintType(type: o.BuiltinType, ctx: EmitterVisitorContext): any {\n    var typeStr;\n    switch (type.name) {\n      case o.BuiltinTypeName.Bool:\n        typeStr = 'bool';\n        break;\n      case o.BuiltinTypeName.Dynamic:\n        typeStr = 'dynamic';\n        break;\n      case o.BuiltinTypeName.Function:\n        typeStr = 'Function';\n        break;\n      case o.BuiltinTypeName.Number:\n        typeStr = 'num';\n        break;\n      case o.BuiltinTypeName.Int:\n        typeStr = 'int';\n        break;\n      case o.BuiltinTypeName.String:\n        typeStr = 'String';\n        break;\n      default:\n        throw new BaseException(`Unsupported builtin type ${type.name}`);\n    }\n    ctx.print(typeStr);\n    return null;\n  }\n  visitExternalType(ast: o.ExternalType, ctx: EmitterVisitorContext): any {\n    this._visitIdentifier(ast.value, ast.typeParams, ctx);\n    return null;\n  }\n  visitArrayType(type: o.ArrayType, ctx: EmitterVisitorContext): any {\n    ctx.print(`List<`);\n    if (isPresent(type.of)) {\n      type.of.visitType(this, ctx);\n    } else {\n      ctx.print(`dynamic`);\n    }\n    ctx.print(`>`);\n    return null;\n  }\n  visitMapType(type: o.MapType, ctx: EmitterVisitorContext): any {\n    ctx.print(`Map<String, `);\n    if (isPresent(type.valueType)) {\n      type.valueType.visitType(this, ctx);\n    } else {\n      ctx.print(`dynamic`);\n    }\n    ctx.print(`>`);\n    return null;\n  }\n\n  private _visitParams(params: o.FnParam[], ctx: EmitterVisitorContext): void {\n    this.visitAllObjects((param) => {\n      if (isPresent(param.type)) {\n        param.type.visitType(this, ctx);\n        ctx.print(' ');\n      }\n      ctx.print(param.name);\n    }, params, ctx, ',');\n  }\n\n  private _visitIdentifier(value: CompileIdentifierMetadata, typeParams: o.Type[],\n                           ctx: EmitterVisitorContext): void {\n    if (isBlank(value.name)) {\n      throw new BaseException(`Internal error: unknown identifier ${value}`);\n    }\n    if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {\n      var prefix = this.importsWithPrefixes.get(value.moduleUrl);\n      if (isBlank(prefix)) {\n        prefix = `import${this.importsWithPrefixes.size}`;\n        this.importsWithPrefixes.set(value.moduleUrl, prefix);\n      }\n      ctx.print(`${prefix}.`);\n    }\n    ctx.print(value.name);\n    if (isPresent(typeParams) && typeParams.length > 0) {\n      ctx.print(`<`);\n      this.visitAllObjects((type) => type.visitType(this, ctx), typeParams, ctx, ',');\n      ctx.print(`>`);\n    }\n  }\n}\n\nfunction getSuperConstructorCallExpr(stmt: o.Statement): o.Expression {\n  if (stmt instanceof o.ExpressionStatement) {\n    var expr = stmt.expr;\n    if (expr instanceof o.InvokeFunctionExpr) {\n      var fn = expr.fn;\n      if (fn instanceof o.ReadVarExpr) {\n        if (fn.builtin === o.BuiltinVar.Super) {\n          return expr;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nfunction isConstType(type: o.Type): boolean {\n  return isPresent(type) && type.hasModifier(o.TypeModifier.Const);\n}\n"]}