{"version":3,"sources":["app/angular2/zone.js/lib/jasmine/jasmine.ts"],"names":[],"mappings":"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","file":"jasmine.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n'use strict';\n(() => {\n  var __extends = function(d, b) {\n    for (var p in b)\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n  // Patch jasmine's describe/it/beforeEach/afterEach functions so test code always runs\n  // in a testZone (ProxyZone). (See: angular/zone.js#91 & angular/angular#10503)\n  if (!Zone) throw new Error('Missing: zone.js');\n  if (typeof jasmine == 'undefined') throw new Error('Missing: jasmine.js');\n  if (jasmine['__zone_patch__'])\n    throw new Error('\\'jasmine\\' has already been patched with \\'Zone\\'.');\n  jasmine['__zone_patch__'] = true;\n\n  const SyncTestZoneSpec: {new (name: string): ZoneSpec} = Zone['SyncTestZoneSpec'];\n  const ProxyZoneSpec: {new (): ZoneSpec} = Zone['ProxyZoneSpec'];\n  if (!SyncTestZoneSpec) throw new Error('Missing: SyncTestZoneSpec');\n  if (!ProxyZoneSpec) throw new Error('Missing: ProxyZoneSpec');\n\n  const ambientZone = Zone.current;\n  // Create a synchronous-only zone in which to run `describe` blocks in order to raise an\n  // error if any asynchronous operations are attempted inside of a `describe` but outside of\n  // a `beforeEach` or `it`.\n  const syncZone = ambientZone.fork(new SyncTestZoneSpec('jasmine.describe'));\n\n  // This is the zone which will be used for running individual tests.\n  // It will be a proxy zone, so that the tests function can retroactively install\n  // different zones.\n  // Example:\n  //   - In beforeEach() do childZone = Zone.current.fork(...);\n  //   - In it() try to do fakeAsync(). The issue is that because the beforeEach forked the\n  //     zone outside of fakeAsync it will be able to escope the fakeAsync rules.\n  //   - Because ProxyZone is parent fo `childZone` fakeAsync can retroactively add\n  //     fakeAsync behavior to the childZone.\n  let testProxyZone: Zone = null;\n\n  // Monkey patch all of the jasmine DSL so that each function runs in appropriate zone.\n  const jasmineEnv = jasmine.getEnv();\n  ['describe', 'xdescribe', 'fdescribe'].forEach((methodName) => {\n    let originalJasmineFn: Function = jasmineEnv[methodName];\n    jasmineEnv[methodName] = function(description: string, specDefinitions: Function) {\n      return originalJasmineFn.call(this, description, wrapDescribeInZone(specDefinitions));\n    };\n  });\n  ['it', 'xit', 'fit'].forEach((methodName) => {\n    let originalJasmineFn: Function = jasmineEnv[methodName];\n    jasmineEnv[methodName] = function(\n        description: string, specDefinitions: Function, timeout: number) {\n      arguments[1] = wrapTestInZone(specDefinitions);\n      return originalJasmineFn.apply(this, arguments);\n    };\n  });\n  ['beforeEach', 'afterEach'].forEach((methodName) => {\n    let originalJasmineFn: Function = jasmineEnv[methodName];\n    jasmineEnv[methodName] = function(specDefinitions: Function, timeout: number) {\n      arguments[0] = wrapTestInZone(specDefinitions);\n      return originalJasmineFn.apply(this, arguments);\n    };\n  });\n\n  /**\n   * Gets a function wrapping the body of a Jasmine `describe` block to execute in a\n   * synchronous-only zone.\n   */\n  function wrapDescribeInZone(describeBody: Function): Function {\n    return function() {\n      return syncZone.run(describeBody, this, arguments as any as any[]);\n    };\n  }\n\n  /**\n   * Gets a function wrapping the body of a Jasmine `it/beforeEach/afterEach` block to\n   * execute in a ProxyZone zone.\n   * This will run in `testProxyZone`. The `testProxyZone` will be reset by the `ZoneQueueRunner`\n   */\n  function wrapTestInZone(testBody: Function): Function {\n    // The `done` callback is only passed through if the function expects at least one argument.\n    // Note we have to make a function with correct number of arguments, otherwise jasmine will\n    // think that all functions are sync or async.\n    return (testBody.length == 0) ? function() {\n      return testProxyZone.run(testBody, this);\n    } : function(done) {\n      return testProxyZone.run(testBody, this, [done]);\n    };\n  }\n  interface QueueRunner {\n    execute(): void;\n  }\n  interface QueueRunnerAttrs {\n    queueableFns: {fn: Function}[];\n    onComplete: () => void;\n    clearStack: (fn) => void;\n    onException: (error) => void;\n    catchException: () => boolean;\n    userContext: any;\n    timeout: {setTimeout: Function, clearTimeout: Function};\n    fail: () => void;\n  }\n\n  const QueueRunner = (jasmine as any).QueueRunner as {new (attrs: QueueRunnerAttrs): QueueRunner};\n  (jasmine as any).QueueRunner = (function(_super) {\n    __extends(ZoneQueueRunner, _super);\n    function ZoneQueueRunner(attrs) {\n      attrs.onComplete = ((fn) => () => {\n        // All functions are done, clear the test zone.\n        testProxyZone = null;\n        ambientZone.scheduleMicroTask('jasmine.onComplete', fn);\n      })(attrs.onComplete);\n      _super.call(this, attrs);\n    }\n    ZoneQueueRunner.prototype.execute = function() {\n      if (Zone.current !== ambientZone) throw new Error('Unexpected Zone: ' + Zone.current.name);\n      testProxyZone = ambientZone.fork(new ProxyZoneSpec());\n      if (!Zone.currentTask) {\n        // if we are not running in a task then if someone would register a\n        // element.addEventListener and then calling element.click() the\n        // addEventListener callback would think that it is the top most task and would\n        // drain the microtask queue on element.click() which would be incorrect.\n        // For this reason we always force a task when running jasmine tests.\n        Zone.current.scheduleMicroTask(\n            'jasmine.execute().forceTask', () => QueueRunner.prototype.execute.call(this));\n      } else {\n        _super.prototype.execute.call(this);\n      }\n    };\n    return ZoneQueueRunner;\n  }(QueueRunner));\n})();\n"]}