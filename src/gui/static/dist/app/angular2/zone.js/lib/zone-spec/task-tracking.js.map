{"version":3,"sources":["app/angular2/zone.js/lib/zone-spec/task-tracking.ts"],"names":[],"mappings":"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","file":"task-tracking.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A `TaskTrackingZoneSpec` allows one to track all outstanding Tasks.\n *\n * This is useful in tests. For example to see which tasks are preventing a test from completing\n * or an automated way of releasing all of the event listeners at the end of the test.\n */\nclass TaskTrackingZoneSpec implements ZoneSpec {\n  name = 'TaskTrackingZone';\n  microTasks: Task[] = [];\n  macroTasks: Task[] = [];\n  eventTasks: Task[] = [];\n  properties: {[key: string]: any} = {'TaskTrackingZone': this};\n\n  static get() {\n    return Zone.current.get('TaskTrackingZone');\n  }\n\n  private getTasksFor(type: string): Task[] {\n    switch (type) {\n      case 'microTask':\n        return this.microTasks;\n      case 'macroTask':\n        return this.macroTasks;\n      case 'eventTask':\n        return this.eventTasks;\n    }\n    throw new Error('Unknown task format: ' + type);\n  }\n\n  onScheduleTask(parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, task: Task):\n      Task {\n    task['creationLocation'] = new Error(`Task '${task.type}' from '${task.source}'.`);\n    const tasks = this.getTasksFor(task.type);\n    tasks.push(task);\n    return parentZoneDelegate.scheduleTask(targetZone, task);\n  }\n\n  onCancelTask(parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, task: Task):\n      any {\n    const tasks = this.getTasksFor(task.type);\n    for (var i = 0; i < tasks.length; i++) {\n      if (tasks[i] == task) {\n        tasks.splice(i, 1);\n        break;\n      }\n    }\n    return parentZoneDelegate.cancelTask(targetZone, task);\n  }\n\n  onInvokeTask(\n      parentZoneDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, task: Task,\n      applyThis: any, applyArgs: any): any {\n    if (task.type === 'eventTask')\n      return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    const tasks = this.getTasksFor(task.type);\n    for (var i = 0; i < tasks.length; i++) {\n      if (tasks[i] == task) {\n        tasks.splice(i, 1);\n        break;\n      }\n    }\n    return parentZoneDelegate.invokeTask(targetZone, task, applyThis, applyArgs);\n  }\n\n  clearEvents() {\n    while (this.eventTasks.length) {\n      Zone.current.cancelTask(this.eventTasks[0]);\n    }\n  }\n}\n\n// Export the class so that new instances can be created with proper\n// constructor params.\nZone['TaskTrackingZoneSpec'] = TaskTrackingZoneSpec;\n"]}