{"version":3,"file":"i18n_html_parser.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/i18n_html_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,4BAA4B,EAAsB,MAAM,mCAAmC;OAC5F,EAAC,eAAe,EAAC,MAAM,qBAAqB;OAE5C,EAAC,iBAAiB,EAAC,MAAM,oBAAoB;OAC7C,EAAC,aAAa,EAAC,MAAM,kBAAkB;OAEvC,EAAC,KAAK,EAAC,MAAM,qBAAqB;OAClC,EAAC,GAAG,EAAC,MAAM,mBAAmB;OAC9B,EAAC,GAAG,EAAC,MAAM,mBAAmB;OAC9B,EAAC,iBAAiB,EAAC,MAAM,sBAAsB;AAEtD;IAIE,8EAA8E;IAC9E,uBAAuB;IACvB,qEAAqE;IACrE,wBACY,WAAuB,EAAU,aAAsB,EACvD,mBAA4B;QAD5B,gBAAW,GAAX,WAAW,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAS;QACvD,wBAAmB,GAAnB,mBAAmB,CAAS;IAAG,CAAC;IAE5C,8BAAK,GAAL,UACI,MAAc,EAAE,GAAW,EAAE,mBAAoC,EACjE,mBAAuE;QAD1C,mCAAoC,GAApC,2BAAoC;QACjE,mCAAuE,GAAvE,kDAAuE;QACzE,IAAM,WAAW,GACb,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;QAElF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,KAAK,EAAE,CAAC,CAAC,CAAC;YACrD,4DAA4D;YAC5D,MAAM,CAAC,WAAW,CAAC;QACrB,CAAC;QAED,yDAAyD;QACzD,IAAM,aAAa,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClE,IAAM,MAAM,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;QAElF,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,eAAe,CAAC,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACvF,CAAC;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;QAC/D,IAAM,iBAAiB,GACnB,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;QAE/E,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAClG,CAAC;IAEO,0CAAiB,GAAzB,UAA0B,mBAAwC;QAChE,IAAM,MAAM,GAAG,CAAC,IAAI,CAAC,mBAAmB,IAAI,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAEjE,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACf,KAAK,KAAK;gBACR,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC;YACnB,KAAK,KAAK;gBACR,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;YACxD,KAAK,OAAO,CAAC;YACb,KAAK,KAAK,CAAC;YACX;gBACE,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CAAC,AAnDD,IAmDC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {ParseTreeResult} from '../ml_parser/parser';\n\nimport {mergeTranslations} from './extractor_merger';\nimport {MessageBundle} from './message_bundle';\nimport {Serializer} from './serializers/serializer';\nimport {Xliff} from './serializers/xliff';\nimport {Xmb} from './serializers/xmb';\nimport {Xtb} from './serializers/xtb';\nimport {TranslationBundle} from './translation_bundle';\n\nexport class I18NHtmlParser implements HtmlParser {\n  // @override\n  getTagDefinition: any;\n\n  // TODO(vicb): transB.load() should not need a msgB & add transB.resolve(msgB,\n  // interpolationConfig)\n  // TODO(vicb): remove the interpolationConfig from the Xtb serializer\n  constructor(\n      private _htmlParser: HtmlParser, private _translations?: string,\n      private _translationsFormat?: string) {}\n\n  parse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    const parseResult =\n        this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\n\n    if (!this._translations || this._translations === '') {\n      // Do not enable i18n when no translation bundle is provided\n      return parseResult;\n    }\n\n    // TODO(vicb): add support for implicit tags / attributes\n    const messageBundle = new MessageBundle(this._htmlParser, [], {});\n    const errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);\n\n    if (errors && errors.length) {\n      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));\n    }\n\n    const serializer = this._createSerializer(interpolationConfig);\n    const translationBundle =\n        TranslationBundle.load(this._translations, url, messageBundle, serializer);\n\n    return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});\n  }\n\n  private _createSerializer(interpolationConfig: InterpolationConfig): Serializer {\n    const format = (this._translationsFormat || 'xlf').toLowerCase();\n\n    switch (format) {\n      case 'xmb':\n        return new Xmb();\n      case 'xtb':\n        return new Xtb(this._htmlParser, interpolationConfig);\n      case 'xliff':\n      case 'xlf':\n      default:\n        return new Xliff(this._htmlParser, interpolationConfig);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}