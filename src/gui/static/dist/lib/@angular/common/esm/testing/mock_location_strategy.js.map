{"version":3,"file":"mock_location_strategy.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/testing/mock_location_strategy.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {Injectable} from '@angular/core';\nimport {EventEmitter, ObservableWrapper} from '../src/facade/async';\nimport {LocationStrategy} from '../index';\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  constructor() { super(); }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    ObservableWrapper.callEmit(this._subject, new _MockPopStateEvent(this.path()));\n  }\n\n  path(): string { return this.internalPath; }\n\n  prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  pushState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    var url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    var externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  replaceState(ctx: any, title: string, path: string, query: string): void {\n    this.internalTitle = title;\n\n    var url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    var externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  onPopState(fn: (value: any) => void): void { ObservableWrapper.subscribe(this._subject, fn); }\n\n  getBaseHref(): string { return this.internalBaseHref; }\n\n  back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  forward(): void { throw 'not implemented'; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n"]}