{"version":3,"file":"reflective_exceptions.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/reflective_exceptions.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {ListWrapper} from '../../src/facade/collection';\nimport {stringify, isBlank} from '../../src/facade/lang';\nimport {BaseException, WrappedException} from '../../src/facade/exceptions';\nimport {ReflectiveKey} from './reflective_key';\nimport {ReflectiveInjector} from './reflective_injector';\n\nfunction findFirstClosedCycle(keys: any[]): any[] {\n  var res = [];\n  for (var i = 0; i < keys.length; ++i) {\n    if (ListWrapper.contains(res, keys[i])) {\n      res.push(keys[i]);\n      return res;\n    } else {\n      res.push(keys[i]);\n    }\n  }\n  return res;\n}\n\nfunction constructResolvingPath(keys: any[]): string {\n  if (keys.length > 1) {\n    var reversed = findFirstClosedCycle(ListWrapper.reversed(keys));\n    var tokenStrs = reversed.map(k => stringify(k.token));\n    return \" (\" + tokenStrs.join(' -> ') + \")\";\n  } else {\n    return \"\";\n  }\n}\n\n\n/**\n * Base class for all errors arising from misconfigured providers.\n */\nexport class AbstractProviderError extends BaseException {\n  /** @internal */\n  message: string;\n\n  /** @internal */\n  keys: ReflectiveKey[];\n\n  /** @internal */\n  injectors: ReflectiveInjector[];\n\n  /** @internal */\n  constructResolvingMessage: Function;\n\n  constructor(injector: ReflectiveInjector, key: ReflectiveKey,\n              constructResolvingMessage: Function) {\n    super(\"DI Exception\");\n    this.keys = [key];\n    this.injectors = [injector];\n    this.constructResolvingMessage = constructResolvingMessage;\n    this.message = this.constructResolvingMessage(this.keys);\n  }\n\n  addKey(injector: ReflectiveInjector, key: ReflectiveKey): void {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    this.message = this.constructResolvingMessage(this.keys);\n  }\n\n  get context() { return this.injectors[this.injectors.length - 1].debugContext(); }\n}\n\n/**\n * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for {@link Key}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nexport class NoProviderError extends AbstractProviderError {\n  constructor(injector: ReflectiveInjector, key: ReflectiveKey) {\n    super(injector, key, function(keys: any[]) {\n      var first = stringify(ListWrapper.first(keys).token);\n      return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    });\n  }\n}\n\n/**\n * Thrown when dependencies form a cycle.\n *\n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   provide(\"one\", {useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]}),\n *   provide(\"two\", {useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]})\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nexport class CyclicDependencyError extends AbstractProviderError {\n  constructor(injector: ReflectiveInjector, key: ReflectiveKey) {\n    super(injector, key, function(keys: any[]) {\n      return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    });\n  }\n}\n\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nexport class InstantiationError extends WrappedException {\n  /** @internal */\n  keys: ReflectiveKey[];\n\n  /** @internal */\n  injectors: ReflectiveInjector[];\n\n  constructor(injector: ReflectiveInjector, originalException, originalStack, key: ReflectiveKey) {\n    super(\"DI Exception\", originalException, originalStack, null);\n    this.keys = [key];\n    this.injectors = [injector];\n  }\n\n  addKey(injector: ReflectiveInjector, key: ReflectiveKey): void {\n    this.injectors.push(injector);\n    this.keys.push(key);\n  }\n\n  get wrapperMessage(): string {\n    var first = stringify(ListWrapper.first(this.keys).token);\n    return `Error during instantiation of ${first}!${constructResolvingPath(this.keys)}.`;\n  }\n\n  get causeKey(): ReflectiveKey { return this.keys[0]; }\n\n  get context() { return this.injectors[this.injectors.length - 1].debugContext(); }\n}\n\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nexport class InvalidProviderError extends BaseException {\n  constructor(provider) {\n    super(\"Invalid provider - only instances of Provider and Type are allowed, got: \" +\n          provider.toString());\n  }\n}\n\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n */\nexport class NoAnnotationError extends BaseException {\n  constructor(typeOrFunc, params: any[][]) {\n    super(NoAnnotationError._genMessage(typeOrFunc, params));\n  }\n\n  private static _genMessage(typeOrFunc, params: any[][]) {\n    var signature = [];\n    for (var i = 0, ii = params.length; i < ii; i++) {\n      var parameter = params[i];\n      if (isBlank(parameter) || parameter.length == 0) {\n        signature.push('?');\n      } else {\n        signature.push(parameter.map(stringify).join(' '));\n      }\n    }\n    return \"Cannot resolve all parameters for '\" + stringify(typeOrFunc) + \"'(\" +\n           signature.join(', ') + \"). \" +\n           \"Make sure that all the parameters are decorated with Inject or have valid type annotations and that '\" +\n           stringify(typeOrFunc) + \"' is decorated with Injectable.\";\n  }\n}\n\n/**\n * Thrown when getting an object by index.\n *\n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n */\nexport class OutOfBoundsError extends BaseException {\n  constructor(index) { super(`Index ${index} is out-of-bounds.`); }\n}\n\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   new Provider(\"Strings\", {useValue: \"string1\", multi: true}),\n *   new Provider(\"Strings\", {useValue: \"string2\", multi: false})\n * ])).toThrowError();\n * ```\n */\nexport class MixingMultiProvidersWithRegularProvidersError extends BaseException {\n  constructor(provider1, provider2) {\n    super(\"Cannot mix multi providers and regular providers, got: \" + provider1.toString() + \" \" +\n          provider2.toString());\n  }\n}\n"]}