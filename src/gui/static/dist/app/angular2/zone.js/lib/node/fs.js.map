{"version":3,"sources":["app/angular2/zone.js/lib/node/fs.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;QAIC,EAAE,EAGG,GAAG,EAIN,QAAQ;;;;;;;YANd,IAAI,CAAC;gBACH,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;YACrB,CAAE;YAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACf,CAAC;YAED,iDAAiD;YAC3C,QAAQ,GAAG;gBACf,QAAQ,EAAG,YAAY,EAAE,OAAO,EAAK,OAAO,EAAK,OAAO,EAAM,QAAQ,EAAK,QAAQ;gBACnF,QAAQ,EAAG,WAAW,EAAG,OAAO,EAAK,OAAO,EAAK,WAAW,EAAE,SAAS,EAAI,QAAQ;gBACnF,QAAQ,EAAG,MAAM,EAAQ,OAAO,EAAK,OAAO,EAAK,SAAS,EAAI,MAAM,EAAO,MAAM;gBACjF,SAAS,EAAE,UAAU,EAAI,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAK,OAAO,EAAM,MAAM;gBACjF,SAAS,EAAE,UAAU,EAAI,QAAQ,EAAI,QAAQ,EAAI,OAAO,EAAM,WAAW;aAC1E,CAAC;YAEF,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACP,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI;oBAChF,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAkB;wBAC7B,MAAM,CAAC;4BACL,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,qBAAa,CAAM,SAAS,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;wBAC3E,CAAC,CAAC;oBACJ,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC;YACL,CAAC","file":"fs.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {bindArguments} from '../common/utils';\n\nlet fs;\ntry {\n  fs = require('fs');\n} catch (err) {\n}\n\n// TODO(alxhub): Patch `watch` and `unwatchFile`.\nconst TO_PATCH = [\n  'access',  'appendFile', 'chmod',    'chown',    'close',     'exists',    'fchmod',\n  'fchown',  'fdatasync',  'fstat',    'fsync',    'ftruncate', 'futimes',   'lchmod',\n  'lchown',  'link',       'lstat',    'mkdir',    'mkdtemp',   'open',      'read',\n  'readdir', 'readFile',   'readlink', 'realpath', 'rename',    'rmdir',     'stat',\n  'symlink', 'truncate',   'unlink',   'utimes',   'write',     'writeFile',\n];\n\nif (fs) {\n  TO_PATCH.filter(name => !!fs[name] && typeof fs[name] === 'function').forEach(name => {\n    fs[name] = ((delegate: Function) => {\n      return function() {\n        return delegate.apply(this, bindArguments(<any>arguments, 'fs.' + name));\n      };\n    })(fs[name]);\n  });\n}\n"]}