{"version":3,"file":"regex_route_path.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/router-deprecated/src/rules/route_paths/regex_route_path.ts"],"names":[],"mappings":"OAAO,EAAC,aAAa,EAAE,oBAAoB,EAAE,OAAO,EAAC,MAAM,0BAA0B;OAE9E,EAA0B,UAAU,EAAC,MAAM,cAAc;AAKhE;IAOE,YAAoB,SAAiB,EAAU,WAA4B;QAAvD,cAAS,GAAT,SAAS,CAAQ;QAAU,gBAAW,GAAX,WAAW,CAAiB;QALpE,aAAQ,GAAY,IAAI,CAAC;QACzB,gBAAW,GAAW,GAAG,CAAC;QAK/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC;IAED,QAAQ,CAAC,GAAQ;QACf,IAAI,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,MAAM,GAA4B,EAAE,CAAC;QACzC,IAAI,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC1D,IAAI,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE/C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACzC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;QAED,MAAM,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,WAAW,CAAC,MAA4B,IAAkB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE5F,QAAQ,KAAa,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AAC/C,CAAC;AAAA","sourcesContent":["import {RegExpWrapper, RegExpMatcherWrapper, isBlank} from '../../../src/facade/lang';\nimport {Url} from '../../url_parser';\nimport {RoutePath, GeneratedUrl, MatchedUrl} from './route_path';\n\n\nexport interface RegexSerializer { (params: {[key: string]: any}): GeneratedUrl; }\n\nexport class RegexRoutePath implements RoutePath {\n  public hash: string;\n  public terminal: boolean = true;\n  public specificity: string = '2';\n\n  private _regex: RegExp;\n\n  constructor(private _reString: string, private _serializer: RegexSerializer) {\n    this.hash = this._reString;\n    this._regex = RegExpWrapper.create(this._reString);\n  }\n\n  matchUrl(url: Url): MatchedUrl {\n    var urlPath = url.toString();\n    var params: {[key: string]: string} = {};\n    var matcher = RegExpWrapper.matcher(this._regex, urlPath);\n    var match = RegExpMatcherWrapper.next(matcher);\n\n    if (isBlank(match)) {\n      return null;\n    }\n\n    for (let i = 0; i < match.length; i += 1) {\n      params[i.toString()] = match[i];\n    }\n\n    return new MatchedUrl(urlPath, [], params, [], null);\n  }\n\n  generateUrl(params: {[key: string]: any}): GeneratedUrl { return this._serializer(params); }\n\n  toString(): string { return this._reString; }\n}\n"]}