{"version":3,"file":"provider_parser.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/provider_parser.ts"],"names":[],"mappings":"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","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isPresent, isBlank, isArray, normalizeBlank} from '../src/facade/lang';\nimport {ListWrapper} from '../src/facade/collection';\nimport {\n  VariableAst,\n  AttrAst,\n  DirectiveAst,\n  ProviderAst,\n  ProviderAstType,\n  ReferenceAst\n} from './template_ast';\nimport {\n  CompileTypeMetadata,\n  CompileTokenMap,\n  CompileQueryMetadata,\n  CompileTokenMetadata,\n  CompileProviderMetadata,\n  CompileDirectiveMetadata,\n  CompileDiDependencyMetadata\n} from './compile_metadata';\nimport {Identifiers, identifierToken} from './identifiers';\nimport {ParseSourceSpan, ParseError} from './parse_util';\n\nexport class ProviderError extends ParseError {\n  constructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\n\nexport class ProviderViewContext {\n  /**\n   * @internal\n   */\n  viewQueries: CompileTokenMap<CompileQueryMetadata[]>;\n  /**\n   * @internal\n   */\n  viewProviders: CompileTokenMap<boolean>;\n  errors: ProviderError[] = [];\n\n  constructor(public component: CompileDirectiveMetadata, public sourceSpan: ParseSourceSpan) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new CompileTokenMap<boolean>();\n    _normalizeProviders(component.viewProviders, sourceSpan, this.errors)\n        .forEach((provider) => {\n          if (isBlank(this.viewProviders.get(provider.token))) {\n            this.viewProviders.add(provider.token, true);\n          }\n        });\n  }\n}\n\nexport class ProviderElementContext {\n  private _contentQueries: CompileTokenMap<CompileQueryMetadata[]>;\n\n  private _transformedProviders = new CompileTokenMap<ProviderAst>();\n  private _seenProviders = new CompileTokenMap<boolean>();\n  private _allProviders: CompileTokenMap<ProviderAst>;\n  private _attrs: {[key: string]: string};\n  private _hasViewContainer: boolean = false;\n\n  constructor(private _viewContext: ProviderViewContext, private _parent: ProviderElementContext,\n              private _isViewRoot: boolean, private _directiveAsts: DirectiveAst[],\n              attrs: AttrAst[], refs: ReferenceAst[], private _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    var directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);\n    this._contentQueries = _getContentQueries(directivesMeta);\n    var queriedTokens = new CompileTokenMap<boolean>();\n    this._allProviders.values().forEach(\n        (provider) => { this._addQueryReadsTo(provider.token, queriedTokens); });\n    refs.forEach((refAst) => {\n      this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);\n    });\n    if (isPresent(queriedTokens.get(identifierToken(Identifiers.ViewContainerRef)))) {\n      this._hasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    this._allProviders.values().forEach((provider) => {\n      var eager = provider.eager || isPresent(queriedTokens.get(provider.token));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n\n  afterElement() {\n    // collect lazy providers\n    this._allProviders.values().forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n\n  get transformProviders(): ProviderAst[] { return this._transformedProviders.values(); }\n\n  get transformedDirectiveAsts(): DirectiveAst[] {\n    var sortedProviderTypes =\n        this._transformedProviders.values().map(provider => provider.token.identifier);\n    var sortedDirectives = ListWrapper.clone(this._directiveAsts);\n    ListWrapper.sort(sortedDirectives,\n                     (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n                                     sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n\n  get transformedHasViewContainer(): boolean { return this._hasViewContainer; }\n\n  private _addQueryReadsTo(token: CompileTokenMetadata, queryReadTokens: CompileTokenMap<boolean>) {\n    this._getQueriesFor(token).forEach((query) => {\n      var queryReadToken = isPresent(query.read) ? query.read : token;\n      if (isBlank(queryReadTokens.get(queryReadToken))) {\n        queryReadTokens.add(queryReadToken, true);\n      }\n    });\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): CompileQueryMetadata[] {\n    var result: CompileQueryMetadata[] = [];\n    var currentEl: ProviderElementContext = this;\n    var distance = 0;\n    var queries: CompileQueryMetadata[];\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(token);\n      if (isPresent(queries)) {\n        ListWrapper.addAll(result, queries.filter((query) => query.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this._viewContext.viewQueries.get(token);\n    if (isPresent(queries)) {\n      ListWrapper.addAll(result, queries);\n    }\n    return result;\n  }\n\n\n  private _getOrCreateLocalProvider(requestingProviderType: ProviderAstType,\n                                    token: CompileTokenMetadata, eager: boolean): ProviderAst {\n    var resolvedProvider = this._allProviders.get(token);\n    if (isBlank(resolvedProvider) ||\n        ((requestingProviderType === ProviderAstType.Directive ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    var transformedProviderAst = this._transformedProviders.get(token);\n    if (isPresent(transformedProviderAst)) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(token))) {\n      this._viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${token.name}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.add(token, true);\n    var transformedProviders = resolvedProvider.providers.map((provider) => {\n      var transformedUseValue = provider.useValue;\n      var transformedUseExisting = provider.useExisting;\n      var transformedDeps;\n      if (isPresent(provider.useExisting)) {\n        var existingDiDep = this._getDependency(\n            resolvedProvider.providerType,\n            new CompileDiDependencyMetadata({token: provider.useExisting}), eager);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (isPresent(provider.useFactory)) {\n        var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      } else if (isPresent(provider.useClass)) {\n        var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.add(token, transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getLocalDependency(requestingProviderType: ProviderAstType,\n                              dep: CompileDiDependencyMetadata,\n                              eager: boolean = null): CompileDiDependencyMetadata {\n    if (dep.isAttribute) {\n      var attrValue = this._attrs[dep.token.value];\n      return new CompileDiDependencyMetadata({isValue: true, value: normalizeBlank(attrValue)});\n    }\n    if (isPresent(dep.query) || isPresent(dep.viewQuery)) {\n      return dep;\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (dep.token.equalsTo(identifierToken(Identifiers.Renderer)) ||\n            dep.token.equalsTo(identifierToken(Identifiers.ElementRef)) ||\n            dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)) ||\n            dep.token.equalsTo(identifierToken(Identifiers.TemplateRef))) {\n          return dep;\n        }\n        if (dep.token.equalsTo(identifierToken(Identifiers.ViewContainerRef))) {\n          this._hasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (dep.token.equalsTo(identifierToken(Identifiers.Injector))) {\n        return dep;\n      }\n      // access providers\n      if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n        return dep;\n      }\n    }\n    return null;\n  }\n\n  private _getDependency(requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n                         eager: boolean = null): CompileDiDependencyMetadata {\n    var currElement: ProviderElementContext = this;\n    var currEager: boolean = eager;\n    var result: CompileDiDependencyMetadata = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (isBlank(result) && dep.isOptional) {\n        result = new CompileDiDependencyMetadata({isValue: true, value: null});\n      }\n    } else {\n      // check parent elements\n      while (isBlank(result) && isPresent(currElement._parent)) {\n        var prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (isBlank(result)) {\n        if (!dep.isHost || this._viewContext.component.type.isHost ||\n            identifierToken(this._viewContext.component.type).equalsTo(dep.token) ||\n            isPresent(this._viewContext.viewProviders.get(dep.token))) {\n          result = dep;\n        } else {\n          result = dep.isOptional ?\n                       result = new CompileDiDependencyMetadata({isValue: true, value: null}) :\n                       null;\n        }\n      }\n    }\n    if (isBlank(result)) {\n      this._viewContext.errors.push(\n          new ProviderError(`No provider for ${dep.token.name}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return new CompileProviderMetadata({\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  });\n}\n\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers,\n                         provider.providerType, provider.sourceSpan);\n}\n\nfunction _normalizeProviders(\n    providers: Array<CompileProviderMetadata | CompileTypeMetadata | any[]>,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProviders: CompileProviderMetadata[] = null): CompileProviderMetadata[] {\n  if (isBlank(targetProviders)) {\n    targetProviders = [];\n  }\n  if (isPresent(providers)) {\n    providers.forEach((provider) => {\n      if (isArray(provider)) {\n        _normalizeProviders(<any[]>provider, sourceSpan, targetErrors, targetProviders);\n      } else {\n        var normalizeProvider: CompileProviderMetadata;\n        if (provider instanceof CompileProviderMetadata) {\n          normalizeProvider = provider;\n        } else if (provider instanceof CompileTypeMetadata) {\n          normalizeProvider = new CompileProviderMetadata(\n              {token: new CompileTokenMetadata({identifier: provider}), useClass: provider});\n        } else {\n          targetErrors.push(new ProviderError(`Unknown provider type ${provider}`, sourceSpan));\n        }\n        if (isPresent(normalizeProvider)) {\n          targetProviders.push(normalizeProvider);\n        }\n      }\n    });\n  }\n  return targetProviders;\n}\n\n\nfunction _resolveProvidersFromDirectives(directives: CompileDirectiveMetadata[],\n                                         sourceSpan: ParseSourceSpan,\n                                         targetErrors: ParseError[]): CompileTokenMap<ProviderAst> {\n  var providersByToken = new CompileTokenMap<ProviderAst>();\n  directives.forEach((directive) => {\n    var dirProvider = new CompileProviderMetadata(\n        {token: new CompileTokenMetadata({identifier: directive.type}), useClass: directive.type});\n    _resolveProviders([dirProvider],\n                      directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive,\n                      true, sourceSpan, targetErrors, providersByToken);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  var directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors),\n                      ProviderAstType.PublicService, false, sourceSpan, targetErrors,\n                      providersByToken);\n    _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors),\n                      ProviderAstType.PrivateService, false, sourceSpan, targetErrors,\n                      providersByToken);\n  });\n  return providersByToken;\n}\n\nfunction _resolveProviders(providers: CompileProviderMetadata[], providerType: ProviderAstType,\n                           eager: boolean, sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n                           targetProvidersByToken: CompileTokenMap<ProviderAst>) {\n  providers.forEach((provider) => {\n    var resolvedProvider = targetProvidersByToken.get(provider.token);\n    if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${resolvedProvider.token.name}`,\n          sourceSpan));\n    }\n    if (isBlank(resolvedProvider)) {\n      resolvedProvider = new ProviderAst(provider.token, provider.multi, eager, [provider],\n                                         providerType, sourceSpan);\n      targetProvidersByToken.add(provider.token, resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        ListWrapper.clear(resolvedProvider.providers);\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n\n\nfunction _getViewQueries(\n    component: CompileDirectiveMetadata): CompileTokenMap<CompileQueryMetadata[]> {\n  var viewQueries = new CompileTokenMap<CompileQueryMetadata[]>();\n  if (isPresent(component.viewQueries)) {\n    component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, query));\n  }\n  component.type.diDeps.forEach((dep) => {\n    if (isPresent(dep.viewQuery)) {\n      _addQueryToTokenMap(viewQueries, dep.viewQuery);\n    }\n  });\n  return viewQueries;\n}\n\nfunction _getContentQueries(\n    directives: CompileDirectiveMetadata[]): CompileTokenMap<CompileQueryMetadata[]> {\n  var contentQueries = new CompileTokenMap<CompileQueryMetadata[]>();\n  directives.forEach(directive => {\n    if (isPresent(directive.queries)) {\n      directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, query));\n    }\n    directive.type.diDeps.forEach((dep) => {\n      if (isPresent(dep.query)) {\n        _addQueryToTokenMap(contentQueries, dep.query);\n      }\n    });\n  });\n  return contentQueries;\n}\n\nfunction _addQueryToTokenMap(map: CompileTokenMap<CompileQueryMetadata[]>,\n                             query: CompileQueryMetadata) {\n  query.selectors.forEach((token: CompileTokenMetadata) => {\n    var entry = map.get(token);\n    if (isBlank(entry)) {\n      entry = [];\n      map.add(token, entry);\n    }\n    entry.push(query);\n  });\n}\n"]}