{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/config.ts"],"names":[],"mappings":";AAIE,qBAAsB,oBAAoB,CAAC,CAAA;AAC7C,2BAA4B,0BAA0B,CAAC,CAAA;AACvD,4BAA0B,eAAe,CAAC,CAAA;AAG1C;IAEE,wBAAmB,YAAqB,EAAS,gBAAyB,EACvD,MAAe,EAAE,WAA+B;QAA/B,2BAA+B,GAA/B,kBAA+B;QADhD,iBAAY,GAAZ,YAAY,CAAS;QAAS,qBAAgB,GAAhB,gBAAgB,CAAS;QACvD,WAAM,GAAN,MAAM,CAAS;QAChC,EAAE,CAAC,CAAC,cAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACzB,WAAW,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACzC,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IACH,qBAAC;AAAD,CAAC,AATD,IASC;AATY,sBAAc,iBAS1B,CAAA;AAED;;;;GAIG;AACH;IAAA;IAOA,CAAC;IANC,sBAAI,iCAAQ;aAAZ,cAA4C,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACrE,sBAAI,mCAAU;aAAd,cAA8C,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACvE,sBAAI,sCAAa;aAAjB,cAAiD,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC1E,sBAAI,sCAAa;aAAjB,cAAiD,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC1E,sBAAI,mCAAU;aAAd,cAA8C,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IACvE,sBAAI,oCAAW;aAAf,cAA+C,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;;;OAAA;IAC1E,kBAAC;AAAD,CAAC,AAPD,IAOC;AAPqB,mBAAW,cAOhC,CAAA;AAED;IAAA;QACE,aAAQ,GAAG,yBAAW,CAAC,QAAQ,CAAC;QAChC,eAAU,GAAG,IAAI,CAAC;QAClB,kBAAa,GAAG,IAAI,CAAC;QACrB,kBAAa,GAAG,IAAI,CAAC;QACrB,eAAU,GAAG,IAAI,CAAC;QAClB,gBAAW,GAAG,IAAI,CAAC;IACrB,CAAC;IAAD,yBAAC;AAAD,CAAC,AAPD,IAOC;AAPY,0BAAkB,qBAO9B,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {isBlank} from '../src/facade/lang';\nimport {unimplemented} from '../src/facade/exceptions';\nimport {Identifiers} from './identifiers';\nimport {CompileIdentifierMetadata} from './compile_metadata';\n\nexport class CompilerConfig {\n  public renderTypes: RenderTypes;\n  constructor(public genDebugInfo: boolean, public logBindingUpdate: boolean,\n              public useJit: boolean, renderTypes: RenderTypes = null) {\n    if (isBlank(renderTypes)) {\n      renderTypes = new DefaultRenderTypes();\n    }\n    this.renderTypes = renderTypes;\n  }\n}\n\n/**\n * Types used for the renderer.\n * Can be replaced to specialize the generated output to a specific renderer\n * to help tree shaking.\n */\nexport abstract class RenderTypes {\n  get renderer(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderText(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderElement(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderComment(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderNode(): CompileIdentifierMetadata { return unimplemented(); }\n  get renderEvent(): CompileIdentifierMetadata { return unimplemented(); }\n}\n\nexport class DefaultRenderTypes implements RenderTypes {\n  renderer = Identifiers.Renderer;\n  renderText = null;\n  renderElement = null;\n  renderComment = null;\n  renderNode = null;\n  renderEvent = null;\n}\n"]}