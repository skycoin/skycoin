{"version":3,"file":"animation_transition_event.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/animation_transition_event.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IAME,kCAAY,EAC8E;YAD7E,wBAAS,EAAE,oBAAO,EAAE,wBAAS,EAAE,wBAAS;QAEnD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACH,+BAAC;AAAD,CAAC,AAbD,IAaC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An instance of this class is returned as an event parameter when an animation\n * callback is captured for an animation either during the start or done phase.\n *\n * ```typescript\n * @Component({\n *   host: {\n *     '[@myAnimationTrigger]': 'someExpression',\n *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',\n *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n *   },\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *        // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   someExpression: any = false;\n *   captureStartEvent(event: AnimationTransitionEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n *\n *   captureDoneEvent(event: AnimationTransitionEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n * }\n * ```\n *\n * @experimental Animation support is experimental.\n */\nexport class AnimationTransitionEvent {\n  public fromState: string;\n  public toState: string;\n  public totalTime: number;\n  public phaseName: string;\n\n  constructor({fromState, toState, totalTime, phaseName}:\n                  {fromState: string, toState: string, totalTime: number, phaseName: string}) {\n    this.fromState = fromState;\n    this.toState = toState;\n    this.totalTime = totalTime;\n    this.phaseName = phaseName;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}