{"version":3,"file":"by.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/dom/debug/by.ts"],"names":[],"mappings":";AAKA,qBAA8B,0BAA0B,CAAC,CAAA;AAEzD,4BAAqB,uBAAuB,CAAC,CAAA;AAG7C;;GAEG;AACH;IAAA;IAmCA,CAAC;IAlCC;;;;;;OAMG;IACI,MAAG,GAAV,cAAwC,MAAM,CAAC,UAAC,YAAY,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC,CAAC;IAExE;;;;;;OAMG;IACI,MAAG,GAAV,UAAW,QAAgB;QACzB,MAAM,CAAC,UAAC,YAAY;YAClB,MAAM,CAAC,gBAAS,CAAC,YAAY,CAAC,aAAa,CAAC;gBACjC,oBAAM,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC;gBAC7D,KAAK,CAAC;QACnB,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,YAAS,GAAhB,UAAiB,IAAU;QACzB,MAAM,CAAC,UAAC,YAAY,IAAO,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC;IACH,SAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,UAAE,KAmCd,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {DebugElement} from '@angular/core';\nimport {Type, isPresent} from '../../../src/facade/lang';\nimport {Predicate} from '../../../src/facade/collection';\nimport {getDOM} from '../../dom/dom_adapter';\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n */\nexport class By {\n  /**\n   * Match all elements.\n   *\n   * ## Example\n   *\n   * {@example platform/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugElement> { return (debugElement) => true; }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * ## Example\n   *\n   * {@example platform/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return isPresent(debugElement.nativeElement) ?\n                 getDOM().elementMatches(debugElement.nativeElement, selector) :\n                 false;\n    };\n  }\n\n  /**\n   * Match elements that have the given directive present.\n   *\n   * ## Example\n   *\n   * {@example platform/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type): Predicate<DebugElement> {\n    return (debugElement) => { return debugElement.providerTokens.indexOf(type) !== -1; };\n  }\n}\n"]}