{"version":3,"file":"platform_browser_dynamic.js","sourceRoot":"","sources":["../../../modules/@angular/platform-browser-dynamic/platform_browser_dynamic.ts"],"names":[],"mappings":";AAIE,yBAAsC,mBAAmB,CAAC,CAAA;AAC5D,0BAAwB,qBAAqB,CAAC,CAAA;AAE9C,qBAAwB,mBAAmB,CAAC,CAAA;AAC5C,yBAAsB,oBAAoB,CAAC,CAAA;AAC3C,iCAA4D,2BAA2B,CAAC,CAAA;AACxF,qBAAkE,eAAe,CAAC,CAAA;AAElF,6BAAqC,gBAAgB,CAAC,CAAA;AAEzC,gCAAwB;AACjC,kBAAkB,CAAA,CAAC,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,qBAAS,EAAC,CAAC,CAAC;AAE5D;;GAEG;AACU,qCAA6B;AACtC,kBAAkB,CAAA;IAChB,+CAA4B;IAC5B,6BAAkB;IAClB,EAAC,OAAO,EAAE,cAAG,EAAE,QAAQ,EAAE,kBAAO,EAAC;CAClC,CAAC;AAIN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmEG;AACH,mBACI,gBAAsB,EACtB,eAAwD;IAC1D,gBAAS,CAAC,sBAAsB,GAAG,IAAI,qCAAsB,EAAE,CAAC;IAChE,IAAI,WAAW,GAAG,yBAAkB,CAAC,gBAAgB,CACjD,CAAC,qCAA6B,EAAE,gBAAS,CAAC,eAAe,CAAC,GAAG,eAAe,GAAG,EAAE,CAAC,EAClF,kCAAe,EAAE,CAAC,QAAQ,CAAC,CAAC;IAChC,MAAM,CAAC,2BAAoB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;AAC7D,CAAC;AARe,iBAAS,YAQxB,CAAA","sourcesContent":["interface DecoratorInvocation {\n    type: Function;\n    args?: any[];\n  }\n  import {COMPILER_PROVIDERS, XHR} from '@angular/compiler';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {Provider, Type, ComponentRef} from '@angular/core';\nimport {isPresent} from './src/facade/lang';\nimport {XHRImpl} from './src/xhr/xhr_impl';\nimport {BROWSER_APP_COMMON_PROVIDERS, browserPlatform} from '@angular/platform-browser';\nimport {reflector, ReflectiveInjector, coreLoadAndBootstrap} from '@angular/core';\nimport {getDOM} from './platform_browser_private';\nimport {ReflectionCapabilities} from './core_private';\n\nexport const CACHED_TEMPLATE_PROVIDER: Array<any /*Type | Provider | any[]*/> =\n    /*@ts2dart_const*/[{provide: XHR, useClass: CachedXHR}];\n\n/**\n * An array of providers that should be passed into `application()` when bootstrapping a component.\n */\nexport const BROWSER_APP_DYNAMIC_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    /*@ts2dart_const*/[\n      BROWSER_APP_COMMON_PROVIDERS,\n      COMPILER_PROVIDERS,\n      {provide: XHR, useClass: XHRImpl},\n    ];\n\n\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n */\nexport function bootstrap(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n  var appInjector = ReflectiveInjector.resolveAndCreate(\n      [BROWSER_APP_DYNAMIC_PROVIDERS, isPresent(customProviders) ? customProviders : []],\n      browserPlatform().injector);\n  return coreLoadAndBootstrap(appInjector, appComponentType);\n}\n"]}